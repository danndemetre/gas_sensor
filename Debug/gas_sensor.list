
gas_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080033c0  080033c0  000133c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033e8  080033e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080033e8  080033e8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033e8  080033e8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033e8  080033e8  000133e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033ec  080033ec  000133ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080033f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000010  08003400  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08003400  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b664  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a81  00000000  00000000  0002b69d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  0002d120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e8  00000000  00000000  0002da88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001850  00000000  00000000  0002e370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b17e  00000000  00000000  0002fbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008414e  00000000  00000000  0003ad3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bee8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002744  00000000  00000000  000beee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080033a8 	.word	0x080033a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080033a8 	.word	0x080033a8

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2uiz>:
 80008e8:	004a      	lsls	r2, r1, #1
 80008ea:	d211      	bcs.n	8000910 <__aeabi_d2uiz+0x28>
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d211      	bcs.n	8000916 <__aeabi_d2uiz+0x2e>
 80008f2:	d50d      	bpl.n	8000910 <__aeabi_d2uiz+0x28>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d40e      	bmi.n	800091c <__aeabi_d2uiz+0x34>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d102      	bne.n	8000922 <__aeabi_d2uiz+0x3a>
 800091c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000920:	4770      	bx	lr
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	4770      	bx	lr

08000928 <__aeabi_d2f>:
 8000928:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800092c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000930:	bf24      	itt	cs
 8000932:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000936:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093a:	d90d      	bls.n	8000958 <__aeabi_d2f+0x30>
 800093c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000940:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000944:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000948:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800094c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000950:	bf08      	it	eq
 8000952:	f020 0001 	biceq.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800095c:	d121      	bne.n	80009a2 <__aeabi_d2f+0x7a>
 800095e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000962:	bfbc      	itt	lt
 8000964:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000968:	4770      	bxlt	lr
 800096a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000972:	f1c2 0218 	rsb	r2, r2, #24
 8000976:	f1c2 0c20 	rsb	ip, r2, #32
 800097a:	fa10 f30c 	lsls.w	r3, r0, ip
 800097e:	fa20 f002 	lsr.w	r0, r0, r2
 8000982:	bf18      	it	ne
 8000984:	f040 0001 	orrne.w	r0, r0, #1
 8000988:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000990:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000994:	ea40 000c 	orr.w	r0, r0, ip
 8000998:	fa23 f302 	lsr.w	r3, r3, r2
 800099c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a0:	e7cc      	b.n	800093c <__aeabi_d2f+0x14>
 80009a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009a6:	d107      	bne.n	80009b8 <__aeabi_d2f+0x90>
 80009a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009ac:	bf1e      	ittt	ne
 80009ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009b6:	4770      	bxne	lr
 80009b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <ads1115_encode_cfg>:
/* Low water mark to signal an alert */
static uint8_t ADS1115_LOW_THRES_REG = 0x02;
/* High water mark to signal an alert */
static uint8_t ADS1115_HIGH_THRES_REG = 0x03;

ads1115_raw_conf_t ads1115_encode_cfg(ads1115_config_t * conf){
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	ads1115_raw_conf_t raw_conf = 0x0000;
 80009d0:	2300      	movs	r3, #0
 80009d2:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->os & ADS1115_OS_BIT_MASK) << ADS1115_OS_BIT_OFFSET;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	03db      	lsls	r3, r3, #15
 80009da:	b21a      	sxth	r2, r3
 80009dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	b21b      	sxth	r3, r3
 80009e4:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->pin & ADS1115_PIN_BIT_MASK) << ADS1115_PIN_BIT_OFFSET;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	785b      	ldrb	r3, [r3, #1]
 80009ea:	031b      	lsls	r3, r3, #12
 80009ec:	b21b      	sxth	r3, r3
 80009ee:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b21b      	sxth	r3, r3
 80009fc:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->gain & ADS1115_PGA_BIT_MASK) << ADS1115_PGA_BIT_OFFSET;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	789b      	ldrb	r3, [r3, #2]
 8000a02:	025b      	lsls	r3, r3, #9
 8000a04:	b21b      	sxth	r3, r3
 8000a06:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8000a0a:	b21a      	sxth	r2, r3
 8000a0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	b21b      	sxth	r3, r3
 8000a14:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->mode & ADS1115_MODE_BIT_MASK) << ADS1115_MODE_BIT_OFFSET;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	78db      	ldrb	r3, [r3, #3]
 8000a1a:	021b      	lsls	r3, r3, #8
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a22:	b21a      	sxth	r2, r3
 8000a24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	b21b      	sxth	r3, r3
 8000a2c:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->data_rate & ADS1115_DR_BIT_MASK) << ADS1115_DR_BIT_OFFSET;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	791b      	ldrb	r3, [r3, #4]
 8000a32:	015b      	lsls	r3, r3, #5
 8000a34:	b21b      	sxth	r3, r3
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	b21a      	sxth	r2, r3
 8000a3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	b21b      	sxth	r3, r3
 8000a42:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->comp & ADS1115_COMP_BIT_MASK) << ADS1115_COMP_BIT_OFFSET;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	795b      	ldrb	r3, [r3, #5]
 8000a48:	011b      	lsls	r3, r3, #4
 8000a4a:	b21b      	sxth	r3, r3
 8000a4c:	f003 0310 	and.w	r3, r3, #16
 8000a50:	b21a      	sxth	r2, r3
 8000a52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->polarity & ADS1115_POL_BIT_MASK) << ADS1115_POL_BIT_OFFSET;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	799b      	ldrb	r3, [r3, #6]
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	b21b      	sxth	r3, r3
 8000a64:	f003 0308 	and.w	r3, r3, #8
 8000a68:	b21a      	sxth	r2, r3
 8000a6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	b21b      	sxth	r3, r3
 8000a72:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->latch & ADS1115_LATCH_BIT_MASK) << ADS1115_LATCH_BIT_OFFSET;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	79db      	ldrb	r3, [r3, #7]
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	b21b      	sxth	r3, r3
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	b21a      	sxth	r2, r3
 8000a82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	b21b      	sxth	r3, r3
 8000a8a:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->queue & ADS1115_QUEUE_BIT_MASK) << ADS1115_QUEUE_BIT_OFFSET;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	7a1b      	ldrb	r3, [r3, #8]
 8000a90:	b21b      	sxth	r3, r3
 8000a92:	f003 0303 	and.w	r3, r3, #3
 8000a96:	b21a      	sxth	r2, r3
 8000a98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	b21b      	sxth	r3, r3
 8000aa0:	81fb      	strh	r3, [r7, #14]
	return raw_conf;
 8000aa2:	89fb      	ldrh	r3, [r7, #14]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr

08000aae <ads1115_decode_cfg>:

ads1115_config_t   ads1115_decode_cfg(ads1115_raw_conf_t  raw_conf){
 8000aae:	b480      	push	{r7}
 8000ab0:	b087      	sub	sp, #28
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	807b      	strh	r3, [r7, #2]
	ads1115_config_t conf;
	conf.os = (raw_conf >> ADS1115_OS_BIT_OFFSET) & ADS1115_OS_BIT_MASK;
 8000aba:	887b      	ldrh	r3, [r7, #2]
 8000abc:	0bdb      	lsrs	r3, r3, #15
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	733b      	strb	r3, [r7, #12]
	conf.pin = (raw_conf >> ADS1115_PIN_BIT_OFFSET) & ADS1115_PIN_BIT_MASK;
 8000aca:	887b      	ldrh	r3, [r7, #2]
 8000acc:	0b1b      	lsrs	r3, r3, #12
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	737b      	strb	r3, [r7, #13]
	conf.gain = (raw_conf >> ADS1115_PGA_BIT_OFFSET) & ADS1115_PGA_BIT_MASK;
 8000ada:	887b      	ldrh	r3, [r7, #2]
 8000adc:	0a5b      	lsrs	r3, r3, #9
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	73bb      	strb	r3, [r7, #14]
	conf.mode = (raw_conf >> ADS1115_MODE_BIT_OFFSET) & ADS1115_MODE_BIT_MASK;
 8000aea:	887b      	ldrh	r3, [r7, #2]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	73fb      	strb	r3, [r7, #15]
	conf.data_rate = (raw_conf >> ADS1115_DR_BIT_OFFSET) & ADS1115_DR_BIT_MASK;
 8000afa:	887b      	ldrh	r3, [r7, #2]
 8000afc:	095b      	lsrs	r3, r3, #5
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	743b      	strb	r3, [r7, #16]
	conf.polarity = (raw_conf >> ADS1115_POL_BIT_OFFSET) & ADS1115_POL_BIT_MASK;
 8000b0a:	887b      	ldrh	r3, [r7, #2]
 8000b0c:	08db      	lsrs	r3, r3, #3
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	74bb      	strb	r3, [r7, #18]
	conf.latch = (raw_conf >> ADS1115_LATCH_BIT_OFFSET) & ADS1115_LATCH_BIT_MASK;
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	089b      	lsrs	r3, r3, #2
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	74fb      	strb	r3, [r7, #19]
	conf.queue = (raw_conf >> ADS1115_QUEUE_BIT_OFFSET) & ADS1115_QUEUE_BIT_MASK;
 8000b2a:	887b      	ldrh	r3, [r7, #2]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	753b      	strb	r3, [r7, #20]
	return conf;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	cb03      	ldmia	r3!, {r0, r1}
 8000b40:	6010      	str	r0, [r2, #0]
 8000b42:	6051      	str	r1, [r2, #4]
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	7213      	strb	r3, [r2, #8]
}
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	371c      	adds	r7, #28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
	...

08000b54 <ads1115_read_cfg>:


HAL_StatusTypeDef ads1115_read_cfg(ads1115_i2c_conf_t* i2c_conf, ads1115_config_t * conf)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b08b      	sub	sp, #44	; 0x2c
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	6178      	str	r0, [r7, #20]
 8000b5c:	6139      	str	r1, [r7, #16]
    if (i2c_conf == NULL) {
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d101      	bne.n	8000b68 <ads1115_read_cfg+0x14>
        return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	e037      	b.n	8000bd8 <ads1115_read_cfg+0x84>
    }
    HAL_StatusTypeDef err;
    uint8_t raw_conf_eight_bit[2];
    ads1115_raw_conf_t raw_conf;
    err = HAL_I2C_Master_Transmit(i2c_conf->hi2c,  i2c_conf->i2c_slave_addr,  &ADS1115_CONFIGURATION_REG, 1, i2c_conf->timeout);
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	6818      	ldr	r0, [r3, #0]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	791b      	ldrb	r3, [r3, #4]
 8000b70:	b299      	uxth	r1, r3
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	4a19      	ldr	r2, [pc, #100]	; (8000be0 <ads1115_read_cfg+0x8c>)
 8000b7c:	f001 f842 	bl	8001c04 <HAL_I2C_Master_Transmit>
 8000b80:	4603      	mov	r3, r0
 8000b82:	77fb      	strb	r3, [r7, #31]
    if (err == HAL_OK){
 8000b84:	7ffb      	ldrb	r3, [r7, #31]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d10e      	bne.n	8000ba8 <ads1115_read_cfg+0x54>
    	err = HAL_I2C_Master_Receive(i2c_conf->hi2c, i2c_conf->i2c_slave_addr, raw_conf_eight_bit, 2, i2c_conf->timeout);
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	6818      	ldr	r0, [r3, #0]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	791b      	ldrb	r3, [r3, #4]
 8000b92:	b299      	uxth	r1, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	f107 0218 	add.w	r2, r7, #24
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	f001 f92e 	bl	8001e00 <HAL_I2C_Master_Receive>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	77fb      	strb	r3, [r7, #31]
    }
    raw_conf = ((ads1115_raw_conf_t)raw_conf_eight_bit[0] << 8 )| raw_conf_eight_bit[1];
 8000ba8:	7e3b      	ldrb	r3, [r7, #24]
 8000baa:	021b      	lsls	r3, r3, #8
 8000bac:	b21a      	sxth	r2, r3
 8000bae:	7e7b      	ldrb	r3, [r7, #25]
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	83bb      	strh	r3, [r7, #28]
    *conf = ads1115_decode_cfg(raw_conf);
 8000bb8:	693c      	ldr	r4, [r7, #16]
 8000bba:	463b      	mov	r3, r7
 8000bbc:	8bba      	ldrh	r2, [r7, #28]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff74 	bl	8000aae <ads1115_decode_cfg>
 8000bc6:	4622      	mov	r2, r4
 8000bc8:	463b      	mov	r3, r7
 8000bca:	6818      	ldr	r0, [r3, #0]
 8000bcc:	6859      	ldr	r1, [r3, #4]
 8000bce:	6010      	str	r0, [r2, #0]
 8000bd0:	6051      	str	r1, [r2, #4]
 8000bd2:	7a1b      	ldrb	r3, [r3, #8]
 8000bd4:	7213      	strb	r3, [r2, #8]
    return err;
 8000bd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3724      	adds	r7, #36	; 0x24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd90      	pop	{r4, r7, pc}
 8000be0:	20000000 	.word	0x20000000

08000be4 <ads1115_write_cfg>:

HAL_StatusTypeDef ads1115_write_cfg(ads1115_i2c_conf_t* i2c_conf, ads1115_config_t * conf)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af02      	add	r7, sp, #8
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
    if (i2c_conf == NULL) {
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d101      	bne.n	8000bf8 <ads1115_write_cfg+0x14>
        return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e02d      	b.n	8000c54 <ads1115_write_cfg+0x70>
    }

 HAL_StatusTypeDef err;
    ads1115_raw_conf_t raw_conf = ads1115_encode_cfg(conf);
 8000bf8:	6838      	ldr	r0, [r7, #0]
 8000bfa:	f7ff fee5 	bl	80009c8 <ads1115_encode_cfg>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	81bb      	strh	r3, [r7, #12]
    uint8_t raw_conf_eight_bit[2] = { raw_conf >> 8, raw_conf & 0xFF};
 8000c02:	89bb      	ldrh	r3, [r7, #12]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	723b      	strb	r3, [r7, #8]
 8000c0c:	89bb      	ldrh	r3, [r7, #12]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	727b      	strb	r3, [r7, #9]
    err = HAL_I2C_Master_Transmit(i2c_conf->hi2c,  i2c_conf->i2c_slave_addr,  &ADS1115_CONFIGURATION_REG, 1, i2c_conf->timeout);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6818      	ldr	r0, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	791b      	ldrb	r3, [r3, #4]
 8000c1a:	b299      	uxth	r1, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	2301      	movs	r3, #1
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <ads1115_write_cfg+0x78>)
 8000c26:	f000 ffed 	bl	8001c04 <HAL_I2C_Master_Transmit>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	73fb      	strb	r3, [r7, #15]
    if (err == HAL_OK){
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d10e      	bne.n	8000c52 <ads1115_write_cfg+0x6e>
    	err = HAL_I2C_Master_Transmit(i2c_conf->hi2c, i2c_conf->i2c_slave_addr, raw_conf_eight_bit, 2, i2c_conf->timeout);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6818      	ldr	r0, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	791b      	ldrb	r3, [r3, #4]
 8000c3c:	b299      	uxth	r1, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f107 0208 	add.w	r2, r7, #8
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	2302      	movs	r3, #2
 8000c4a:	f000 ffdb 	bl	8001c04 <HAL_I2C_Master_Transmit>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	73fb      	strb	r3, [r7, #15]
    }
   return err;
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000000 	.word	0x20000000

08000c60 <__ads1115_convert_raw_voltage>:

HAL_StatusTypeDef __ads1115_convert_raw_voltage(ads1115_config_t * conf,
                                         int16_t raw_value,
                                         int16_t* converted_value)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	607a      	str	r2, [r7, #4]
 8000c6c:	817b      	strh	r3, [r7, #10]

    if (converted_value == NULL) {
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d101      	bne.n	8000c78 <__ads1115_convert_raw_voltage+0x18>
        return HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	e078      	b.n	8000d6a <__ads1115_convert_raw_voltage+0x10a>
    }
    double buf = ((double)raw_value / 32768);
 8000c78:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fbb7 	bl	80003f0 <__aeabi_i2d>
 8000c82:	f04f 0200 	mov.w	r2, #0
 8000c86:	4b3b      	ldr	r3, [pc, #236]	; (8000d74 <__ads1115_convert_raw_voltage+0x114>)
 8000c88:	f7ff fd46 	bl	8000718 <__aeabi_ddiv>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	e9c7 2306 	strd	r2, r3, [r7, #24]
    HAL_StatusTypeDef err = HAL_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	75fb      	strb	r3, [r7, #23]
    switch (conf->gain) {
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	789b      	ldrb	r3, [r3, #2]
 8000c9c:	2b05      	cmp	r3, #5
 8000c9e:	d858      	bhi.n	8000d52 <__ads1115_convert_raw_voltage+0xf2>
 8000ca0:	a201      	add	r2, pc, #4	; (adr r2, 8000ca8 <__ads1115_convert_raw_voltage+0x48>)
 8000ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca6:	bf00      	nop
 8000ca8:	08000cc1 	.word	0x08000cc1
 8000cac:	08000cd9 	.word	0x08000cd9
 8000cb0:	08000cf1 	.word	0x08000cf1
 8000cb4:	08000d09 	.word	0x08000d09
 8000cb8:	08000d21 	.word	0x08000d21
 8000cbc:	08000d3b 	.word	0x08000d3b
		case ADS1115_6_144V: buf = buf * 6144; break;
 8000cc0:	f04f 0200 	mov.w	r2, #0
 8000cc4:	4b2c      	ldr	r3, [pc, #176]	; (8000d78 <__ads1115_convert_raw_voltage+0x118>)
 8000cc6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000cca:	f7ff fbfb 	bl	80004c4 <__aeabi_dmul>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000cd6:	e03e      	b.n	8000d56 <__ads1115_convert_raw_voltage+0xf6>
		case ADS1115_4_096V: buf = buf * 4096; break;
 8000cd8:	f04f 0200 	mov.w	r2, #0
 8000cdc:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <__ads1115_convert_raw_voltage+0x11c>)
 8000cde:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ce2:	f7ff fbef 	bl	80004c4 <__aeabi_dmul>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	460b      	mov	r3, r1
 8000cea:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000cee:	e032      	b.n	8000d56 <__ads1115_convert_raw_voltage+0xf6>
		case ADS1115_2_048V: buf = buf * 2048; break;
 8000cf0:	f04f 0200 	mov.w	r2, #0
 8000cf4:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <__ads1115_convert_raw_voltage+0x120>)
 8000cf6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000cfa:	f7ff fbe3 	bl	80004c4 <__aeabi_dmul>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	460b      	mov	r3, r1
 8000d02:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000d06:	e026      	b.n	8000d56 <__ads1115_convert_raw_voltage+0xf6>
		case ADS1115_1_024V: buf = buf * 1024; break;
 8000d08:	f04f 0200 	mov.w	r2, #0
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <__ads1115_convert_raw_voltage+0x124>)
 8000d0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d12:	f7ff fbd7 	bl	80004c4 <__aeabi_dmul>
 8000d16:	4602      	mov	r2, r0
 8000d18:	460b      	mov	r3, r1
 8000d1a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000d1e:	e01a      	b.n	8000d56 <__ads1115_convert_raw_voltage+0xf6>
		case ADS1115_0_512V: buf = buf * 512; break;
 8000d20:	f04f 0200 	mov.w	r2, #0
 8000d24:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8000d28:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d2c:	f7ff fbca 	bl	80004c4 <__aeabi_dmul>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000d38:	e00d      	b.n	8000d56 <__ads1115_convert_raw_voltage+0xf6>
		case ADS1115_0_256V: buf = buf * 256; break;
 8000d3a:	f04f 0200 	mov.w	r2, #0
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <__ads1115_convert_raw_voltage+0x128>)
 8000d40:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d44:	f7ff fbbe 	bl	80004c4 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000d50:	e001      	b.n	8000d56 <__ads1115_convert_raw_voltage+0xf6>
		default: return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e009      	b.n	8000d6a <__ads1115_convert_raw_voltage+0x10a>
    }

    *converted_value = (uint16_t)buf;
 8000d56:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d5a:	f7ff fdc5 	bl	80008e8 <__aeabi_d2uiz>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	b21a      	sxth	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	801a      	strh	r2, [r3, #0]

    return err;
 8000d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3720      	adds	r7, #32
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40e00000 	.word	0x40e00000
 8000d78:	40b80000 	.word	0x40b80000
 8000d7c:	40b00000 	.word	0x40b00000
 8000d80:	40a00000 	.word	0x40a00000
 8000d84:	40900000 	.word	0x40900000
 8000d88:	40700000 	.word	0x40700000

08000d8c <ads1115_read_adc_millivolts>:

HAL_StatusTypeDef ads1115_read_adc_millivolts(ads1115_i2c_conf_t* i2c_conf,
		ads1115_config_t *  conf, int16_t* mv)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
	return ads1115_read_to_millivolts(i2c_conf, conf, mv, &ADS1115_CONVERSION_REG);
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <ads1115_read_adc_millivolts+0x24>)
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	68f8      	ldr	r0, [r7, #12]
 8000da0:	f000 f808 	bl	8000db4 <ads1115_read_to_millivolts>
 8000da4:	4603      	mov	r3, r0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2000002c 	.word	0x2000002c

08000db4 <ads1115_read_to_millivolts>:
	return ads1115_read_to_millivolts(i2c_conf, conf, mv_value, &ADS1115_HIGH_THRES_REG);
}

HAL_StatusTypeDef ads1115_read_to_millivolts(ads1115_i2c_conf_t* i2c_conf,
		ads1115_config_t *  conf, int16_t* mv_value, uint8_t * dev_register)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af02      	add	r7, sp, #8
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
 8000dc0:	603b      	str	r3, [r7, #0]
	int16_t raw_value = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	82bb      	strh	r3, [r7, #20]
	HAL_StatusTypeDef err = HAL_OK;;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	75fb      	strb	r3, [r7, #23]

	if (i2c_conf == NULL) {
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d101      	bne.n	8000dd4 <ads1115_read_to_millivolts+0x20>
		return err;
 8000dd0:	7dfb      	ldrb	r3, [r7, #23]
 8000dd2:	e03c      	b.n	8000e4e <ads1115_read_to_millivolts+0x9a>
	}
	err = ads1115_read_cfg(i2c_conf, conf);
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f7ff febc 	bl	8000b54 <ads1115_read_cfg>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	75fb      	strb	r3, [r7, #23]
	if (err == HAL_OK){
 8000de0:	7dfb      	ldrb	r3, [r7, #23]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d132      	bne.n	8000e4c <ads1115_read_to_millivolts+0x98>
		uint8_t conv_res_eight_bit[2];
		err = HAL_I2C_Master_Transmit(i2c_conf->hi2c,  i2c_conf->i2c_slave_addr,  dev_register, 1, i2c_conf->timeout);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6818      	ldr	r0, [r3, #0]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	791b      	ldrb	r3, [r3, #4]
 8000dee:	b299      	uxth	r1, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2301      	movs	r3, #1
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	f000 ff03 	bl	8001c04 <HAL_I2C_Master_Transmit>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	75fb      	strb	r3, [r7, #23]
		if (err == HAL_OK){
 8000e02:	7dfb      	ldrb	r3, [r7, #23]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d10e      	bne.n	8000e26 <ads1115_read_to_millivolts+0x72>
			err = HAL_I2C_Master_Receive(i2c_conf->hi2c, i2c_conf->i2c_slave_addr, conv_res_eight_bit, 2, i2c_conf->timeout);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	6818      	ldr	r0, [r3, #0]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	791b      	ldrb	r3, [r3, #4]
 8000e10:	b299      	uxth	r1, r3
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f107 0210 	add.w	r2, r7, #16
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	f000 ffef 	bl	8001e00 <HAL_I2C_Master_Receive>
 8000e22:	4603      	mov	r3, r0
 8000e24:	75fb      	strb	r3, [r7, #23]
		}
		raw_value = ((int16_t)conv_res_eight_bit[0] << 8 )| conv_res_eight_bit[1];
 8000e26:	7c3b      	ldrb	r3, [r7, #16]
 8000e28:	021b      	lsls	r3, r3, #8
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	7c7b      	ldrb	r3, [r7, #17]
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	4313      	orrs	r3, r2
 8000e32:	82bb      	strh	r3, [r7, #20]

		if (err == HAL_OK) {
 8000e34:	7dfb      	ldrb	r3, [r7, #23]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d108      	bne.n	8000e4c <ads1115_read_to_millivolts+0x98>
			err = __ads1115_convert_raw_voltage(conf, raw_value, mv_value);
 8000e3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	4619      	mov	r1, r3
 8000e42:	68b8      	ldr	r0, [r7, #8]
 8000e44:	f7ff ff0c 	bl	8000c60 <__ads1115_convert_raw_voltage>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	75fb      	strb	r3, [r7, #23]
		}
	}
	return err;
 8000e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <lm60_get_temp>:
 */
#include "components/lm60.h"
#include "components/ads1115.h"
#include "stdlib.h"

HAL_StatusTypeDef lm60_get_temp(lm60_cfg_t* lm60_conf, float * temp_c){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef err = ads1115_write_cfg(lm60_conf->ads_i2c_conf,  lm60_conf->ads_reg_conf);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	f7ff feb9 	bl	8000be4 <ads1115_write_cfg>
 8000e72:	4603      	mov	r3, r0
 8000e74:	73fb      	strb	r3, [r7, #15]
	int16_t mv;
	if (err == HAL_OK){
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d122      	bne.n	8000ec2 <lm60_get_temp+0x6a>
		err = ads1115_read_adc_millivolts(lm60_conf->ads_i2c_conf, lm60_conf->ads_reg_conf, &mv);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6818      	ldr	r0, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f107 020c 	add.w	r2, r7, #12
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f7ff ff7f 	bl	8000d8c <ads1115_read_adc_millivolts>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	73fb      	strb	r3, [r7, #15]
		if( err == HAL_OK){
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d114      	bne.n	8000ec2 <lm60_get_temp+0x6a>
			* temp_c = (mv - 424) / 6.25;
 8000e98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e9c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff faa5 	bl	80003f0 <__aeabi_i2d>
 8000ea6:	f04f 0200 	mov.w	r2, #0
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <lm60_get_temp+0x74>)
 8000eac:	f7ff fc34 	bl	8000718 <__aeabi_ddiv>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f7ff fd36 	bl	8000928 <__aeabi_d2f>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	601a      	str	r2, [r3, #0]
		}
	}
	return err;
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40190000 	.word	0x40190000

08000ed0 <hw_conf_lm60>:
 *      Author: dann
 */
#include "hw_config.h"
#include "stm32f1xx_hal.h"

lm60_cfg_t hw_conf_lm60(){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b0a0      	sub	sp, #128	; 0x80
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	ads1115_i2c_conf_t ads1115_i2c_conf = (ads1115_i2c_conf_t){
			.hi2c = hw_conf_lm60_ads1115().ads1115_hi2c,
 8000ed8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 f83b 	bl	8000f58 <hw_conf_lm60_ads1115>
 8000ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	ads1115_i2c_conf_t ads1115_i2c_conf = (ads1115_i2c_conf_t){
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
			.i2c_slave_addr =hw_conf_lm60_ads1115().ads1115_i2c_slave_addr,
 8000ee6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f834 	bl	8000f58 <hw_conf_lm60_ads1115>
 8000ef0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
	ads1115_i2c_conf_t ads1115_i2c_conf = (ads1115_i2c_conf_t){
 8000ef4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			.timeout = hw_conf_lm60_ads1115().ads1115_timeout,
 8000ef8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f82b 	bl	8000f58 <hw_conf_lm60_ads1115>
 8000f02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
	ads1115_i2c_conf_t ads1115_i2c_conf = (ads1115_i2c_conf_t){
 8000f04:	63fb      	str	r3, [r7, #60]	; 0x3c
	};
	ads1115_config_t ads1115_reg_config = 	 (ads1115_config_t){
 8000f06:	2300      	movs	r3, #0
 8000f08:	773b      	strb	r3, [r7, #28]
			.os = ADS1115_OS,
			.pin = hw_conf_lm60_ads1115().ads1115_pin,
 8000f0a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f822 	bl	8000f58 <hw_conf_lm60_ads1115>
 8000f14:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
	ads1115_config_t ads1115_reg_config = 	 (ads1115_config_t){
 8000f18:	777b      	strb	r3, [r7, #29]
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	77bb      	strb	r3, [r7, #30]
 8000f1e:	2301      	movs	r3, #1
 8000f20:	77fb      	strb	r3, [r7, #31]
 8000f22:	2304      	movs	r3, #4
 8000f24:	f887 3020 	strb.w	r3, [r7, #32]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000f34:	2300      	movs	r3, #0
 8000f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			.polarity = ADS1115_DEF_POL,
			.latch = ADS1115_DEF_LATCH,
			.queue = ADS1115_COMP_DISABLE,
	};

	return (lm60_cfg_t){
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f107 021c 	add.w	r2, r7, #28
 8000f4e:	605a      	str	r2, [r3, #4]
		.ads_i2c_conf = &ads1115_i2c_conf,
		.ads_reg_conf = &ads1115_reg_config,
	};
}
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	3780      	adds	r7, #128	; 0x80
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <hw_conf_lm60_ads1115>:
		.page_size = 32, //Bytes
		.pages = 256,
	};
}

struct  hw_conf_lm60 hw_conf_lm60_ads1115(){
 8000f58:	b480      	push	{r7}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	return (struct hw_conf_lm60){
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	461a      	mov	r2, r3
 8000f64:	2300      	movs	r3, #0
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	6053      	str	r3, [r2, #4]
 8000f6a:	6093      	str	r3, [r2, #8]
 8000f6c:	60d3      	str	r3, [r2, #12]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <hw_conf_lm60_ads1115+0x34>)
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2248      	movs	r2, #72	; 0x48
 8000f78:	711a      	strb	r2, [r3, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2205      	movs	r2, #5
 8000f7e:	731a      	strb	r2, [r3, #12]
		.ads1115_hi2c = &hi2c2,
		.ads1115_i2c_slave_addr = ADS1115BUS_ADDRESS_GND,
		.ads1115_pin = ADS1115_AIN1_COMP_GND };
}
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	371c      	adds	r7, #28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000030 	.word	0x20000030

08000f90 <MX_USART1_UART_Init>:


void MX_USART1_UART_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_USART1_UART_Init+0x4c>)
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <MX_USART1_UART_Init+0x50>)
 8000f98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <MX_USART1_UART_Init+0x4c>)
 8000f9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_USART1_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_USART1_UART_Init+0x4c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <MX_USART1_UART_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_USART1_UART_Init+0x4c>)
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <MX_USART1_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_USART1_UART_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_USART1_UART_Init+0x4c>)
 8000fc8:	f002 f8e6 	bl	8003198 <HAL_UART_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fd2:	f000 f835 	bl	8001040 <Error_Handler>
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000084 	.word	0x20000084
 8000fe0:	40013800 	.word	0x40013800

08000fe4 <MX_I2C2_Init>:

void MX_I2C2_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  hi2c2.Instance = I2C2;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_I2C2_Init+0x50>)
 8000fea:	4a13      	ldr	r2, [pc, #76]	; (8001038 <MX_I2C2_Init+0x54>)
 8000fec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_I2C2_Init+0x50>)
 8000ff0:	4a12      	ldr	r2, [pc, #72]	; (800103c <MX_I2C2_Init+0x58>)
 8000ff2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_I2C2_Init+0x50>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_I2C2_Init+0x50>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_I2C2_Init+0x50>)
 8001002:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001006:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <MX_I2C2_Init+0x50>)
 800100a:	2200      	movs	r2, #0
 800100c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_I2C2_Init+0x50>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <MX_I2C2_Init+0x50>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <MX_I2C2_Init+0x50>)
 800101c:	2200      	movs	r2, #0
 800101e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <MX_I2C2_Init+0x50>)
 8001022:	f000 fcab 	bl	800197c <HAL_I2C_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800102c:	f000 f808 	bl	8001040 <Error_Handler>
  }
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000030 	.word	0x20000030
 8001038:	40005800 	.word	0x40005800
 800103c:	000186a0 	.word	0x000186a0

08001040 <Error_Handler>:

void Error_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001044:	b672      	cpsid	i
}
 8001046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001048:	e7fe      	b.n	8001048 <Error_Handler+0x8>
	...

0800104c <MX_GPIO_Init>:
  }
  /* USER CODE END Error_Handler_Debug */
}

void MX_GPIO_Init(void)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_GPIO_Init+0x58>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	4a13      	ldr	r2, [pc, #76]	; (80010a4 <MX_GPIO_Init+0x58>)
 8001058:	f043 0320 	orr.w	r3, r3, #32
 800105c:	6193      	str	r3, [r2, #24]
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_GPIO_Init+0x58>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	f003 0320 	and.w	r3, r3, #32
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_GPIO_Init+0x58>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <MX_GPIO_Init+0x58>)
 8001070:	f043 0308 	orr.w	r3, r3, #8
 8001074:	6193      	str	r3, [r2, #24]
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_GPIO_Init+0x58>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_GPIO_Init+0x58>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <MX_GPIO_Init+0x58>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	6193      	str	r3, [r2, #24]
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <MX_GPIO_Init+0x58>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
}
 800109a:	bf00      	nop
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	40021000 	.word	0x40021000

080010a8 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b090      	sub	sp, #64	; 0x40
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0318 	add.w	r3, r7, #24
 80010b2:	2228      	movs	r2, #40	; 0x28
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 f96e 	bl	8003398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ca:	2301      	movs	r3, #1
 80010cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d8:	2301      	movs	r3, #1
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010dc:	2302      	movs	r3, #2
 80010de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ec:	f107 0318 	add.w	r3, r7, #24
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 fc11 	bl	8002918 <HAL_RCC_OscConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010fc:	f7ff ffa0 	bl	8001040 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001100:	230f      	movs	r3, #15
 8001102:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001104:	2302      	movs	r3, #2
 8001106:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800110c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001110:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2102      	movs	r1, #2
 800111a:	4618      	mov	r0, r3
 800111c:	f001 fe7c 	bl	8002e18 <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001126:	f7ff ff8b 	bl	8001040 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800112a:	f001 ff5f 	bl	8002fec <HAL_RCC_EnableCSS>
}
 800112e:	bf00      	nop
 8001130:	3740      	adds	r7, #64	; 0x40
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
  HAL_Init();
 800113c:	f000 f930 	bl	80013a0 <HAL_Init>
  SystemClock_Config();
 8001140:	f7ff ffb2 	bl	80010a8 <SystemClock_Config>
  MX_GPIO_Init();
 8001144:	f7ff ff82 	bl	800104c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001148:	f7ff ff22 	bl	8000f90 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800114c:	f7ff ff4a 	bl	8000fe4 <MX_I2C2_Init>

 float temp_c = 0;
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 lm60_cfg_t  lm60 = hw_conf_lm60();
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff feb9 	bl	8000ed0 <hw_conf_lm60>
 //i2c_eeprom_cfg_t m24c64_eeprom = hw_conf_m24c64_w();

while (1)
  {
	  lm60_get_temp(&lm60, &temp_c);
 800115e:	f107 020c 	add.w	r2, r7, #12
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fe76 	bl	8000e58 <lm60_get_temp>
	  HAL_Delay(1000);
 800116c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001170:	f000 f978 	bl	8001464 <HAL_Delay>
	  lm60_get_temp(&lm60, &temp_c);
 8001174:	e7f3      	b.n	800115e <main+0x28>
	...

08001178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_MspInit+0x5c>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <HAL_MspInit+0x5c>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6193      	str	r3, [r2, #24]
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_MspInit+0x5c>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <HAL_MspInit+0x5c>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <HAL_MspInit+0x5c>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a0:	61d3      	str	r3, [r2, #28]
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_MspInit+0x5c>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_MspInit+0x60>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <HAL_MspInit+0x60>)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010000 	.word	0x40010000

080011dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a16      	ldr	r2, [pc, #88]	; (8001250 <HAL_I2C_MspInit+0x74>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d124      	bne.n	8001246 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_I2C_MspInit+0x78>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a14      	ldr	r2, [pc, #80]	; (8001254 <HAL_I2C_MspInit+0x78>)
 8001202:	f043 0308 	orr.w	r3, r3, #8
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_I2C_MspInit+0x78>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001214:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001218:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800121a:	2312      	movs	r3, #18
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	4619      	mov	r1, r3
 8001228:	480b      	ldr	r0, [pc, #44]	; (8001258 <HAL_I2C_MspInit+0x7c>)
 800122a:	f000 fa23 	bl	8001674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <HAL_I2C_MspInit+0x78>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a08      	ldr	r2, [pc, #32]	; (8001254 <HAL_I2C_MspInit+0x78>)
 8001234:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_I2C_MspInit+0x78>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001246:	bf00      	nop
 8001248:	3720      	adds	r7, #32
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40005800 	.word	0x40005800
 8001254:	40021000 	.word	0x40021000
 8001258:	40010c00 	.word	0x40010c00

0800125c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a1c      	ldr	r2, [pc, #112]	; (80012e8 <HAL_UART_MspInit+0x8c>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d131      	bne.n	80012e0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_UART_MspInit+0x90>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a1a      	ldr	r2, [pc, #104]	; (80012ec <HAL_UART_MspInit+0x90>)
 8001282:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_UART_MspInit+0x90>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_UART_MspInit+0x90>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a14      	ldr	r2, [pc, #80]	; (80012ec <HAL_UART_MspInit+0x90>)
 800129a:	f043 0304 	orr.w	r3, r3, #4
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_UART_MspInit+0x90>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	4619      	mov	r1, r3
 80012c0:	480b      	ldr	r0, [pc, #44]	; (80012f0 <HAL_UART_MspInit+0x94>)
 80012c2:	f000 f9d7 	bl	8001674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	4619      	mov	r1, r3
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <HAL_UART_MspInit+0x94>)
 80012dc:	f000 f9ca 	bl	8001674 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012e0:	bf00      	nop
 80012e2:	3720      	adds	r7, #32
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40013800 	.word	0x40013800
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010800 	.word	0x40010800

080012f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80012f8:	f001 ff16 	bl	8003128 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <NMI_Handler+0x8>

080012fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <HardFault_Handler+0x4>

08001304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <MemManage_Handler+0x4>

0800130a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <UsageFault_Handler+0x4>

08001316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr

0800133a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133e:	f000 f875 	bl	800142c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}

08001346 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
	...

08001354 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001356:	490d      	ldr	r1, [pc, #52]	; (800138c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001358:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800136c:	4c0a      	ldr	r4, [pc, #40]	; (8001398 <LoopFillZerobss+0x22>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800137a:	f7ff ffe4 	bl	8001346 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137e:	f001 ffe7 	bl	8003350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001382:	f7ff fed8 	bl	8001136 <main>
  bx lr
 8001386:	4770      	bx	lr
  ldr r0, =_sdata
 8001388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800138c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001390:	080033f0 	.word	0x080033f0
  ldr r2, =_sbss
 8001394:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001398:	200000cc 	.word	0x200000cc

0800139c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC1_2_IRQHandler>
	...

080013a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_Init+0x28>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <HAL_Init+0x28>)
 80013aa:	f043 0310 	orr.w	r3, r3, #16
 80013ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b0:	2003      	movs	r0, #3
 80013b2:	f000 f92b 	bl	800160c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b6:	200f      	movs	r0, #15
 80013b8:	f000 f808 	bl	80013cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013bc:	f7ff fedc 	bl	8001178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40022000 	.word	0x40022000

080013cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_InitTick+0x54>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_InitTick+0x58>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f935 	bl	800165a <HAL_SYSTICK_Config>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00e      	b.n	8001418 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b0f      	cmp	r3, #15
 80013fe:	d80a      	bhi.n	8001416 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001400:	2200      	movs	r2, #0
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001408:	f000 f90b 	bl	8001622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800140c:	4a06      	ldr	r2, [pc, #24]	; (8001428 <HAL_InitTick+0x5c>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	e000      	b.n	8001418 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000004 	.word	0x20000004
 8001424:	2000000c 	.word	0x2000000c
 8001428:	20000008 	.word	0x20000008

0800142c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_IncTick+0x1c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_IncTick+0x20>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	4a03      	ldr	r2, [pc, #12]	; (800144c <HAL_IncTick+0x20>)
 800143e:	6013      	str	r3, [r2, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	2000000c 	.word	0x2000000c
 800144c:	200000c8 	.word	0x200000c8

08001450 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b02      	ldr	r3, [pc, #8]	; (8001460 <HAL_GetTick+0x10>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	200000c8 	.word	0x200000c8

08001464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800146c:	f7ff fff0 	bl	8001450 <HAL_GetTick>
 8001470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800147c:	d005      	beq.n	800148a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_Delay+0x44>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4413      	add	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800148a:	bf00      	nop
 800148c:	f7ff ffe0 	bl	8001450 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	429a      	cmp	r2, r3
 800149a:	d8f7      	bhi.n	800148c <HAL_Delay+0x28>
  {
  }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	2000000c 	.word	0x2000000c

080014ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c8:	4013      	ands	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <__NVIC_GetPriorityGrouping+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	f003 0307 	and.w	r3, r3, #7
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db0a      	blt.n	800153a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	490c      	ldr	r1, [pc, #48]	; (800155c <__NVIC_SetPriority+0x4c>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	440b      	add	r3, r1
 8001534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001538:	e00a      	b.n	8001550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4908      	ldr	r1, [pc, #32]	; (8001560 <__NVIC_SetPriority+0x50>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	3b04      	subs	r3, #4
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	440b      	add	r3, r1
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f1c3 0307 	rsb	r3, r3, #7
 800157e:	2b04      	cmp	r3, #4
 8001580:	bf28      	it	cs
 8001582:	2304      	movcs	r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3304      	adds	r3, #4
 800158a:	2b06      	cmp	r3, #6
 800158c:	d902      	bls.n	8001594 <NVIC_EncodePriority+0x30>
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3b03      	subs	r3, #3
 8001592:	e000      	b.n	8001596 <NVIC_EncodePriority+0x32>
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	4313      	orrs	r3, r2
         );
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	; 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d8:	d301      	bcc.n	80015de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015da:	2301      	movs	r3, #1
 80015dc:	e00f      	b.n	80015fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <SysTick_Config+0x40>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e6:	210f      	movs	r1, #15
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015ec:	f7ff ff90 	bl	8001510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <SysTick_Config+0x40>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f6:	4b04      	ldr	r3, [pc, #16]	; (8001608 <SysTick_Config+0x40>)
 80015f8:	2207      	movs	r2, #7
 80015fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	e000e010 	.word	0xe000e010

0800160c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff49 	bl	80014ac <__NVIC_SetPriorityGrouping>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001622:	b580      	push	{r7, lr}
 8001624:	b086      	sub	sp, #24
 8001626:	af00      	add	r7, sp, #0
 8001628:	4603      	mov	r3, r0
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001634:	f7ff ff5e 	bl	80014f4 <__NVIC_GetPriorityGrouping>
 8001638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	6978      	ldr	r0, [r7, #20]
 8001640:	f7ff ff90 	bl	8001564 <NVIC_EncodePriority>
 8001644:	4602      	mov	r2, r0
 8001646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff5f 	bl	8001510 <__NVIC_SetPriority>
}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffb0 	bl	80015c8 <SysTick_Config>
 8001668:	4603      	mov	r3, r0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b480      	push	{r7}
 8001676:	b08b      	sub	sp, #44	; 0x2c
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001686:	e169      	b.n	800195c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001688:	2201      	movs	r2, #1
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	f040 8158 	bne.w	8001956 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	4a9a      	ldr	r2, [pc, #616]	; (8001914 <HAL_GPIO_Init+0x2a0>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d05e      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016b0:	4a98      	ldr	r2, [pc, #608]	; (8001914 <HAL_GPIO_Init+0x2a0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d875      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016b6:	4a98      	ldr	r2, [pc, #608]	; (8001918 <HAL_GPIO_Init+0x2a4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d058      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016bc:	4a96      	ldr	r2, [pc, #600]	; (8001918 <HAL_GPIO_Init+0x2a4>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d86f      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016c2:	4a96      	ldr	r2, [pc, #600]	; (800191c <HAL_GPIO_Init+0x2a8>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d052      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016c8:	4a94      	ldr	r2, [pc, #592]	; (800191c <HAL_GPIO_Init+0x2a8>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d869      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016ce:	4a94      	ldr	r2, [pc, #592]	; (8001920 <HAL_GPIO_Init+0x2ac>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d04c      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016d4:	4a92      	ldr	r2, [pc, #584]	; (8001920 <HAL_GPIO_Init+0x2ac>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d863      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016da:	4a92      	ldr	r2, [pc, #584]	; (8001924 <HAL_GPIO_Init+0x2b0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d046      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016e0:	4a90      	ldr	r2, [pc, #576]	; (8001924 <HAL_GPIO_Init+0x2b0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d85d      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016e6:	2b12      	cmp	r3, #18
 80016e8:	d82a      	bhi.n	8001740 <HAL_GPIO_Init+0xcc>
 80016ea:	2b12      	cmp	r3, #18
 80016ec:	d859      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016ee:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <HAL_GPIO_Init+0x80>)
 80016f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f4:	0800176f 	.word	0x0800176f
 80016f8:	08001749 	.word	0x08001749
 80016fc:	0800175b 	.word	0x0800175b
 8001700:	0800179d 	.word	0x0800179d
 8001704:	080017a3 	.word	0x080017a3
 8001708:	080017a3 	.word	0x080017a3
 800170c:	080017a3 	.word	0x080017a3
 8001710:	080017a3 	.word	0x080017a3
 8001714:	080017a3 	.word	0x080017a3
 8001718:	080017a3 	.word	0x080017a3
 800171c:	080017a3 	.word	0x080017a3
 8001720:	080017a3 	.word	0x080017a3
 8001724:	080017a3 	.word	0x080017a3
 8001728:	080017a3 	.word	0x080017a3
 800172c:	080017a3 	.word	0x080017a3
 8001730:	080017a3 	.word	0x080017a3
 8001734:	080017a3 	.word	0x080017a3
 8001738:	08001751 	.word	0x08001751
 800173c:	08001765 	.word	0x08001765
 8001740:	4a79      	ldr	r2, [pc, #484]	; (8001928 <HAL_GPIO_Init+0x2b4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d013      	beq.n	800176e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001746:	e02c      	b.n	80017a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	623b      	str	r3, [r7, #32]
          break;
 800174e:	e029      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	3304      	adds	r3, #4
 8001756:	623b      	str	r3, [r7, #32]
          break;
 8001758:	e024      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	3308      	adds	r3, #8
 8001760:	623b      	str	r3, [r7, #32]
          break;
 8001762:	e01f      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	330c      	adds	r3, #12
 800176a:	623b      	str	r3, [r7, #32]
          break;
 800176c:	e01a      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001776:	2304      	movs	r3, #4
 8001778:	623b      	str	r3, [r7, #32]
          break;
 800177a:	e013      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d105      	bne.n	8001790 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001784:	2308      	movs	r3, #8
 8001786:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	611a      	str	r2, [r3, #16]
          break;
 800178e:	e009      	b.n	80017a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001790:	2308      	movs	r3, #8
 8001792:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	615a      	str	r2, [r3, #20]
          break;
 800179a:	e003      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
          break;
 80017a0:	e000      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          break;
 80017a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2bff      	cmp	r3, #255	; 0xff
 80017a8:	d801      	bhi.n	80017ae <HAL_GPIO_Init+0x13a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	e001      	b.n	80017b2 <HAL_GPIO_Init+0x13e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3304      	adds	r3, #4
 80017b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2bff      	cmp	r3, #255	; 0xff
 80017b8:	d802      	bhi.n	80017c0 <HAL_GPIO_Init+0x14c>
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	e002      	b.n	80017c6 <HAL_GPIO_Init+0x152>
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	3b08      	subs	r3, #8
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	210f      	movs	r1, #15
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	fa01 f303 	lsl.w	r3, r1, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	401a      	ands	r2, r3
 80017d8:	6a39      	ldr	r1, [r7, #32]
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	431a      	orrs	r2, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 80b1 	beq.w	8001956 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017f4:	4b4d      	ldr	r3, [pc, #308]	; (800192c <HAL_GPIO_Init+0x2b8>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a4c      	ldr	r2, [pc, #304]	; (800192c <HAL_GPIO_Init+0x2b8>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b4a      	ldr	r3, [pc, #296]	; (800192c <HAL_GPIO_Init+0x2b8>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800180c:	4a48      	ldr	r2, [pc, #288]	; (8001930 <HAL_GPIO_Init+0x2bc>)
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	3302      	adds	r3, #2
 8001814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001818:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	220f      	movs	r2, #15
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	4013      	ands	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a40      	ldr	r2, [pc, #256]	; (8001934 <HAL_GPIO_Init+0x2c0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d013      	beq.n	8001860 <HAL_GPIO_Init+0x1ec>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a3f      	ldr	r2, [pc, #252]	; (8001938 <HAL_GPIO_Init+0x2c4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d00d      	beq.n	800185c <HAL_GPIO_Init+0x1e8>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a3e      	ldr	r2, [pc, #248]	; (800193c <HAL_GPIO_Init+0x2c8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d007      	beq.n	8001858 <HAL_GPIO_Init+0x1e4>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a3d      	ldr	r2, [pc, #244]	; (8001940 <HAL_GPIO_Init+0x2cc>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d101      	bne.n	8001854 <HAL_GPIO_Init+0x1e0>
 8001850:	2303      	movs	r3, #3
 8001852:	e006      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 8001854:	2304      	movs	r3, #4
 8001856:	e004      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 8001858:	2302      	movs	r3, #2
 800185a:	e002      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 8001860:	2300      	movs	r3, #0
 8001862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001864:	f002 0203 	and.w	r2, r2, #3
 8001868:	0092      	lsls	r2, r2, #2
 800186a:	4093      	lsls	r3, r2
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001872:	492f      	ldr	r1, [pc, #188]	; (8001930 <HAL_GPIO_Init+0x2bc>)
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d006      	beq.n	800189a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	492c      	ldr	r1, [pc, #176]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
 8001898:	e006      	b.n	80018a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800189a:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	4928      	ldr	r1, [pc, #160]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018b4:	4b23      	ldr	r3, [pc, #140]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	4922      	ldr	r1, [pc, #136]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
 80018c0:	e006      	b.n	80018d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	491e      	ldr	r1, [pc, #120]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d006      	beq.n	80018ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	4918      	ldr	r1, [pc, #96]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	608b      	str	r3, [r1, #8]
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018ea:	4b16      	ldr	r3, [pc, #88]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	4914      	ldr	r1, [pc, #80]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d021      	beq.n	8001948 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	490e      	ldr	r1, [pc, #56]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	60cb      	str	r3, [r1, #12]
 8001910:	e021      	b.n	8001956 <HAL_GPIO_Init+0x2e2>
 8001912:	bf00      	nop
 8001914:	10320000 	.word	0x10320000
 8001918:	10310000 	.word	0x10310000
 800191c:	10220000 	.word	0x10220000
 8001920:	10210000 	.word	0x10210000
 8001924:	10120000 	.word	0x10120000
 8001928:	10110000 	.word	0x10110000
 800192c:	40021000 	.word	0x40021000
 8001930:	40010000 	.word	0x40010000
 8001934:	40010800 	.word	0x40010800
 8001938:	40010c00 	.word	0x40010c00
 800193c:	40011000 	.word	0x40011000
 8001940:	40011400 	.word	0x40011400
 8001944:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_GPIO_Init+0x304>)
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	43db      	mvns	r3, r3
 8001950:	4909      	ldr	r1, [pc, #36]	; (8001978 <HAL_GPIO_Init+0x304>)
 8001952:	4013      	ands	r3, r2
 8001954:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	3301      	adds	r3, #1
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	fa22 f303 	lsr.w	r3, r2, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	f47f ae8e 	bne.w	8001688 <HAL_GPIO_Init+0x14>
  }
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	372c      	adds	r7, #44	; 0x2c
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	40010400 	.word	0x40010400

0800197c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e12b      	b.n	8001be6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d106      	bne.n	80019a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff fc1a 	bl	80011dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2224      	movs	r2, #36	; 0x24
 80019ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0201 	bic.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019e0:	f001 fb7a 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 80019e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4a81      	ldr	r2, [pc, #516]	; (8001bf0 <HAL_I2C_Init+0x274>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d807      	bhi.n	8001a00 <HAL_I2C_Init+0x84>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4a80      	ldr	r2, [pc, #512]	; (8001bf4 <HAL_I2C_Init+0x278>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	bf94      	ite	ls
 80019f8:	2301      	movls	r3, #1
 80019fa:	2300      	movhi	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	e006      	b.n	8001a0e <HAL_I2C_Init+0x92>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4a7d      	ldr	r2, [pc, #500]	; (8001bf8 <HAL_I2C_Init+0x27c>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	bf94      	ite	ls
 8001a08:	2301      	movls	r3, #1
 8001a0a:	2300      	movhi	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0e7      	b.n	8001be6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4a78      	ldr	r2, [pc, #480]	; (8001bfc <HAL_I2C_Init+0x280>)
 8001a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1e:	0c9b      	lsrs	r3, r3, #18
 8001a20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68ba      	ldr	r2, [r7, #8]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	4a6a      	ldr	r2, [pc, #424]	; (8001bf0 <HAL_I2C_Init+0x274>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d802      	bhi.n	8001a50 <HAL_I2C_Init+0xd4>
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	e009      	b.n	8001a64 <HAL_I2C_Init+0xe8>
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	4a69      	ldr	r2, [pc, #420]	; (8001c00 <HAL_I2C_Init+0x284>)
 8001a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a60:	099b      	lsrs	r3, r3, #6
 8001a62:	3301      	adds	r3, #1
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	495c      	ldr	r1, [pc, #368]	; (8001bf0 <HAL_I2C_Init+0x274>)
 8001a80:	428b      	cmp	r3, r1
 8001a82:	d819      	bhi.n	8001ab8 <HAL_I2C_Init+0x13c>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1e59      	subs	r1, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a92:	1c59      	adds	r1, r3, #1
 8001a94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a98:	400b      	ands	r3, r1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00a      	beq.n	8001ab4 <HAL_I2C_Init+0x138>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1e59      	subs	r1, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aac:	3301      	adds	r3, #1
 8001aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab2:	e051      	b.n	8001b58 <HAL_I2C_Init+0x1dc>
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	e04f      	b.n	8001b58 <HAL_I2C_Init+0x1dc>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d111      	bne.n	8001ae4 <HAL_I2C_Init+0x168>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1e58      	subs	r0, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6859      	ldr	r1, [r3, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	440b      	add	r3, r1
 8001ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	e012      	b.n	8001b0a <HAL_I2C_Init+0x18e>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	1e58      	subs	r0, r3, #1
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6859      	ldr	r1, [r3, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	0099      	lsls	r1, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001afa:	3301      	adds	r3, #1
 8001afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf0c      	ite	eq
 8001b04:	2301      	moveq	r3, #1
 8001b06:	2300      	movne	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_I2C_Init+0x196>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e022      	b.n	8001b58 <HAL_I2C_Init+0x1dc>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10e      	bne.n	8001b38 <HAL_I2C_Init+0x1bc>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1e58      	subs	r0, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6859      	ldr	r1, [r3, #4]
 8001b22:	460b      	mov	r3, r1
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	440b      	add	r3, r1
 8001b28:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b36:	e00f      	b.n	8001b58 <HAL_I2C_Init+0x1dc>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1e58      	subs	r0, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6859      	ldr	r1, [r3, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	0099      	lsls	r1, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b4e:	3301      	adds	r3, #1
 8001b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	6809      	ldr	r1, [r1, #0]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69da      	ldr	r2, [r3, #28]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6911      	ldr	r1, [r2, #16]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68d2      	ldr	r2, [r2, #12]
 8001b92:	4311      	orrs	r1, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	000186a0 	.word	0x000186a0
 8001bf4:	001e847f 	.word	0x001e847f
 8001bf8:	003d08ff 	.word	0x003d08ff
 8001bfc:	431bde83 	.word	0x431bde83
 8001c00:	10624dd3 	.word	0x10624dd3

08001c04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	460b      	mov	r3, r1
 8001c12:	817b      	strh	r3, [r7, #10]
 8001c14:	4613      	mov	r3, r2
 8001c16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c18:	f7ff fc1a 	bl	8001450 <HAL_GetTick>
 8001c1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b20      	cmp	r3, #32
 8001c28:	f040 80e0 	bne.w	8001dec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	2319      	movs	r3, #25
 8001c32:	2201      	movs	r2, #1
 8001c34:	4970      	ldr	r1, [pc, #448]	; (8001df8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 fc92 	bl	8002560 <I2C_WaitOnFlagUntilTimeout>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c42:	2302      	movs	r3, #2
 8001c44:	e0d3      	b.n	8001dee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_I2C_Master_Transmit+0x50>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e0cc      	b.n	8001dee <HAL_I2C_Master_Transmit+0x1ea>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d007      	beq.n	8001c7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 0201 	orr.w	r2, r2, #1
 8001c78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2221      	movs	r2, #33	; 0x21
 8001c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2210      	movs	r2, #16
 8001c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	893a      	ldrh	r2, [r7, #8]
 8001caa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4a50      	ldr	r2, [pc, #320]	; (8001dfc <HAL_I2C_Master_Transmit+0x1f8>)
 8001cba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001cbc:	8979      	ldrh	r1, [r7, #10]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	6a3a      	ldr	r2, [r7, #32]
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 fafc 	bl	80022c0 <I2C_MasterRequestWrite>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e08d      	b.n	8001dee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ce8:	e066      	b.n	8001db8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	6a39      	ldr	r1, [r7, #32]
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 fd0c 	bl	800270c <I2C_WaitOnTXEFlagUntilTimeout>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00d      	beq.n	8001d16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d107      	bne.n	8001d12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e06b      	b.n	8001dee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	781a      	ldrb	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d11b      	bne.n	8001d8c <HAL_I2C_Master_Transmit+0x188>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d017      	beq.n	8001d8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	781a      	ldrb	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	6a39      	ldr	r1, [r7, #32]
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 fcfc 	bl	800278e <I2C_WaitOnBTFFlagUntilTimeout>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00d      	beq.n	8001db8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d107      	bne.n	8001db4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e01a      	b.n	8001dee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d194      	bne.n	8001cea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	e000      	b.n	8001dee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001dec:	2302      	movs	r3, #2
  }
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	00100002 	.word	0x00100002
 8001dfc:	ffff0000 	.word	0xffff0000

08001e00 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	; 0x30
 8001e04:	af02      	add	r7, sp, #8
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	817b      	strh	r3, [r7, #10]
 8001e10:	4613      	mov	r3, r2
 8001e12:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e18:	f7ff fb1a 	bl	8001450 <HAL_GetTick>
 8001e1c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b20      	cmp	r3, #32
 8001e28:	f040 823f 	bne.w	80022aa <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	2319      	movs	r3, #25
 8001e32:	2201      	movs	r2, #1
 8001e34:	497f      	ldr	r1, [pc, #508]	; (8002034 <HAL_I2C_Master_Receive+0x234>)
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 fb92 	bl	8002560 <I2C_WaitOnFlagUntilTimeout>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001e42:	2302      	movs	r3, #2
 8001e44:	e232      	b.n	80022ac <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_I2C_Master_Receive+0x54>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e22b      	b.n	80022ac <HAL_I2C_Master_Receive+0x4ac>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d007      	beq.n	8001e7a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0201 	orr.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2222      	movs	r2, #34	; 0x22
 8001e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2210      	movs	r2, #16
 8001e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	893a      	ldrh	r2, [r7, #8]
 8001eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4a5f      	ldr	r2, [pc, #380]	; (8002038 <HAL_I2C_Master_Receive+0x238>)
 8001eba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ebc:	8979      	ldrh	r1, [r7, #10]
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 fa7e 	bl	80023c4 <I2C_MasterRequestRead>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e1ec      	b.n	80022ac <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d113      	bne.n	8001f02 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	e1c0      	b.n	8002284 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d11e      	bne.n	8001f48 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f1a:	b672      	cpsid	i
}
 8001f1c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	61bb      	str	r3, [r7, #24]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	61bb      	str	r3, [r7, #24]
 8001f32:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f44:	b662      	cpsie	i
}
 8001f46:	e035      	b.n	8001fb4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d11e      	bne.n	8001f8e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f60:	b672      	cpsid	i
}
 8001f62:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f8a:	b662      	cpsie	i
}
 8001f8c:	e012      	b.n	8001fb4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001fb4:	e166      	b.n	8002284 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	f200 811f 	bhi.w	80021fe <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d123      	bne.n	8002010 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 fc1f 	bl	8002810 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e167      	b.n	80022ac <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691a      	ldr	r2, [r3, #16]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800200e:	e139      	b.n	8002284 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002014:	2b02      	cmp	r3, #2
 8002016:	d152      	bne.n	80020be <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201e:	2200      	movs	r2, #0
 8002020:	4906      	ldr	r1, [pc, #24]	; (800203c <HAL_I2C_Master_Receive+0x23c>)
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 fa9c 	bl	8002560 <I2C_WaitOnFlagUntilTimeout>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e13c      	b.n	80022ac <HAL_I2C_Master_Receive+0x4ac>
 8002032:	bf00      	nop
 8002034:	00100002 	.word	0x00100002
 8002038:	ffff0000 	.word	0xffff0000
 800203c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002040:	b672      	cpsid	i
}
 8002042:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002052:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691a      	ldr	r2, [r3, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207c:	b29b      	uxth	r3, r3
 800207e:	3b01      	subs	r3, #1
 8002080:	b29a      	uxth	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002086:	b662      	cpsie	i
}
 8002088:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020bc:	e0e2      	b.n	8002284 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c4:	2200      	movs	r2, #0
 80020c6:	497b      	ldr	r1, [pc, #492]	; (80022b4 <HAL_I2C_Master_Receive+0x4b4>)
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 fa49 	bl	8002560 <I2C_WaitOnFlagUntilTimeout>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0e9      	b.n	80022ac <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020e8:	b672      	cpsid	i
}
 80020ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002114:	b29b      	uxth	r3, r3
 8002116:	3b01      	subs	r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800211e:	4b66      	ldr	r3, [pc, #408]	; (80022b8 <HAL_I2C_Master_Receive+0x4b8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	08db      	lsrs	r3, r3, #3
 8002124:	4a65      	ldr	r2, [pc, #404]	; (80022bc <HAL_I2C_Master_Receive+0x4bc>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	0a1a      	lsrs	r2, r3, #8
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00da      	lsls	r2, r3, #3
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	3b01      	subs	r3, #1
 800213c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d118      	bne.n	8002176 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2220      	movs	r2, #32
 800214e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f043 0220 	orr.w	r2, r3, #32
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002166:	b662      	cpsie	i
}
 8002168:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e09a      	b.n	80022ac <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b04      	cmp	r3, #4
 8002182:	d1d9      	bne.n	8002138 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002192:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691a      	ldr	r2, [r3, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021bc:	b29b      	uxth	r3, r3
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80021c6:	b662      	cpsie	i
}
 80021c8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021fc:	e042      	b.n	8002284 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002200:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fb04 	bl	8002810 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e04c      	b.n	80022ac <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223a:	b29b      	uxth	r3, r3
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b04      	cmp	r3, #4
 8002250:	d118      	bne.n	8002284 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	691a      	ldr	r2, [r3, #16]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002288:	2b00      	cmp	r3, #0
 800228a:	f47f ae94 	bne.w	8001fb6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2220      	movs	r2, #32
 8002292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	e000      	b.n	80022ac <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80022aa:	2302      	movs	r3, #2
  }
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3728      	adds	r7, #40	; 0x28
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	00010004 	.word	0x00010004
 80022b8:	20000004 	.word	0x20000004
 80022bc:	14f8b589 	.word	0x14f8b589

080022c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af02      	add	r7, sp, #8
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	460b      	mov	r3, r1
 80022ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d006      	beq.n	80022ea <I2C_MasterRequestWrite+0x2a>
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d003      	beq.n	80022ea <I2C_MasterRequestWrite+0x2a>
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022e8:	d108      	bne.n	80022fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	e00b      	b.n	8002314 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	2b12      	cmp	r3, #18
 8002302:	d107      	bne.n	8002314 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002312:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 f91d 	bl	8002560 <I2C_WaitOnFlagUntilTimeout>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00d      	beq.n	8002348 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800233a:	d103      	bne.n	8002344 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002342:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e035      	b.n	80023b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002350:	d108      	bne.n	8002364 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002352:	897b      	ldrh	r3, [r7, #10]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	461a      	mov	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002360:	611a      	str	r2, [r3, #16]
 8002362:	e01b      	b.n	800239c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002364:	897b      	ldrh	r3, [r7, #10]
 8002366:	11db      	asrs	r3, r3, #7
 8002368:	b2db      	uxtb	r3, r3
 800236a:	f003 0306 	and.w	r3, r3, #6
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f063 030f 	orn	r3, r3, #15
 8002374:	b2da      	uxtb	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	490e      	ldr	r1, [pc, #56]	; (80023bc <I2C_MasterRequestWrite+0xfc>)
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f943 	bl	800260e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e010      	b.n	80023b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002392:	897b      	ldrh	r3, [r7, #10]
 8002394:	b2da      	uxtb	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	4907      	ldr	r1, [pc, #28]	; (80023c0 <I2C_MasterRequestWrite+0x100>)
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f933 	bl	800260e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	00010008 	.word	0x00010008
 80023c0:	00010002 	.word	0x00010002

080023c4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	460b      	mov	r3, r1
 80023d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023e8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d006      	beq.n	80023fe <I2C_MasterRequestRead+0x3a>
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d003      	beq.n	80023fe <I2C_MasterRequestRead+0x3a>
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023fc:	d108      	bne.n	8002410 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	e00b      	b.n	8002428 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	2b11      	cmp	r3, #17
 8002416:	d107      	bne.n	8002428 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002426:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f893 	bl	8002560 <I2C_WaitOnFlagUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00d      	beq.n	800245c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800244e:	d103      	bne.n	8002458 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002456:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e079      	b.n	8002550 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002464:	d108      	bne.n	8002478 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002466:	897b      	ldrh	r3, [r7, #10]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	b2da      	uxtb	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	611a      	str	r2, [r3, #16]
 8002476:	e05f      	b.n	8002538 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002478:	897b      	ldrh	r3, [r7, #10]
 800247a:	11db      	asrs	r3, r3, #7
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f003 0306 	and.w	r3, r3, #6
 8002482:	b2db      	uxtb	r3, r3
 8002484:	f063 030f 	orn	r3, r3, #15
 8002488:	b2da      	uxtb	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	4930      	ldr	r1, [pc, #192]	; (8002558 <I2C_MasterRequestRead+0x194>)
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 f8b9 	bl	800260e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e054      	b.n	8002550 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024a6:	897b      	ldrh	r3, [r7, #10]
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	4929      	ldr	r1, [pc, #164]	; (800255c <I2C_MasterRequestRead+0x198>)
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f8a9 	bl	800260e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e044      	b.n	8002550 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 f831 	bl	8002560 <I2C_WaitOnFlagUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00d      	beq.n	8002520 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002512:	d103      	bne.n	800251c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800251a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e017      	b.n	8002550 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002520:	897b      	ldrh	r3, [r7, #10]
 8002522:	11db      	asrs	r3, r3, #7
 8002524:	b2db      	uxtb	r3, r3
 8002526:	f003 0306 	and.w	r3, r3, #6
 800252a:	b2db      	uxtb	r3, r3
 800252c:	f063 030e 	orn	r3, r3, #14
 8002530:	b2da      	uxtb	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	4907      	ldr	r1, [pc, #28]	; (800255c <I2C_MasterRequestRead+0x198>)
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 f865 	bl	800260e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	00010008 	.word	0x00010008
 800255c:	00010002 	.word	0x00010002

08002560 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	4613      	mov	r3, r2
 800256e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002570:	e025      	b.n	80025be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002578:	d021      	beq.n	80025be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800257a:	f7fe ff69 	bl	8001450 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d302      	bcc.n	8002590 <I2C_WaitOnFlagUntilTimeout+0x30>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d116      	bne.n	80025be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f043 0220 	orr.w	r2, r3, #32
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e023      	b.n	8002606 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	0c1b      	lsrs	r3, r3, #16
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d10d      	bne.n	80025e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	43da      	mvns	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4013      	ands	r3, r2
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	bf0c      	ite	eq
 80025da:	2301      	moveq	r3, #1
 80025dc:	2300      	movne	r3, #0
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	e00c      	b.n	80025fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	43da      	mvns	r2, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	4013      	ands	r3, r2
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	bf0c      	ite	eq
 80025f6:	2301      	moveq	r3, #1
 80025f8:	2300      	movne	r3, #0
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	429a      	cmp	r2, r3
 8002602:	d0b6      	beq.n	8002572 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800261c:	e051      	b.n	80026c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800262c:	d123      	bne.n	8002676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002646:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f043 0204 	orr.w	r2, r3, #4
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e046      	b.n	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800267c:	d021      	beq.n	80026c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800267e:	f7fe fee7 	bl	8001450 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	429a      	cmp	r2, r3
 800268c:	d302      	bcc.n	8002694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d116      	bne.n	80026c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2220      	movs	r2, #32
 800269e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f043 0220 	orr.w	r2, r3, #32
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e020      	b.n	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	0c1b      	lsrs	r3, r3, #16
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d10c      	bne.n	80026e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	43da      	mvns	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4013      	ands	r3, r2
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	bf14      	ite	ne
 80026de:	2301      	movne	r3, #1
 80026e0:	2300      	moveq	r3, #0
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	e00b      	b.n	80026fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	43da      	mvns	r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	4013      	ands	r3, r2
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	bf14      	ite	ne
 80026f8:	2301      	movne	r3, #1
 80026fa:	2300      	moveq	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d18d      	bne.n	800261e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002718:	e02d      	b.n	8002776 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f8ce 	bl	80028bc <I2C_IsAcknowledgeFailed>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e02d      	b.n	8002786 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002730:	d021      	beq.n	8002776 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002732:	f7fe fe8d 	bl	8001450 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	429a      	cmp	r2, r3
 8002740:	d302      	bcc.n	8002748 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d116      	bne.n	8002776 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2220      	movs	r2, #32
 8002752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f043 0220 	orr.w	r2, r3, #32
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e007      	b.n	8002786 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002780:	2b80      	cmp	r3, #128	; 0x80
 8002782:	d1ca      	bne.n	800271a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b084      	sub	sp, #16
 8002792:	af00      	add	r7, sp, #0
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800279a:	e02d      	b.n	80027f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 f88d 	bl	80028bc <I2C_IsAcknowledgeFailed>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e02d      	b.n	8002808 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027b2:	d021      	beq.n	80027f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b4:	f7fe fe4c 	bl	8001450 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d302      	bcc.n	80027ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d116      	bne.n	80027f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e007      	b.n	8002808 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b04      	cmp	r3, #4
 8002804:	d1ca      	bne.n	800279c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800281c:	e042      	b.n	80028a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b10      	cmp	r3, #16
 800282a:	d119      	bne.n	8002860 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0210 	mvn.w	r2, #16
 8002834:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e029      	b.n	80028b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002860:	f7fe fdf6 	bl	8001450 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	429a      	cmp	r2, r3
 800286e:	d302      	bcc.n	8002876 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d116      	bne.n	80028a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	f043 0220 	orr.w	r2, r3, #32
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e007      	b.n	80028b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ae:	2b40      	cmp	r3, #64	; 0x40
 80028b0:	d1b5      	bne.n	800281e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d2:	d11b      	bne.n	800290c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	f043 0204 	orr.w	r2, r3, #4
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e26c      	b.n	8002e04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 8087 	beq.w	8002a46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002938:	4b92      	ldr	r3, [pc, #584]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 030c 	and.w	r3, r3, #12
 8002940:	2b04      	cmp	r3, #4
 8002942:	d00c      	beq.n	800295e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002944:	4b8f      	ldr	r3, [pc, #572]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 030c 	and.w	r3, r3, #12
 800294c:	2b08      	cmp	r3, #8
 800294e:	d112      	bne.n	8002976 <HAL_RCC_OscConfig+0x5e>
 8002950:	4b8c      	ldr	r3, [pc, #560]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800295c:	d10b      	bne.n	8002976 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295e:	4b89      	ldr	r3, [pc, #548]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d06c      	beq.n	8002a44 <HAL_RCC_OscConfig+0x12c>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d168      	bne.n	8002a44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e246      	b.n	8002e04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800297e:	d106      	bne.n	800298e <HAL_RCC_OscConfig+0x76>
 8002980:	4b80      	ldr	r3, [pc, #512]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a7f      	ldr	r2, [pc, #508]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	e02e      	b.n	80029ec <HAL_RCC_OscConfig+0xd4>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x98>
 8002996:	4b7b      	ldr	r3, [pc, #492]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a7a      	ldr	r2, [pc, #488]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 800299c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	4b78      	ldr	r3, [pc, #480]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a77      	ldr	r2, [pc, #476]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 80029a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	e01d      	b.n	80029ec <HAL_RCC_OscConfig+0xd4>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCC_OscConfig+0xbc>
 80029ba:	4b72      	ldr	r3, [pc, #456]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a71      	ldr	r2, [pc, #452]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 80029c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	4b6f      	ldr	r3, [pc, #444]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a6e      	ldr	r2, [pc, #440]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	e00b      	b.n	80029ec <HAL_RCC_OscConfig+0xd4>
 80029d4:	4b6b      	ldr	r3, [pc, #428]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a6a      	ldr	r2, [pc, #424]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 80029da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	4b68      	ldr	r3, [pc, #416]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a67      	ldr	r2, [pc, #412]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 80029e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d013      	beq.n	8002a1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fe fd2c 	bl	8001450 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029fc:	f7fe fd28 	bl	8001450 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	; 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e1fa      	b.n	8002e04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	4b5d      	ldr	r3, [pc, #372]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0xe4>
 8002a1a:	e014      	b.n	8002a46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fd18 	bl	8001450 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a24:	f7fe fd14 	bl	8001450 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b64      	cmp	r3, #100	; 0x64
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e1e6      	b.n	8002e04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a36:	4b53      	ldr	r3, [pc, #332]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x10c>
 8002a42:	e000      	b.n	8002a46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d063      	beq.n	8002b1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a52:	4b4c      	ldr	r3, [pc, #304]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00b      	beq.n	8002a76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a5e:	4b49      	ldr	r3, [pc, #292]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d11c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x18c>
 8002a6a:	4b46      	ldr	r3, [pc, #280]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d116      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a76:	4b43      	ldr	r3, [pc, #268]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d005      	beq.n	8002a8e <HAL_RCC_OscConfig+0x176>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d001      	beq.n	8002a8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e1ba      	b.n	8002e04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8e:	4b3d      	ldr	r3, [pc, #244]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4939      	ldr	r1, [pc, #228]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa2:	e03a      	b.n	8002b1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d020      	beq.n	8002aee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aac:	4b36      	ldr	r3, [pc, #216]	; (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab2:	f7fe fccd 	bl	8001450 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aba:	f7fe fcc9 	bl	8001450 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e19b      	b.n	8002e04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002acc:	4b2d      	ldr	r3, [pc, #180]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0f0      	beq.n	8002aba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad8:	4b2a      	ldr	r3, [pc, #168]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4927      	ldr	r1, [pc, #156]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	600b      	str	r3, [r1, #0]
 8002aec:	e015      	b.n	8002b1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aee:	4b26      	ldr	r3, [pc, #152]	; (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af4:	f7fe fcac 	bl	8001450 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002afc:	f7fe fca8 	bl	8001450 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e17a      	b.n	8002e04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0e:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d03a      	beq.n	8002b9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d019      	beq.n	8002b62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b2e:	4b17      	ldr	r3, [pc, #92]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b34:	f7fe fc8c 	bl	8001450 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b3c:	f7fe fc88 	bl	8001450 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e15a      	b.n	8002e04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b5a:	2001      	movs	r0, #1
 8002b5c:	f000 faf8 	bl	8003150 <RCC_Delay>
 8002b60:	e01c      	b.n	8002b9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b62:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b68:	f7fe fc72 	bl	8001450 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b6e:	e00f      	b.n	8002b90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b70:	f7fe fc6e 	bl	8001450 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d908      	bls.n	8002b90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e140      	b.n	8002e04 <HAL_RCC_OscConfig+0x4ec>
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000
 8002b88:	42420000 	.word	0x42420000
 8002b8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b90:	4b9e      	ldr	r3, [pc, #632]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1e9      	bne.n	8002b70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80a6 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002baa:	2300      	movs	r3, #0
 8002bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bae:	4b97      	ldr	r3, [pc, #604]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10d      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bba:	4b94      	ldr	r3, [pc, #592]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	4a93      	ldr	r2, [pc, #588]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	61d3      	str	r3, [r2, #28]
 8002bc6:	4b91      	ldr	r3, [pc, #580]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd6:	4b8e      	ldr	r3, [pc, #568]	; (8002e10 <HAL_RCC_OscConfig+0x4f8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d118      	bne.n	8002c14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002be2:	4b8b      	ldr	r3, [pc, #556]	; (8002e10 <HAL_RCC_OscConfig+0x4f8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a8a      	ldr	r2, [pc, #552]	; (8002e10 <HAL_RCC_OscConfig+0x4f8>)
 8002be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bee:	f7fe fc2f 	bl	8001450 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf6:	f7fe fc2b 	bl	8001450 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b64      	cmp	r3, #100	; 0x64
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e0fd      	b.n	8002e04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c08:	4b81      	ldr	r3, [pc, #516]	; (8002e10 <HAL_RCC_OscConfig+0x4f8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0f0      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d106      	bne.n	8002c2a <HAL_RCC_OscConfig+0x312>
 8002c1c:	4b7b      	ldr	r3, [pc, #492]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	4a7a      	ldr	r2, [pc, #488]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6213      	str	r3, [r2, #32]
 8002c28:	e02d      	b.n	8002c86 <HAL_RCC_OscConfig+0x36e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x334>
 8002c32:	4b76      	ldr	r3, [pc, #472]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	4a75      	ldr	r2, [pc, #468]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002c38:	f023 0301 	bic.w	r3, r3, #1
 8002c3c:	6213      	str	r3, [r2, #32]
 8002c3e:	4b73      	ldr	r3, [pc, #460]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	4a72      	ldr	r2, [pc, #456]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002c44:	f023 0304 	bic.w	r3, r3, #4
 8002c48:	6213      	str	r3, [r2, #32]
 8002c4a:	e01c      	b.n	8002c86 <HAL_RCC_OscConfig+0x36e>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	2b05      	cmp	r3, #5
 8002c52:	d10c      	bne.n	8002c6e <HAL_RCC_OscConfig+0x356>
 8002c54:	4b6d      	ldr	r3, [pc, #436]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	4a6c      	ldr	r2, [pc, #432]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002c5a:	f043 0304 	orr.w	r3, r3, #4
 8002c5e:	6213      	str	r3, [r2, #32]
 8002c60:	4b6a      	ldr	r3, [pc, #424]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	4a69      	ldr	r2, [pc, #420]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	6213      	str	r3, [r2, #32]
 8002c6c:	e00b      	b.n	8002c86 <HAL_RCC_OscConfig+0x36e>
 8002c6e:	4b67      	ldr	r3, [pc, #412]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	4a66      	ldr	r2, [pc, #408]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	6213      	str	r3, [r2, #32]
 8002c7a:	4b64      	ldr	r3, [pc, #400]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	4a63      	ldr	r2, [pc, #396]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002c80:	f023 0304 	bic.w	r3, r3, #4
 8002c84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d015      	beq.n	8002cba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8e:	f7fe fbdf 	bl	8001450 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c94:	e00a      	b.n	8002cac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c96:	f7fe fbdb 	bl	8001450 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e0ab      	b.n	8002e04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cac:	4b57      	ldr	r3, [pc, #348]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0ee      	beq.n	8002c96 <HAL_RCC_OscConfig+0x37e>
 8002cb8:	e014      	b.n	8002ce4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cba:	f7fe fbc9 	bl	8001450 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc2:	f7fe fbc5 	bl	8001450 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e095      	b.n	8002e04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd8:	4b4c      	ldr	r3, [pc, #304]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1ee      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d105      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cea:	4b48      	ldr	r3, [pc, #288]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	4a47      	ldr	r2, [pc, #284]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 8081 	beq.w	8002e02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d00:	4b42      	ldr	r3, [pc, #264]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d061      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d146      	bne.n	8002da2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d14:	4b3f      	ldr	r3, [pc, #252]	; (8002e14 <HAL_RCC_OscConfig+0x4fc>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1a:	f7fe fb99 	bl	8001450 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d22:	f7fe fb95 	bl	8001450 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e067      	b.n	8002e04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d34:	4b35      	ldr	r3, [pc, #212]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1f0      	bne.n	8002d22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d48:	d108      	bne.n	8002d5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d4a:	4b30      	ldr	r3, [pc, #192]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	492d      	ldr	r1, [pc, #180]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d5c:	4b2b      	ldr	r3, [pc, #172]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a19      	ldr	r1, [r3, #32]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	430b      	orrs	r3, r1
 8002d6e:	4927      	ldr	r1, [pc, #156]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d74:	4b27      	ldr	r3, [pc, #156]	; (8002e14 <HAL_RCC_OscConfig+0x4fc>)
 8002d76:	2201      	movs	r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7a:	f7fe fb69 	bl	8001450 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d82:	f7fe fb65 	bl	8001450 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e037      	b.n	8002e04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d94:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f0      	beq.n	8002d82 <HAL_RCC_OscConfig+0x46a>
 8002da0:	e02f      	b.n	8002e02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da2:	4b1c      	ldr	r3, [pc, #112]	; (8002e14 <HAL_RCC_OscConfig+0x4fc>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fe fb52 	bl	8001450 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fe fb4e 	bl	8001450 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e020      	b.n	8002e04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc2:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x498>
 8002dce:	e018      	b.n	8002e02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e013      	b.n	8002e04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_RCC_OscConfig+0x4f4>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d106      	bne.n	8002dfe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d001      	beq.n	8002e02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40007000 	.word	0x40007000
 8002e14:	42420060 	.word	0x42420060

08002e18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0d0      	b.n	8002fce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b6a      	ldr	r3, [pc, #424]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d910      	bls.n	8002e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b67      	ldr	r3, [pc, #412]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 0207 	bic.w	r2, r3, #7
 8002e42:	4965      	ldr	r1, [pc, #404]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	4b63      	ldr	r3, [pc, #396]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0b8      	b.n	8002fce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d020      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d005      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e74:	4b59      	ldr	r3, [pc, #356]	; (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	4a58      	ldr	r2, [pc, #352]	; (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002e7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e8c:	4b53      	ldr	r3, [pc, #332]	; (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4a52      	ldr	r2, [pc, #328]	; (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e98:	4b50      	ldr	r3, [pc, #320]	; (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	494d      	ldr	r1, [pc, #308]	; (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d040      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d107      	bne.n	8002ece <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ebe:	4b47      	ldr	r3, [pc, #284]	; (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d115      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e07f      	b.n	8002fce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed6:	4b41      	ldr	r3, [pc, #260]	; (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e073      	b.n	8002fce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee6:	4b3d      	ldr	r3, [pc, #244]	; (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e06b      	b.n	8002fce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ef6:	4b39      	ldr	r3, [pc, #228]	; (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f023 0203 	bic.w	r2, r3, #3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	4936      	ldr	r1, [pc, #216]	; (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f08:	f7fe faa2 	bl	8001450 <HAL_GetTick>
 8002f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0e:	e00a      	b.n	8002f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f10:	f7fe fa9e 	bl	8001450 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e053      	b.n	8002fce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	4b2d      	ldr	r3, [pc, #180]	; (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 020c 	and.w	r2, r3, #12
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d1eb      	bne.n	8002f10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f38:	4b27      	ldr	r3, [pc, #156]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d210      	bcs.n	8002f68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b24      	ldr	r3, [pc, #144]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 0207 	bic.w	r2, r3, #7
 8002f4e:	4922      	ldr	r1, [pc, #136]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f56:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e032      	b.n	8002fce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f74:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	4916      	ldr	r1, [pc, #88]	; (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d009      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f92:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	490e      	ldr	r1, [pc, #56]	; (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fa6:	f000 f82d 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8002faa:	4602      	mov	r2, r0
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	490a      	ldr	r1, [pc, #40]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb8:	5ccb      	ldrb	r3, [r1, r3]
 8002fba:	fa22 f303 	lsr.w	r3, r2, r3
 8002fbe:	4a09      	ldr	r2, [pc, #36]	; (8002fe4 <HAL_RCC_ClockConfig+0x1cc>)
 8002fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fc2:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <HAL_RCC_ClockConfig+0x1d0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe fa00 	bl	80013cc <HAL_InitTick>

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40022000 	.word	0x40022000
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	080033d0 	.word	0x080033d0
 8002fe4:	20000004 	.word	0x20000004
 8002fe8:	20000008 	.word	0x20000008

08002fec <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002ff0:	4b03      	ldr	r3, [pc, #12]	; (8003000 <HAL_RCC_EnableCSS+0x14>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]
}
 8002ff6:	bf00      	nop
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	4242004c 	.word	0x4242004c

08003004 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003004:	b490      	push	{r4, r7}
 8003006:	b08a      	sub	sp, #40	; 0x28
 8003008:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800300a:	4b2a      	ldr	r3, [pc, #168]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800300c:	1d3c      	adds	r4, r7, #4
 800300e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003010:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003014:	f240 2301 	movw	r3, #513	; 0x201
 8003018:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	2300      	movs	r3, #0
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800302e:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f003 030c 	and.w	r3, r3, #12
 800303a:	2b04      	cmp	r3, #4
 800303c:	d002      	beq.n	8003044 <HAL_RCC_GetSysClockFreq+0x40>
 800303e:	2b08      	cmp	r3, #8
 8003040:	d003      	beq.n	800304a <HAL_RCC_GetSysClockFreq+0x46>
 8003042:	e02d      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003044:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003046:	623b      	str	r3, [r7, #32]
      break;
 8003048:	e02d      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	0c9b      	lsrs	r3, r3, #18
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003056:	4413      	add	r3, r2
 8003058:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800305c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d013      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003068:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	0c5b      	lsrs	r3, r3, #17
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003076:	4413      	add	r3, r2
 8003078:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800307c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	4a0e      	ldr	r2, [pc, #56]	; (80030bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003082:	fb02 f203 	mul.w	r2, r2, r3
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	fbb2 f3f3 	udiv	r3, r2, r3
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
 800308e:	e004      	b.n	800309a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	4a0b      	ldr	r2, [pc, #44]	; (80030c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003094:	fb02 f303 	mul.w	r3, r2, r3
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	623b      	str	r3, [r7, #32]
      break;
 800309e:	e002      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_RCC_GetSysClockFreq+0xb8>)
 80030a2:	623b      	str	r3, [r7, #32]
      break;
 80030a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a6:	6a3b      	ldr	r3, [r7, #32]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3728      	adds	r7, #40	; 0x28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc90      	pop	{r4, r7}
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	080033c0 	.word	0x080033c0
 80030b8:	40021000 	.word	0x40021000
 80030bc:	007a1200 	.word	0x007a1200
 80030c0:	003d0900 	.word	0x003d0900

080030c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c8:	4b02      	ldr	r3, [pc, #8]	; (80030d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr
 80030d4:	20000004 	.word	0x20000004

080030d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030dc:	f7ff fff2 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 80030e0:	4602      	mov	r2, r0
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	0a1b      	lsrs	r3, r3, #8
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	4903      	ldr	r1, [pc, #12]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ee:	5ccb      	ldrb	r3, [r1, r3]
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40021000 	.word	0x40021000
 80030fc:	080033e0 	.word	0x080033e0

08003100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003104:	f7ff ffde 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 8003108:	4602      	mov	r2, r0
 800310a:	4b05      	ldr	r3, [pc, #20]	; (8003120 <HAL_RCC_GetPCLK2Freq+0x20>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	0adb      	lsrs	r3, r3, #11
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	4903      	ldr	r1, [pc, #12]	; (8003124 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003116:	5ccb      	ldrb	r3, [r1, r3]
 8003118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800311c:	4618      	mov	r0, r3
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40021000 	.word	0x40021000
 8003124:	080033e0 	.word	0x080033e0

08003128 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800312c:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_RCC_NMI_IRQHandler+0x20>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003134:	2b80      	cmp	r3, #128	; 0x80
 8003136:	d104      	bne.n	8003142 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003138:	f000 f828 	bl	800318c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800313c:	4b03      	ldr	r3, [pc, #12]	; (800314c <HAL_RCC_NMI_IRQHandler+0x24>)
 800313e:	2280      	movs	r2, #128	; 0x80
 8003140:	701a      	strb	r2, [r3, #0]
  }
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000
 800314c:	4002100a 	.word	0x4002100a

08003150 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003158:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <RCC_Delay+0x34>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <RCC_Delay+0x38>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	0a5b      	lsrs	r3, r3, #9
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800316c:	bf00      	nop
  }
  while (Delay --);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1e5a      	subs	r2, r3, #1
 8003172:	60fa      	str	r2, [r7, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1f9      	bne.n	800316c <RCC_Delay+0x1c>
}
 8003178:	bf00      	nop
 800317a:	bf00      	nop
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr
 8003184:	20000004 	.word	0x20000004
 8003188:	10624dd3 	.word	0x10624dd3

0800318c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e03f      	b.n	800322a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fe f84c 	bl	800125c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2224      	movs	r2, #36	; 0x24
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f829 	bl	8003234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695a      	ldr	r2, [r3, #20]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	4313      	orrs	r3, r2
 8003262:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800326e:	f023 030c 	bic.w	r3, r3, #12
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	68b9      	ldr	r1, [r7, #8]
 8003278:	430b      	orrs	r3, r1
 800327a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699a      	ldr	r2, [r3, #24]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a2c      	ldr	r2, [pc, #176]	; (8003348 <UART_SetConfig+0x114>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d103      	bne.n	80032a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800329c:	f7ff ff30 	bl	8003100 <HAL_RCC_GetPCLK2Freq>
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	e002      	b.n	80032aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032a4:	f7ff ff18 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 80032a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	009a      	lsls	r2, r3, #2
 80032b4:	441a      	add	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c0:	4a22      	ldr	r2, [pc, #136]	; (800334c <UART_SetConfig+0x118>)
 80032c2:	fba2 2303 	umull	r2, r3, r2, r3
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	0119      	lsls	r1, r3, #4
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	009a      	lsls	r2, r3, #2
 80032d4:	441a      	add	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80032e0:	4b1a      	ldr	r3, [pc, #104]	; (800334c <UART_SetConfig+0x118>)
 80032e2:	fba3 0302 	umull	r0, r3, r3, r2
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	2064      	movs	r0, #100	; 0x64
 80032ea:	fb00 f303 	mul.w	r3, r0, r3
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	3332      	adds	r3, #50	; 0x32
 80032f4:	4a15      	ldr	r2, [pc, #84]	; (800334c <UART_SetConfig+0x118>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003300:	4419      	add	r1, r3
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	009a      	lsls	r2, r3, #2
 800330c:	441a      	add	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	fbb2 f2f3 	udiv	r2, r2, r3
 8003318:	4b0c      	ldr	r3, [pc, #48]	; (800334c <UART_SetConfig+0x118>)
 800331a:	fba3 0302 	umull	r0, r3, r3, r2
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	2064      	movs	r0, #100	; 0x64
 8003322:	fb00 f303 	mul.w	r3, r0, r3
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	3332      	adds	r3, #50	; 0x32
 800332c:	4a07      	ldr	r2, [pc, #28]	; (800334c <UART_SetConfig+0x118>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	f003 020f 	and.w	r2, r3, #15
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	440a      	add	r2, r1
 800333e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003340:	bf00      	nop
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40013800 	.word	0x40013800
 800334c:	51eb851f 	.word	0x51eb851f

08003350 <__libc_init_array>:
 8003350:	b570      	push	{r4, r5, r6, lr}
 8003352:	2600      	movs	r6, #0
 8003354:	4d0c      	ldr	r5, [pc, #48]	; (8003388 <__libc_init_array+0x38>)
 8003356:	4c0d      	ldr	r4, [pc, #52]	; (800338c <__libc_init_array+0x3c>)
 8003358:	1b64      	subs	r4, r4, r5
 800335a:	10a4      	asrs	r4, r4, #2
 800335c:	42a6      	cmp	r6, r4
 800335e:	d109      	bne.n	8003374 <__libc_init_array+0x24>
 8003360:	f000 f822 	bl	80033a8 <_init>
 8003364:	2600      	movs	r6, #0
 8003366:	4d0a      	ldr	r5, [pc, #40]	; (8003390 <__libc_init_array+0x40>)
 8003368:	4c0a      	ldr	r4, [pc, #40]	; (8003394 <__libc_init_array+0x44>)
 800336a:	1b64      	subs	r4, r4, r5
 800336c:	10a4      	asrs	r4, r4, #2
 800336e:	42a6      	cmp	r6, r4
 8003370:	d105      	bne.n	800337e <__libc_init_array+0x2e>
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	f855 3b04 	ldr.w	r3, [r5], #4
 8003378:	4798      	blx	r3
 800337a:	3601      	adds	r6, #1
 800337c:	e7ee      	b.n	800335c <__libc_init_array+0xc>
 800337e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003382:	4798      	blx	r3
 8003384:	3601      	adds	r6, #1
 8003386:	e7f2      	b.n	800336e <__libc_init_array+0x1e>
 8003388:	080033e8 	.word	0x080033e8
 800338c:	080033e8 	.word	0x080033e8
 8003390:	080033e8 	.word	0x080033e8
 8003394:	080033ec 	.word	0x080033ec

08003398 <memset>:
 8003398:	4603      	mov	r3, r0
 800339a:	4402      	add	r2, r0
 800339c:	4293      	cmp	r3, r2
 800339e:	d100      	bne.n	80033a2 <memset+0xa>
 80033a0:	4770      	bx	lr
 80033a2:	f803 1b01 	strb.w	r1, [r3], #1
 80033a6:	e7f9      	b.n	800339c <memset+0x4>

080033a8 <_init>:
 80033a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033aa:	bf00      	nop
 80033ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ae:	bc08      	pop	{r3}
 80033b0:	469e      	mov	lr, r3
 80033b2:	4770      	bx	lr

080033b4 <_fini>:
 80033b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b6:	bf00      	nop
 80033b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ba:	bc08      	pop	{r3}
 80033bc:	469e      	mov	lr, r3
 80033be:	4770      	bx	lr
