
gas_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004218  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004324  08004324  00014324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800438c  0800438c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800438c  0800438c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800438c  0800438c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800438c  0800438c  0001438c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004390  08004390  00014390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000074  08004408  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08004408  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eddd  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000200d  00000000  00000000  0002ee7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  00030e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a38  00000000  00000000  00031960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002353  00000000  00000000  00032398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb01  00000000  00000000  000346eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087f82  00000000  00000000  000411ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c916e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031e0  00000000  00000000  000c91c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	0800430c 	.word	0x0800430c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	0800430c 	.word	0x0800430c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_fmul>:
 800015c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000164:	bf1e      	ittt	ne
 8000166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016a:	ea92 0f0c 	teqne	r2, ip
 800016e:	ea93 0f0c 	teqne	r3, ip
 8000172:	d06f      	beq.n	8000254 <__aeabi_fmul+0xf8>
 8000174:	441a      	add	r2, r3
 8000176:	ea80 0c01 	eor.w	ip, r0, r1
 800017a:	0240      	lsls	r0, r0, #9
 800017c:	bf18      	it	ne
 800017e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000182:	d01e      	beq.n	80001c2 <__aeabi_fmul+0x66>
 8000184:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000188:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800018c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000190:	fba0 3101 	umull	r3, r1, r0, r1
 8000194:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000198:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800019c:	bf3e      	ittt	cc
 800019e:	0049      	lslcc	r1, r1, #1
 80001a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a4:	005b      	lslcc	r3, r3, #1
 80001a6:	ea40 0001 	orr.w	r0, r0, r1
 80001aa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001ae:	2afd      	cmp	r2, #253	; 0xfd
 80001b0:	d81d      	bhi.n	80001ee <__aeabi_fmul+0x92>
 80001b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ba:	bf08      	it	eq
 80001bc:	f020 0001 	biceq.w	r0, r0, #1
 80001c0:	4770      	bx	lr
 80001c2:	f090 0f00 	teq	r0, #0
 80001c6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ca:	bf08      	it	eq
 80001cc:	0249      	lsleq	r1, r1, #9
 80001ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001d6:	3a7f      	subs	r2, #127	; 0x7f
 80001d8:	bfc2      	ittt	gt
 80001da:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e2:	4770      	bxgt	lr
 80001e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	3a01      	subs	r2, #1
 80001ee:	dc5d      	bgt.n	80002ac <__aeabi_fmul+0x150>
 80001f0:	f112 0f19 	cmn.w	r2, #25
 80001f4:	bfdc      	itt	le
 80001f6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fa:	4770      	bxle	lr
 80001fc:	f1c2 0200 	rsb	r2, r2, #0
 8000200:	0041      	lsls	r1, r0, #1
 8000202:	fa21 f102 	lsr.w	r1, r1, r2
 8000206:	f1c2 0220 	rsb	r2, r2, #32
 800020a:	fa00 fc02 	lsl.w	ip, r0, r2
 800020e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000212:	f140 0000 	adc.w	r0, r0, #0
 8000216:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021a:	bf08      	it	eq
 800021c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000220:	4770      	bx	lr
 8000222:	f092 0f00 	teq	r2, #0
 8000226:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022a:	bf02      	ittt	eq
 800022c:	0040      	lsleq	r0, r0, #1
 800022e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000232:	3a01      	subeq	r2, #1
 8000234:	d0f9      	beq.n	800022a <__aeabi_fmul+0xce>
 8000236:	ea40 000c 	orr.w	r0, r0, ip
 800023a:	f093 0f00 	teq	r3, #0
 800023e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0049      	lsleq	r1, r1, #1
 8000246:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024a:	3b01      	subeq	r3, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xe6>
 800024e:	ea41 010c 	orr.w	r1, r1, ip
 8000252:	e78f      	b.n	8000174 <__aeabi_fmul+0x18>
 8000254:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000258:	ea92 0f0c 	teq	r2, ip
 800025c:	bf18      	it	ne
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d00a      	beq.n	800027a <__aeabi_fmul+0x11e>
 8000264:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000268:	bf18      	it	ne
 800026a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800026e:	d1d8      	bne.n	8000222 <__aeabi_fmul+0xc6>
 8000270:	ea80 0001 	eor.w	r0, r0, r1
 8000274:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000278:	4770      	bx	lr
 800027a:	f090 0f00 	teq	r0, #0
 800027e:	bf17      	itett	ne
 8000280:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000284:	4608      	moveq	r0, r1
 8000286:	f091 0f00 	teqne	r1, #0
 800028a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800028e:	d014      	beq.n	80002ba <__aeabi_fmul+0x15e>
 8000290:	ea92 0f0c 	teq	r2, ip
 8000294:	d101      	bne.n	800029a <__aeabi_fmul+0x13e>
 8000296:	0242      	lsls	r2, r0, #9
 8000298:	d10f      	bne.n	80002ba <__aeabi_fmul+0x15e>
 800029a:	ea93 0f0c 	teq	r3, ip
 800029e:	d103      	bne.n	80002a8 <__aeabi_fmul+0x14c>
 80002a0:	024b      	lsls	r3, r1, #9
 80002a2:	bf18      	it	ne
 80002a4:	4608      	movne	r0, r1
 80002a6:	d108      	bne.n	80002ba <__aeabi_fmul+0x15e>
 80002a8:	ea80 0001 	eor.w	r0, r0, r1
 80002ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bx	lr
 80002ba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002be:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_drsub>:
 80002c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c8:	e002      	b.n	80002d0 <__adddf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_dsub>:
 80002cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d0 <__adddf3>:
 80002d0:	b530      	push	{r4, r5, lr}
 80002d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002da:	ea94 0f05 	teq	r4, r5
 80002de:	bf08      	it	eq
 80002e0:	ea90 0f02 	teqeq	r0, r2
 80002e4:	bf1f      	itttt	ne
 80002e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f6:	f000 80e2 	beq.w	80004be <__adddf3+0x1ee>
 80002fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000302:	bfb8      	it	lt
 8000304:	426d      	neglt	r5, r5
 8000306:	dd0c      	ble.n	8000322 <__adddf3+0x52>
 8000308:	442c      	add	r4, r5
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	ea82 0000 	eor.w	r0, r2, r0
 8000316:	ea83 0101 	eor.w	r1, r3, r1
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	2d36      	cmp	r5, #54	; 0x36
 8000324:	bf88      	it	hi
 8000326:	bd30      	pophi	{r4, r5, pc}
 8000328:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800032c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000330:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000334:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x70>
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000344:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000348:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x84>
 800034e:	4252      	negs	r2, r2
 8000350:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000354:	ea94 0f05 	teq	r4, r5
 8000358:	f000 80a7 	beq.w	80004aa <__adddf3+0x1da>
 800035c:	f1a4 0401 	sub.w	r4, r4, #1
 8000360:	f1d5 0e20 	rsbs	lr, r5, #32
 8000364:	db0d      	blt.n	8000382 <__adddf3+0xb2>
 8000366:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036a:	fa22 f205 	lsr.w	r2, r2, r5
 800036e:	1880      	adds	r0, r0, r2
 8000370:	f141 0100 	adc.w	r1, r1, #0
 8000374:	fa03 f20e 	lsl.w	r2, r3, lr
 8000378:	1880      	adds	r0, r0, r2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	4159      	adcs	r1, r3
 8000380:	e00e      	b.n	80003a0 <__adddf3+0xd0>
 8000382:	f1a5 0520 	sub.w	r5, r5, #32
 8000386:	f10e 0e20 	add.w	lr, lr, #32
 800038a:	2a01      	cmp	r2, #1
 800038c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000390:	bf28      	it	cs
 8000392:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	18c0      	adds	r0, r0, r3
 800039c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a4:	d507      	bpl.n	80003b6 <__adddf3+0xe6>
 80003a6:	f04f 0e00 	mov.w	lr, #0
 80003aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ba:	d31b      	bcc.n	80003f4 <__adddf3+0x124>
 80003bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c0:	d30c      	bcc.n	80003dc <__adddf3+0x10c>
 80003c2:	0849      	lsrs	r1, r1, #1
 80003c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003cc:	f104 0401 	add.w	r4, r4, #1
 80003d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d8:	f080 809a 	bcs.w	8000510 <__adddf3+0x240>
 80003dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e0:	bf08      	it	eq
 80003e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e6:	f150 0000 	adcs.w	r0, r0, #0
 80003ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ee:	ea41 0105 	orr.w	r1, r1, r5
 80003f2:	bd30      	pop	{r4, r5, pc}
 80003f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f8:	4140      	adcs	r0, r0
 80003fa:	eb41 0101 	adc.w	r1, r1, r1
 80003fe:	3c01      	subs	r4, #1
 8000400:	bf28      	it	cs
 8000402:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000406:	d2e9      	bcs.n	80003dc <__adddf3+0x10c>
 8000408:	f091 0f00 	teq	r1, #0
 800040c:	bf04      	itt	eq
 800040e:	4601      	moveq	r1, r0
 8000410:	2000      	moveq	r0, #0
 8000412:	fab1 f381 	clz	r3, r1
 8000416:	bf08      	it	eq
 8000418:	3320      	addeq	r3, #32
 800041a:	f1a3 030b 	sub.w	r3, r3, #11
 800041e:	f1b3 0220 	subs.w	r2, r3, #32
 8000422:	da0c      	bge.n	800043e <__adddf3+0x16e>
 8000424:	320c      	adds	r2, #12
 8000426:	dd08      	ble.n	800043a <__adddf3+0x16a>
 8000428:	f102 0c14 	add.w	ip, r2, #20
 800042c:	f1c2 020c 	rsb	r2, r2, #12
 8000430:	fa01 f00c 	lsl.w	r0, r1, ip
 8000434:	fa21 f102 	lsr.w	r1, r1, r2
 8000438:	e00c      	b.n	8000454 <__adddf3+0x184>
 800043a:	f102 0214 	add.w	r2, r2, #20
 800043e:	bfd8      	it	le
 8000440:	f1c2 0c20 	rsble	ip, r2, #32
 8000444:	fa01 f102 	lsl.w	r1, r1, r2
 8000448:	fa20 fc0c 	lsr.w	ip, r0, ip
 800044c:	bfdc      	itt	le
 800044e:	ea41 010c 	orrle.w	r1, r1, ip
 8000452:	4090      	lslle	r0, r2
 8000454:	1ae4      	subs	r4, r4, r3
 8000456:	bfa2      	ittt	ge
 8000458:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800045c:	4329      	orrge	r1, r5
 800045e:	bd30      	popge	{r4, r5, pc}
 8000460:	ea6f 0404 	mvn.w	r4, r4
 8000464:	3c1f      	subs	r4, #31
 8000466:	da1c      	bge.n	80004a2 <__adddf3+0x1d2>
 8000468:	340c      	adds	r4, #12
 800046a:	dc0e      	bgt.n	800048a <__adddf3+0x1ba>
 800046c:	f104 0414 	add.w	r4, r4, #20
 8000470:	f1c4 0220 	rsb	r2, r4, #32
 8000474:	fa20 f004 	lsr.w	r0, r0, r4
 8000478:	fa01 f302 	lsl.w	r3, r1, r2
 800047c:	ea40 0003 	orr.w	r0, r0, r3
 8000480:	fa21 f304 	lsr.w	r3, r1, r4
 8000484:	ea45 0103 	orr.w	r1, r5, r3
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f1c4 040c 	rsb	r4, r4, #12
 800048e:	f1c4 0220 	rsb	r2, r4, #32
 8000492:	fa20 f002 	lsr.w	r0, r0, r2
 8000496:	fa01 f304 	lsl.w	r3, r1, r4
 800049a:	ea40 0003 	orr.w	r0, r0, r3
 800049e:	4629      	mov	r1, r5
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	fa21 f004 	lsr.w	r0, r1, r4
 80004a6:	4629      	mov	r1, r5
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f094 0f00 	teq	r4, #0
 80004ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b2:	bf06      	itte	eq
 80004b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b8:	3401      	addeq	r4, #1
 80004ba:	3d01      	subne	r5, #1
 80004bc:	e74e      	b.n	800035c <__adddf3+0x8c>
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf18      	it	ne
 80004c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c8:	d029      	beq.n	800051e <__adddf3+0x24e>
 80004ca:	ea94 0f05 	teq	r4, r5
 80004ce:	bf08      	it	eq
 80004d0:	ea90 0f02 	teqeq	r0, r2
 80004d4:	d005      	beq.n	80004e2 <__adddf3+0x212>
 80004d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004da:	bf04      	itt	eq
 80004dc:	4619      	moveq	r1, r3
 80004de:	4610      	moveq	r0, r2
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea91 0f03 	teq	r1, r3
 80004e6:	bf1e      	ittt	ne
 80004e8:	2100      	movne	r1, #0
 80004ea:	2000      	movne	r0, #0
 80004ec:	bd30      	popne	{r4, r5, pc}
 80004ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f2:	d105      	bne.n	8000500 <__adddf3+0x230>
 80004f4:	0040      	lsls	r0, r0, #1
 80004f6:	4149      	adcs	r1, r1
 80004f8:	bf28      	it	cs
 80004fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fe:	bd30      	pop	{r4, r5, pc}
 8000500:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000504:	bf3c      	itt	cc
 8000506:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050a:	bd30      	popcc	{r4, r5, pc}
 800050c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000510:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000514:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000518:	f04f 0000 	mov.w	r0, #0
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000522:	bf1a      	itte	ne
 8000524:	4619      	movne	r1, r3
 8000526:	4610      	movne	r0, r2
 8000528:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800052c:	bf1c      	itt	ne
 800052e:	460b      	movne	r3, r1
 8000530:	4602      	movne	r2, r0
 8000532:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000536:	bf06      	itte	eq
 8000538:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800053c:	ea91 0f03 	teqeq	r1, r3
 8000540:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	bf00      	nop

08000548 <__aeabi_ui2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055c:	f04f 0500 	mov.w	r5, #0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e750      	b.n	8000408 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_i2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000580:	bf48      	it	mi
 8000582:	4240      	negmi	r0, r0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e73e      	b.n	8000408 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_f2d>:
 800058c:	0042      	lsls	r2, r0, #1
 800058e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000592:	ea4f 0131 	mov.w	r1, r1, rrx
 8000596:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059a:	bf1f      	itttt	ne
 800059c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a8:	4770      	bxne	lr
 80005aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ae:	bf08      	it	eq
 80005b0:	4770      	bxeq	lr
 80005b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b6:	bf04      	itt	eq
 80005b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005cc:	e71c      	b.n	8000408 <__adddf3+0x138>
 80005ce:	bf00      	nop

080005d0 <__aeabi_ul2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f04f 0500 	mov.w	r5, #0
 80005de:	e00a      	b.n	80005f6 <__aeabi_l2d+0x16>

080005e0 <__aeabi_l2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ee:	d502      	bpl.n	80005f6 <__aeabi_l2d+0x16>
 80005f0:	4240      	negs	r0, r0
 80005f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000602:	f43f aed8 	beq.w	80003b6 <__adddf3+0xe6>
 8000606:	f04f 0203 	mov.w	r2, #3
 800060a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060e:	bf18      	it	ne
 8000610:	3203      	addne	r2, #3
 8000612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000616:	bf18      	it	ne
 8000618:	3203      	addne	r2, #3
 800061a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061e:	f1c2 0320 	rsb	r3, r2, #32
 8000622:	fa00 fc03 	lsl.w	ip, r0, r3
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 fe03 	lsl.w	lr, r1, r3
 800062e:	ea40 000e 	orr.w	r0, r0, lr
 8000632:	fa21 f102 	lsr.w	r1, r1, r2
 8000636:	4414      	add	r4, r2
 8000638:	e6bd      	b.n	80003b6 <__adddf3+0xe6>
 800063a:	bf00      	nop

0800063c <__aeabi_dmul>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000642:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000646:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064a:	bf1d      	ittte	ne
 800064c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000650:	ea94 0f0c 	teqne	r4, ip
 8000654:	ea95 0f0c 	teqne	r5, ip
 8000658:	f000 f8de 	bleq	8000818 <__aeabi_dmul+0x1dc>
 800065c:	442c      	add	r4, r5
 800065e:	ea81 0603 	eor.w	r6, r1, r3
 8000662:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000666:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066e:	bf18      	it	ne
 8000670:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067c:	d038      	beq.n	80006f0 <__aeabi_dmul+0xb4>
 800067e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000682:	f04f 0500 	mov.w	r5, #0
 8000686:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000692:	f04f 0600 	mov.w	r6, #0
 8000696:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069a:	f09c 0f00 	teq	ip, #0
 800069e:	bf18      	it	ne
 80006a0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006ac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b0:	d204      	bcs.n	80006bc <__aeabi_dmul+0x80>
 80006b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b6:	416d      	adcs	r5, r5
 80006b8:	eb46 0606 	adc.w	r6, r6, r6
 80006bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d4:	bf88      	it	hi
 80006d6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006da:	d81e      	bhi.n	800071a <__aeabi_dmul+0xde>
 80006dc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e0:	bf08      	it	eq
 80006e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e6:	f150 0000 	adcs.w	r0, r0, #0
 80006ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f4:	ea46 0101 	orr.w	r1, r6, r1
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000704:	bfc2      	ittt	gt
 8000706:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070e:	bd70      	popgt	{r4, r5, r6, pc}
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000714:	f04f 0e00 	mov.w	lr, #0
 8000718:	3c01      	subs	r4, #1
 800071a:	f300 80ab 	bgt.w	8000874 <__aeabi_dmul+0x238>
 800071e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000722:	bfde      	ittt	le
 8000724:	2000      	movle	r0, #0
 8000726:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072a:	bd70      	pople	{r4, r5, r6, pc}
 800072c:	f1c4 0400 	rsb	r4, r4, #0
 8000730:	3c20      	subs	r4, #32
 8000732:	da35      	bge.n	80007a0 <__aeabi_dmul+0x164>
 8000734:	340c      	adds	r4, #12
 8000736:	dc1b      	bgt.n	8000770 <__aeabi_dmul+0x134>
 8000738:	f104 0414 	add.w	r4, r4, #20
 800073c:	f1c4 0520 	rsb	r5, r4, #32
 8000740:	fa00 f305 	lsl.w	r3, r0, r5
 8000744:	fa20 f004 	lsr.w	r0, r0, r4
 8000748:	fa01 f205 	lsl.w	r2, r1, r5
 800074c:	ea40 0002 	orr.w	r0, r0, r2
 8000750:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000754:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	fa21 f604 	lsr.w	r6, r1, r4
 8000760:	eb42 0106 	adc.w	r1, r2, r6
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 040c 	rsb	r4, r4, #12
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f304 	lsl.w	r3, r0, r4
 800077c:	fa20 f005 	lsr.w	r0, r0, r5
 8000780:	fa01 f204 	lsl.w	r2, r1, r4
 8000784:	ea40 0002 	orr.w	r0, r0, r2
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000790:	f141 0100 	adc.w	r1, r1, #0
 8000794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000798:	bf08      	it	eq
 800079a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079e:	bd70      	pop	{r4, r5, r6, pc}
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f205 	lsl.w	r2, r0, r5
 80007a8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007ac:	fa20 f304 	lsr.w	r3, r0, r4
 80007b0:	fa01 f205 	lsl.w	r2, r1, r5
 80007b4:	ea43 0302 	orr.w	r3, r3, r2
 80007b8:	fa21 f004 	lsr.w	r0, r1, r4
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	fa21 f204 	lsr.w	r2, r1, r4
 80007c4:	ea20 0002 	bic.w	r0, r0, r2
 80007c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d0:	bf08      	it	eq
 80007d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d6:	bd70      	pop	{r4, r5, r6, pc}
 80007d8:	f094 0f00 	teq	r4, #0
 80007dc:	d10f      	bne.n	80007fe <__aeabi_dmul+0x1c2>
 80007de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e2:	0040      	lsls	r0, r0, #1
 80007e4:	eb41 0101 	adc.w	r1, r1, r1
 80007e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3c01      	subeq	r4, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1a6>
 80007f2:	ea41 0106 	orr.w	r1, r1, r6
 80007f6:	f095 0f00 	teq	r5, #0
 80007fa:	bf18      	it	ne
 80007fc:	4770      	bxne	lr
 80007fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000802:	0052      	lsls	r2, r2, #1
 8000804:	eb43 0303 	adc.w	r3, r3, r3
 8000808:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800080c:	bf08      	it	eq
 800080e:	3d01      	subeq	r5, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1c6>
 8000812:	ea43 0306 	orr.w	r3, r3, r6
 8000816:	4770      	bx	lr
 8000818:	ea94 0f0c 	teq	r4, ip
 800081c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000820:	bf18      	it	ne
 8000822:	ea95 0f0c 	teqne	r5, ip
 8000826:	d00c      	beq.n	8000842 <__aeabi_dmul+0x206>
 8000828:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082c:	bf18      	it	ne
 800082e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000832:	d1d1      	bne.n	80007d8 <__aeabi_dmul+0x19c>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000846:	bf06      	itte	eq
 8000848:	4610      	moveq	r0, r2
 800084a:	4619      	moveq	r1, r3
 800084c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000850:	d019      	beq.n	8000886 <__aeabi_dmul+0x24a>
 8000852:	ea94 0f0c 	teq	r4, ip
 8000856:	d102      	bne.n	800085e <__aeabi_dmul+0x222>
 8000858:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800085c:	d113      	bne.n	8000886 <__aeabi_dmul+0x24a>
 800085e:	ea95 0f0c 	teq	r5, ip
 8000862:	d105      	bne.n	8000870 <__aeabi_dmul+0x234>
 8000864:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000868:	bf1c      	itt	ne
 800086a:	4610      	movne	r0, r2
 800086c:	4619      	movne	r1, r3
 800086e:	d10a      	bne.n	8000886 <__aeabi_dmul+0x24a>
 8000870:	ea81 0103 	eor.w	r1, r1, r3
 8000874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000878:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000880:	f04f 0000 	mov.w	r0, #0
 8000884:	bd70      	pop	{r4, r5, r6, pc}
 8000886:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088e:	bd70      	pop	{r4, r5, r6, pc}

08000890 <__aeabi_ddiv>:
 8000890:	b570      	push	{r4, r5, r6, lr}
 8000892:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000896:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089e:	bf1d      	ittte	ne
 80008a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a4:	ea94 0f0c 	teqne	r4, ip
 80008a8:	ea95 0f0c 	teqne	r5, ip
 80008ac:	f000 f8a7 	bleq	80009fe <__aeabi_ddiv+0x16e>
 80008b0:	eba4 0405 	sub.w	r4, r4, r5
 80008b4:	ea81 0e03 	eor.w	lr, r1, r3
 80008b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c0:	f000 8088 	beq.w	80009d4 <__aeabi_ddiv+0x144>
 80008c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e8:	429d      	cmp	r5, r3
 80008ea:	bf08      	it	eq
 80008ec:	4296      	cmpeq	r6, r2
 80008ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f6:	d202      	bcs.n	80008fe <__aeabi_ddiv+0x6e>
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	1ab6      	subs	r6, r6, r2
 8000900:	eb65 0503 	sbc.w	r5, r5, r3
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 000c 	orrcs.w	r0, r0, ip
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800096c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000970:	d018      	beq.n	80009a4 <__aeabi_ddiv+0x114>
 8000972:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000976:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000982:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000986:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098e:	d1c0      	bne.n	8000912 <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	d10b      	bne.n	80009ae <__aeabi_ddiv+0x11e>
 8000996:	ea41 0100 	orr.w	r1, r1, r0
 800099a:	f04f 0000 	mov.w	r0, #0
 800099e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a2:	e7b6      	b.n	8000912 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	bf04      	itt	eq
 80009aa:	4301      	orreq	r1, r0
 80009ac:	2000      	moveq	r0, #0
 80009ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b2:	bf88      	it	hi
 80009b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b8:	f63f aeaf 	bhi.w	800071a <__aeabi_dmul+0xde>
 80009bc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c0:	bf04      	itt	eq
 80009c2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ca:	f150 0000 	adcs.w	r0, r0, #0
 80009ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e0:	bfc2      	ittt	gt
 80009e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	popgt	{r4, r5, r6, pc}
 80009ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f0:	f04f 0e00 	mov.w	lr, #0
 80009f4:	3c01      	subs	r4, #1
 80009f6:	e690      	b.n	800071a <__aeabi_dmul+0xde>
 80009f8:	ea45 0e06 	orr.w	lr, r5, r6
 80009fc:	e68d      	b.n	800071a <__aeabi_dmul+0xde>
 80009fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a02:	ea94 0f0c 	teq	r4, ip
 8000a06:	bf08      	it	eq
 8000a08:	ea95 0f0c 	teqeq	r5, ip
 8000a0c:	f43f af3b 	beq.w	8000886 <__aeabi_dmul+0x24a>
 8000a10:	ea94 0f0c 	teq	r4, ip
 8000a14:	d10a      	bne.n	8000a2c <__aeabi_ddiv+0x19c>
 8000a16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1a:	f47f af34 	bne.w	8000886 <__aeabi_dmul+0x24a>
 8000a1e:	ea95 0f0c 	teq	r5, ip
 8000a22:	f47f af25 	bne.w	8000870 <__aeabi_dmul+0x234>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e72c      	b.n	8000886 <__aeabi_dmul+0x24a>
 8000a2c:	ea95 0f0c 	teq	r5, ip
 8000a30:	d106      	bne.n	8000a40 <__aeabi_ddiv+0x1b0>
 8000a32:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a36:	f43f aefd 	beq.w	8000834 <__aeabi_dmul+0x1f8>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e722      	b.n	8000886 <__aeabi_dmul+0x24a>
 8000a40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a44:	bf18      	it	ne
 8000a46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4a:	f47f aec5 	bne.w	80007d8 <__aeabi_dmul+0x19c>
 8000a4e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a52:	f47f af0d 	bne.w	8000870 <__aeabi_dmul+0x234>
 8000a56:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5a:	f47f aeeb 	bne.w	8000834 <__aeabi_dmul+0x1f8>
 8000a5e:	e712      	b.n	8000886 <__aeabi_dmul+0x24a>

08000a60 <__aeabi_d2uiz>:
 8000a60:	004a      	lsls	r2, r1, #1
 8000a62:	d211      	bcs.n	8000a88 <__aeabi_d2uiz+0x28>
 8000a64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a68:	d211      	bcs.n	8000a8e <__aeabi_d2uiz+0x2e>
 8000a6a:	d50d      	bpl.n	8000a88 <__aeabi_d2uiz+0x28>
 8000a6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a74:	d40e      	bmi.n	8000a94 <__aeabi_d2uiz+0x34>
 8000a76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_d2uiz+0x3a>
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0000 	mov.w	r0, #0
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_f2uiz>:
 8000b40:	0042      	lsls	r2, r0, #1
 8000b42:	d20e      	bcs.n	8000b62 <__aeabi_f2uiz+0x22>
 8000b44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b48:	d30b      	bcc.n	8000b62 <__aeabi_f2uiz+0x22>
 8000b4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b52:	d409      	bmi.n	8000b68 <__aeabi_f2uiz+0x28>
 8000b54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr
 8000b68:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b6c:	d101      	bne.n	8000b72 <__aeabi_f2uiz+0x32>
 8000b6e:	0242      	lsls	r2, r0, #9
 8000b70:	d102      	bne.n	8000b78 <__aeabi_f2uiz+0x38>
 8000b72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <ads1115_encode_cfg>:
/* Low water mark to signal an alert */
static uint8_t ADS1115_LOW_THRES_REG = 0x02;
/* High water mark to signal an alert */
static uint8_t ADS1115_HIGH_THRES_REG = 0x03;

ads1115_raw_conf_t ads1115_encode_cfg(const ads1115_config_t * conf){
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	ads1115_raw_conf_t raw_conf = 0x0000;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->os & ADS1115_OS_BIT_MASK) << ADS1115_OS_BIT_OFFSET;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	03db      	lsls	r3, r3, #15
 8000b92:	b21a      	sxth	r2, r3
 8000b94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->pin & ADS1115_PIN_BIT_MASK) << ADS1115_PIN_BIT_OFFSET;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	785b      	ldrb	r3, [r3, #1]
 8000ba2:	031b      	lsls	r3, r3, #12
 8000ba4:	b21b      	sxth	r3, r3
 8000ba6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000baa:	b21a      	sxth	r2, r3
 8000bac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	b21b      	sxth	r3, r3
 8000bb4:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->gain & ADS1115_PGA_BIT_MASK) << ADS1115_PGA_BIT_OFFSET;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	789b      	ldrb	r3, [r3, #2]
 8000bba:	025b      	lsls	r3, r3, #9
 8000bbc:	b21b      	sxth	r3, r3
 8000bbe:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8000bc2:	b21a      	sxth	r2, r3
 8000bc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	b21b      	sxth	r3, r3
 8000bcc:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->mode & ADS1115_MODE_BIT_MASK) << ADS1115_MODE_BIT_OFFSET;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	78db      	ldrb	r3, [r3, #3]
 8000bd2:	021b      	lsls	r3, r3, #8
 8000bd4:	b21b      	sxth	r3, r3
 8000bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bda:	b21a      	sxth	r2, r3
 8000bdc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->data_rate & ADS1115_DR_BIT_MASK) << ADS1115_DR_BIT_OFFSET;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	791b      	ldrb	r3, [r3, #4]
 8000bea:	015b      	lsls	r3, r3, #5
 8000bec:	b21b      	sxth	r3, r3
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	b21a      	sxth	r2, r3
 8000bf2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	b21b      	sxth	r3, r3
 8000bfa:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->comp & ADS1115_COMP_BIT_MASK) << ADS1115_COMP_BIT_OFFSET;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	795b      	ldrb	r3, [r3, #5]
 8000c00:	011b      	lsls	r3, r3, #4
 8000c02:	b21b      	sxth	r3, r3
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	b21a      	sxth	r2, r3
 8000c0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b21b      	sxth	r3, r3
 8000c12:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->polarity & ADS1115_POL_BIT_MASK) << ADS1115_POL_BIT_OFFSET;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	799b      	ldrb	r3, [r3, #6]
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	b21b      	sxth	r3, r3
 8000c1c:	f003 0308 	and.w	r3, r3, #8
 8000c20:	b21a      	sxth	r2, r3
 8000c22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->latch & ADS1115_LATCH_BIT_MASK) << ADS1115_LATCH_BIT_OFFSET;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	79db      	ldrb	r3, [r3, #7]
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	b21b      	sxth	r3, r3
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	b21a      	sxth	r2, r3
 8000c3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	b21b      	sxth	r3, r3
 8000c42:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->que & ADS1115_QUEUE_BIT_MASK) << ADS1115_QUEUE_BIT_OFFSET;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7a1b      	ldrb	r3, [r3, #8]
 8000c48:	b21b      	sxth	r3, r3
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	b21a      	sxth	r2, r3
 8000c50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	b21b      	sxth	r3, r3
 8000c58:	81fb      	strh	r3, [r7, #14]
	return raw_conf;
 8000c5a:	89fb      	ldrh	r3, [r7, #14]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
	...

08000c68 <ads1115_write_cfg>:
    return err;
}

HAL_StatusTypeDef ads1115_write_cfg(const ads1115_i2c_conf_t* i2c_conf,
		const ads1115_config_t * conf)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af02      	add	r7, sp, #8
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
	 HAL_StatusTypeDef err;
    ads1115_raw_conf_t raw_conf = ads1115_encode_cfg(conf);
 8000c72:	6838      	ldr	r0, [r7, #0]
 8000c74:	f7ff ff84 	bl	8000b80 <ads1115_encode_cfg>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	81fb      	strh	r3, [r7, #14]
    uint8_t i2c_buf[3] = { ADS1115_CONFIGURATION_REG, raw_conf >> 8, raw_conf & 0xFF};
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <ads1115_write_cfg+0x5c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	723b      	strb	r3, [r7, #8]
 8000c82:	89fb      	ldrh	r3, [r7, #14]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	727b      	strb	r3, [r7, #9]
 8000c8c:	89fb      	ldrh	r3, [r7, #14]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	72bb      	strb	r3, [r7, #10]
    err = HAL_I2C_Master_Transmit(i2c_conf->hi2c, ( i2c_conf->i2c_slave_addr << 1) | I2C_WRITE,
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6818      	ldr	r0, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	791b      	ldrb	r3, [r3, #4]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	b21b      	sxth	r3, r3
 8000ca4:	b299      	uxth	r1, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	f107 0208 	add.w	r2, r7, #8
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	f001 fa3d 	bl	8002130 <HAL_I2C_Master_Transmit>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	737b      	strb	r3, [r7, #13]
    		i2c_buf, 3, i2c_conf->timeout);

   return err;
 8000cba:	7b7b      	ldrb	r3, [r7, #13]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000000 	.word	0x20000000

08000cc8 <__ads1115_convert_raw_voltage>:

HAL_StatusTypeDef __ads1115_convert_raw_voltage(const ads1115_config_t * conf,
                                         const int16_t raw_value, int16_t* converted_value)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	607a      	str	r2, [r7, #4]
 8000cd4:	817b      	strh	r3, [r7, #10]
    if (converted_value == NULL) {
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d101      	bne.n	8000ce0 <__ads1115_convert_raw_voltage+0x18>
        return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e078      	b.n	8000dd2 <__ads1115_convert_raw_voltage+0x10a>
    }
    double buf = ((double)raw_value / 32768);
 8000ce0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fc3f 	bl	8000568 <__aeabi_i2d>
 8000cea:	f04f 0200 	mov.w	r2, #0
 8000cee:	4b3b      	ldr	r3, [pc, #236]	; (8000ddc <__ads1115_convert_raw_voltage+0x114>)
 8000cf0:	f7ff fdce 	bl	8000890 <__aeabi_ddiv>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    HAL_StatusTypeDef err = HAL_OK;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	75fb      	strb	r3, [r7, #23]
    switch (conf->gain) {
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	789b      	ldrb	r3, [r3, #2]
 8000d04:	2b05      	cmp	r3, #5
 8000d06:	d858      	bhi.n	8000dba <__ads1115_convert_raw_voltage+0xf2>
 8000d08:	a201      	add	r2, pc, #4	; (adr r2, 8000d10 <__ads1115_convert_raw_voltage+0x48>)
 8000d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0e:	bf00      	nop
 8000d10:	08000d29 	.word	0x08000d29
 8000d14:	08000d41 	.word	0x08000d41
 8000d18:	08000d59 	.word	0x08000d59
 8000d1c:	08000d71 	.word	0x08000d71
 8000d20:	08000d89 	.word	0x08000d89
 8000d24:	08000da3 	.word	0x08000da3
		case ADS1115_6_144V: buf = buf * 6144; break;
 8000d28:	f04f 0200 	mov.w	r2, #0
 8000d2c:	4b2c      	ldr	r3, [pc, #176]	; (8000de0 <__ads1115_convert_raw_voltage+0x118>)
 8000d2e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d32:	f7ff fc83 	bl	800063c <__aeabi_dmul>
 8000d36:	4602      	mov	r2, r0
 8000d38:	460b      	mov	r3, r1
 8000d3a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000d3e:	e03e      	b.n	8000dbe <__ads1115_convert_raw_voltage+0xf6>
		case ADS1115_4_096V: buf = buf * 4096; break;
 8000d40:	f04f 0200 	mov.w	r2, #0
 8000d44:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <__ads1115_convert_raw_voltage+0x11c>)
 8000d46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d4a:	f7ff fc77 	bl	800063c <__aeabi_dmul>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	460b      	mov	r3, r1
 8000d52:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000d56:	e032      	b.n	8000dbe <__ads1115_convert_raw_voltage+0xf6>
		case ADS1115_2_048V: buf = buf * 2048; break;
 8000d58:	f04f 0200 	mov.w	r2, #0
 8000d5c:	4b22      	ldr	r3, [pc, #136]	; (8000de8 <__ads1115_convert_raw_voltage+0x120>)
 8000d5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d62:	f7ff fc6b 	bl	800063c <__aeabi_dmul>
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000d6e:	e026      	b.n	8000dbe <__ads1115_convert_raw_voltage+0xf6>
		case ADS1115_1_024V: buf = buf * 1024; break;
 8000d70:	f04f 0200 	mov.w	r2, #0
 8000d74:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <__ads1115_convert_raw_voltage+0x124>)
 8000d76:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d7a:	f7ff fc5f 	bl	800063c <__aeabi_dmul>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	460b      	mov	r3, r1
 8000d82:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000d86:	e01a      	b.n	8000dbe <__ads1115_convert_raw_voltage+0xf6>
		case ADS1115_0_512V: buf = buf * 512; break;
 8000d88:	f04f 0200 	mov.w	r2, #0
 8000d8c:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8000d90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d94:	f7ff fc52 	bl	800063c <__aeabi_dmul>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000da0:	e00d      	b.n	8000dbe <__ads1115_convert_raw_voltage+0xf6>
		case ADS1115_0_256V: buf = buf * 256; break;
 8000da2:	f04f 0200 	mov.w	r2, #0
 8000da6:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <__ads1115_convert_raw_voltage+0x128>)
 8000da8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000dac:	f7ff fc46 	bl	800063c <__aeabi_dmul>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000db8:	e001      	b.n	8000dbe <__ads1115_convert_raw_voltage+0xf6>
		default: return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e009      	b.n	8000dd2 <__ads1115_convert_raw_voltage+0x10a>
    }

    *converted_value = (uint16_t)buf;
 8000dbe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000dc2:	f7ff fe4d 	bl	8000a60 <__aeabi_d2uiz>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	b21a      	sxth	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	801a      	strh	r2, [r3, #0]

    return err;
 8000dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3720      	adds	r7, #32
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40e00000 	.word	0x40e00000
 8000de0:	40b80000 	.word	0x40b80000
 8000de4:	40b00000 	.word	0x40b00000
 8000de8:	40a00000 	.word	0x40a00000
 8000dec:	40900000 	.word	0x40900000
 8000df0:	40700000 	.word	0x40700000

08000df4 <ads1115_read_adc_millivolts>:

HAL_StatusTypeDef ads1115_read_adc_millivolts(const ads1115_i2c_conf_t* i2c_conf,
		const ads1115_config_t *  conf, int16_t* mv)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
	return ads1115_read_to_millivolts(i2c_conf, conf, mv, &ADS1115_CONVERSION_REG);
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <ads1115_read_adc_millivolts+0x24>)
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	68b9      	ldr	r1, [r7, #8]
 8000e06:	68f8      	ldr	r0, [r7, #12]
 8000e08:	f000 f808 	bl	8000e1c <ads1115_read_to_millivolts>
 8000e0c:	4603      	mov	r3, r0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000090 	.word	0x20000090

08000e1c <ads1115_read_to_millivolts>:
	return ads1115_read_to_millivolts(i2c_conf, conf, mv_value, &ADS1115_HIGH_THRES_REG);
}

HAL_StatusTypeDef ads1115_read_to_millivolts(const ads1115_i2c_conf_t* i2c_conf,
		const ads1115_config_t *  conf, int16_t* mv_value, uint8_t * dev_register)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	603b      	str	r3, [r7, #0]
	int16_t raw_value = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	82bb      	strh	r3, [r7, #20]

	HAL_StatusTypeDef err = HAL_OK;;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	75fb      	strb	r3, [r7, #23]

	if (i2c_conf == NULL) {
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d101      	bne.n	8000e3c <ads1115_read_to_millivolts+0x20>
		return err;
 8000e38:	7dfb      	ldrb	r3, [r7, #23]
 8000e3a:	e043      	b.n	8000ec4 <ads1115_read_to_millivolts+0xa8>
	}
	err = ads1115_write_cfg(i2c_conf, conf);
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	68f8      	ldr	r0, [r7, #12]
 8000e40:	f7ff ff12 	bl	8000c68 <ads1115_write_cfg>
 8000e44:	4603      	mov	r3, r0
 8000e46:	75fb      	strb	r3, [r7, #23]
	if (err == HAL_OK){
 8000e48:	7dfb      	ldrb	r3, [r7, #23]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d139      	bne.n	8000ec2 <ads1115_read_to_millivolts+0xa6>
		uint8_t conv_res_eight_bit[2];
		err = HAL_I2C_Master_Transmit(i2c_conf->hi2c,  (i2c_conf->i2c_slave_addr << 1) | I2C_WRITE,
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	6818      	ldr	r0, [r3, #0]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	791b      	ldrb	r3, [r3, #4]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	b21b      	sxth	r3, r3
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	b299      	uxth	r1, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2301      	movs	r3, #1
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	f001 f960 	bl	8002130 <HAL_I2C_Master_Transmit>
 8000e70:	4603      	mov	r3, r0
 8000e72:	75fb      	strb	r3, [r7, #23]
				dev_register, 1, i2c_conf->timeout);
		if (err == HAL_OK){
 8000e74:	7dfb      	ldrb	r3, [r7, #23]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d110      	bne.n	8000e9c <ads1115_read_to_millivolts+0x80>
			err = HAL_I2C_Master_Receive(i2c_conf->hi2c, (i2c_conf->i2c_slave_addr << 1),
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6818      	ldr	r0, [r3, #0]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	791b      	ldrb	r3, [r3, #4]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	b299      	uxth	r1, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f107 0210 	add.w	r2, r7, #16
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2302      	movs	r3, #2
 8000e94:	f001 fa4a 	bl	800232c <HAL_I2C_Master_Receive>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	75fb      	strb	r3, [r7, #23]
					conv_res_eight_bit, 2, i2c_conf->timeout);
		}
		raw_value = ((int16_t)conv_res_eight_bit[0] << 8 )| conv_res_eight_bit[1];
 8000e9c:	7c3b      	ldrb	r3, [r7, #16]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	7c7b      	ldrb	r3, [r7, #17]
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	82bb      	strh	r3, [r7, #20]
		if (err == HAL_OK) {
 8000eaa:	7dfb      	ldrb	r3, [r7, #23]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d108      	bne.n	8000ec2 <ads1115_read_to_millivolts+0xa6>
			err = __ads1115_convert_raw_voltage(conf, raw_value, mv_value);
 8000eb0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	68b8      	ldr	r0, [r7, #8]
 8000eba:	f7ff ff05 	bl	8000cc8 <__ads1115_convert_raw_voltage>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	75fb      	strb	r3, [r7, #23]
		}
	}
	return err;
 8000ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <lm60_get_temp>:
 */
#include "components/lm60.h"
#include "components/ads1115.h"
#include "stdlib.h"

HAL_StatusTypeDef lm60_get_temp(const lm60_cfg_t* lm60_conf, float * temp_c){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
	int16_t mv;
	HAL_StatusTypeDef err = ads1115_read_adc_millivolts(&lm60_conf->ads_i2c_conf, &lm60_conf->ads_reg_conf, &mv);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	330c      	adds	r3, #12
 8000edc:	f107 020c 	add.w	r2, r7, #12
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f7ff ff87 	bl	8000df4 <ads1115_read_adc_millivolts>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	73fb      	strb	r3, [r7, #15]
	if( err == HAL_OK){
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d114      	bne.n	8000f1a <lm60_get_temp+0x4e>
		* temp_c = (mv - 424) / 6.25;
 8000ef0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ef4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fb35 	bl	8000568 <__aeabi_i2d>
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <lm60_get_temp+0x58>)
 8000f04:	f7ff fcc4 	bl	8000890 <__aeabi_ddiv>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f7ff fdc6 	bl	8000aa0 <__aeabi_d2f>
 8000f14:	4602      	mov	r2, r0
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	601a      	str	r2, [r3, #0]
	}
	return err;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40190000 	.word	0x40190000

08000f28 <hw_conf_lm60>:
 */
#include "hw_config.h"
#include "stm32f1xx_hal.h"
#include "stdbool.h"

const lm60_cfg_t hw_conf_lm60(){
 8000f28:	b4b0      	push	{r4, r5, r7}
 8000f2a:	b08f      	sub	sp, #60	; 0x3c
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	return (const lm60_cfg_t){
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <hw_conf_lm60+0x58>)
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	2348      	movs	r3, #72	; 0x48
 8000f36:	733b      	strb	r3, [r7, #12]
 8000f38:	2364      	movs	r3, #100	; 0x64
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	753b      	strb	r3, [r7, #20]
 8000f40:	2305      	movs	r3, #5
 8000f42:	757b      	strb	r3, [r7, #21]
 8000f44:	2303      	movs	r3, #3
 8000f46:	75bb      	strb	r3, [r7, #22]
 8000f48:	2301      	movs	r3, #1
 8000f4a:	75fb      	strb	r3, [r7, #23]
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	763b      	strb	r3, [r7, #24]
 8000f50:	2300      	movs	r3, #0
 8000f52:	767b      	strb	r3, [r7, #25]
 8000f54:	2300      	movs	r3, #0
 8000f56:	76bb      	strb	r3, [r7, #26]
 8000f58:	2300      	movs	r3, #0
 8000f5a:	76fb      	strb	r3, [r7, #27]
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	773b      	strb	r3, [r7, #28]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	461d      	mov	r5, r3
 8000f64:	f107 0408 	add.w	r4, r7, #8
 8000f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f70:	e885 0003 	stmia.w	r5, {r0, r1}
			.polarity = ADS1115_DEF_POL,
			.latch = ADS1115_DEF_LATCH,
			.que = ADS1115_COMP_DISABLE,
		},
	};
}
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	373c      	adds	r7, #60	; 0x3c
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bcb0      	pop	{r4, r5, r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	200000a0 	.word	0x200000a0

08000f84 <MX_USART1_UART_Init>:
		.pages = 256,
	};
}

void MX_USART1_UART_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <MX_USART1_UART_Init+0x50>)
 8000f8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000f90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000fbc:	f002 fb82 	bl	80036c4 <HAL_UART_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fc6:	f000 f897 	bl	80010f8 <Error_Handler>
  }
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000170 	.word	0x20000170
 8000fd4:	40013800 	.word	0x40013800

08000fd8 <MX_CAN_Init>:

void MX_CAN_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  hcan.Instance = CAN1;
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_CAN_Init+0x60>)
 8000fde:	4a17      	ldr	r2, [pc, #92]	; (800103c <MX_CAN_Init+0x64>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <MX_CAN_Init+0x60>)
 8000fe4:	2210      	movs	r2, #16
 8000fe6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <MX_CAN_Init+0x60>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <MX_CAN_Init+0x60>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <MX_CAN_Init+0x60>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_CAN_Init+0x60>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <MX_CAN_Init+0x60>)
 8001002:	2200      	movs	r2, #0
 8001004:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_CAN_Init+0x60>)
 8001008:	2200      	movs	r2, #0
 800100a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <MX_CAN_Init+0x60>)
 800100e:	2200      	movs	r2, #0
 8001010:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_CAN_Init+0x60>)
 8001014:	2200      	movs	r2, #0
 8001016:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <MX_CAN_Init+0x60>)
 800101a:	2200      	movs	r2, #0
 800101c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_CAN_Init+0x60>)
 8001020:	2200      	movs	r2, #0
 8001022:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <MX_CAN_Init+0x60>)
 8001026:	f000 fbc3 	bl	80017b0 <HAL_CAN_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8001030:	f000 f862 	bl	80010f8 <Error_Handler>
  }
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000148 	.word	0x20000148
 800103c:	40006400 	.word	0x40006400

08001040 <MX_I2C1_Init>:

void MX_I2C1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_I2C1_Init+0x50>)
 8001046:	4a13      	ldr	r2, [pc, #76]	; (8001094 <MX_I2C1_Init+0x54>)
 8001048:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_I2C1_Init+0x50>)
 800104c:	4a12      	ldr	r2, [pc, #72]	; (8001098 <MX_I2C1_Init+0x58>)
 800104e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_I2C1_Init+0x50>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_I2C1_Init+0x50>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_I2C1_Init+0x50>)
 800105e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001062:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <MX_I2C1_Init+0x50>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_I2C1_Init+0x50>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <MX_I2C1_Init+0x50>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_I2C1_Init+0x50>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800107c:	4804      	ldr	r0, [pc, #16]	; (8001090 <MX_I2C1_Init+0x50>)
 800107e:	f000 ff13 	bl	8001ea8 <HAL_I2C_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001088:	f000 f836 	bl	80010f8 <Error_Handler>
  }
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200000a0 	.word	0x200000a0
 8001094:	40005400 	.word	0x40005400
 8001098:	000186a0 	.word	0x000186a0

0800109c <MX_I2C2_Init>:

void MX_I2C2_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  hi2c2.Instance = I2C2;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_I2C2_Init+0x50>)
 80010a2:	4a13      	ldr	r2, [pc, #76]	; (80010f0 <MX_I2C2_Init+0x54>)
 80010a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_I2C2_Init+0x50>)
 80010a8:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <MX_I2C2_Init+0x58>)
 80010aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_I2C2_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_I2C2_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_I2C2_Init+0x50>)
 80010ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <MX_I2C2_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_I2C2_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <MX_I2C2_Init+0x50>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_I2C2_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_I2C2_Init+0x50>)
 80010da:	f000 fee5 	bl	8001ea8 <HAL_I2C_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010e4:	f000 f808 	bl	80010f8 <Error_Handler>
  }
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200000f4 	.word	0x200000f4
 80010f0:	40005800 	.word	0x40005800
 80010f4:	000186a0 	.word	0x000186a0

080010f8 <Error_Handler>:

void Error_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010fc:	b672      	cpsid	i
}
 80010fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001100:	e7fe      	b.n	8001100 <Error_Handler+0x8>
	...

08001104 <MX_GPIO_Init>:
  }
  /* USER CODE END Error_Handler_Debug */
}

void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001118:	4b24      	ldr	r3, [pc, #144]	; (80011ac <MX_GPIO_Init+0xa8>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4a23      	ldr	r2, [pc, #140]	; (80011ac <MX_GPIO_Init+0xa8>)
 800111e:	f043 0310 	orr.w	r3, r3, #16
 8001122:	6193      	str	r3, [r2, #24]
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <MX_GPIO_Init+0xa8>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f003 0310 	and.w	r3, r3, #16
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001130:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <MX_GPIO_Init+0xa8>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a1d      	ldr	r2, [pc, #116]	; (80011ac <MX_GPIO_Init+0xa8>)
 8001136:	f043 0320 	orr.w	r3, r3, #32
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <MX_GPIO_Init+0xa8>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <MX_GPIO_Init+0xa8>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a17      	ldr	r2, [pc, #92]	; (80011ac <MX_GPIO_Init+0xa8>)
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <MX_GPIO_Init+0xa8>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_GPIO_Init+0xa8>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a11      	ldr	r2, [pc, #68]	; (80011ac <MX_GPIO_Init+0xa8>)
 8001166:	f043 0304 	orr.w	r3, r3, #4
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_GPIO_Init+0xa8>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800117e:	480c      	ldr	r0, [pc, #48]	; (80011b0 <MX_GPIO_Init+0xac>)
 8001180:	f000 fe7a 	bl	8001e78 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001184:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001188:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118e:	2301      	movs	r3, #1
 8001190:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2302      	movs	r3, #2
 8001194:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001196:	f107 0310 	add.w	r3, r7, #16
 800119a:	4619      	mov	r1, r3
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_GPIO_Init+0xac>)
 800119e:	f000 fce7 	bl	8001b70 <HAL_GPIO_Init>
}
 80011a2:	bf00      	nop
 80011a4:	3720      	adds	r7, #32
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40011000 	.word	0x40011000

080011b4 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b090      	sub	sp, #64	; 0x40
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 0318 	add.w	r3, r7, #24
 80011be:	2228      	movs	r2, #40	; 0x28
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f002 fc60 	bl	8003a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d6:	2301      	movs	r3, #1
 80011d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e4:	2301      	movs	r3, #1
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e8:	2302      	movs	r3, #2
 80011ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f8:	f107 0318 	add.w	r3, r7, #24
 80011fc:	4618      	mov	r0, r3
 80011fe:	f001 fe21 	bl	8002e44 <HAL_RCC_OscConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001208:	f7ff ff76 	bl	80010f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120c:	230f      	movs	r3, #15
 800120e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001210:	2302      	movs	r3, #2
 8001212:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800121c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2102      	movs	r1, #2
 8001226:	4618      	mov	r0, r3
 8001228:	f002 f88c 	bl	8003344 <HAL_RCC_ClockConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001232:	f7ff ff61 	bl	80010f8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001236:	f002 f96f 	bl	8003518 <HAL_RCC_EnableCSS>
}
 800123a:	bf00      	nop
 800123c:	3740      	adds	r7, #64	; 0x40
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b08d      	sub	sp, #52	; 0x34
 8001248:	af00      	add	r7, sp, #0
  uint8_t buf[20];
  HAL_Init();
 800124a:	f000 fa2b 	bl	80016a4 <HAL_Init>

  SystemClock_Config();
 800124e:	f7ff ffb1 	bl	80011b4 <SystemClock_Config>

  MX_GPIO_Init();
 8001252:	f7ff ff57 	bl	8001104 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001256:	f7ff ff21 	bl	800109c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800125a:	f7ff fe93 	bl	8000f84 <MX_USART1_UART_Init>
  MX_CAN_Init();
 800125e:	f7ff febb 	bl	8000fd8 <MX_CAN_Init>
  MX_I2C1_Init();
 8001262:	f7ff feed 	bl	8001040 <MX_I2C1_Init>

  float temp_c = 0;
 8001266:	f04f 0300 	mov.w	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
  lm60_cfg_t lm60 = hw_conf_lm60();
 800126c:	463b      	mov	r3, r7
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fe5a 	bl	8000f28 <hw_conf_lm60>

  while (1){
	  lm60_get_temp(&lm60, &temp_c);
 8001274:	f107 0218 	add.w	r2, r7, #24
 8001278:	463b      	mov	r3, r7
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fe25 	bl	8000ecc <lm60_get_temp>
      temp_c *= 100;
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	491a      	ldr	r1, [pc, #104]	; (80012f0 <main+0xac>)
 8001286:	4618      	mov	r0, r3
 8001288:	f7fe ff68 	bl	800015c <__aeabi_fmul>
 800128c:	4603      	mov	r3, r0
 800128e:	61bb      	str	r3, [r7, #24]
      sprintf((char*)buf, "%u.%u C\r\n",  ((unsigned int)temp_c / 100),
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fc54 	bl	8000b40 <__aeabi_f2uiz>
 8001298:	4603      	mov	r3, r0
 800129a:	4a16      	ldr	r2, [pc, #88]	; (80012f4 <main+0xb0>)
 800129c:	fba2 2303 	umull	r2, r3, r2, r3
 80012a0:	095c      	lsrs	r4, r3, #5
            ((unsigned int)temp_c % 100));
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fc4b 	bl	8000b40 <__aeabi_f2uiz>
 80012aa:	4602      	mov	r2, r0
      sprintf((char*)buf, "%u.%u C\r\n",  ((unsigned int)temp_c / 100),
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <main+0xb0>)
 80012ae:	fba3 1302 	umull	r1, r3, r3, r2
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	2164      	movs	r1, #100	; 0x64
 80012b6:	fb01 f303 	mul.w	r3, r1, r3
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	f107 001c 	add.w	r0, r7, #28
 80012c0:	4622      	mov	r2, r4
 80012c2:	490d      	ldr	r1, [pc, #52]	; (80012f8 <main+0xb4>)
 80012c4:	f002 fbe8 	bl	8003a98 <siprintf>
      HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7fe ff3d 	bl	800014c <strlen>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	f107 011c 	add.w	r1, r7, #28
 80012da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012de:	4807      	ldr	r0, [pc, #28]	; (80012fc <main+0xb8>)
 80012e0:	f002 fa3d 	bl	800375e <HAL_UART_Transmit>
	 HAL_Delay(1000);
 80012e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012e8:	f000 fa3e 	bl	8001768 <HAL_Delay>
	  lm60_get_temp(&lm60, &temp_c);
 80012ec:	e7c2      	b.n	8001274 <main+0x30>
 80012ee:	bf00      	nop
 80012f0:	42c80000 	.word	0x42c80000
 80012f4:	51eb851f 	.word	0x51eb851f
 80012f8:	08004324 	.word	0x08004324
 80012fc:	20000170 	.word	0x20000170

08001300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_MspInit+0x5c>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	4a14      	ldr	r2, [pc, #80]	; (800135c <HAL_MspInit+0x5c>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6193      	str	r3, [r2, #24]
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_MspInit+0x5c>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_MspInit+0x5c>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	4a0e      	ldr	r2, [pc, #56]	; (800135c <HAL_MspInit+0x5c>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001328:	61d3      	str	r3, [r2, #28]
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <HAL_MspInit+0x5c>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_MspInit+0x60>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_MspInit+0x60>)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	40021000 	.word	0x40021000
 8001360:	40010000 	.word	0x40010000

08001364 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a1c      	ldr	r2, [pc, #112]	; (80013f0 <HAL_CAN_MspInit+0x8c>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d131      	bne.n	80013e8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_CAN_MspInit+0x90>)
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	4a1a      	ldr	r2, [pc, #104]	; (80013f4 <HAL_CAN_MspInit+0x90>)
 800138a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800138e:	61d3      	str	r3, [r2, #28]
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <HAL_CAN_MspInit+0x90>)
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_CAN_MspInit+0x90>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <HAL_CAN_MspInit+0x90>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_CAN_MspInit+0x90>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	4619      	mov	r1, r3
 80013c8:	480b      	ldr	r0, [pc, #44]	; (80013f8 <HAL_CAN_MspInit+0x94>)
 80013ca:	f000 fbd1 	bl	8001b70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	4619      	mov	r1, r3
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <HAL_CAN_MspInit+0x94>)
 80013e4:	f000 fbc4 	bl	8001b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80013e8:	bf00      	nop
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40006400 	.word	0x40006400
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010800 	.word	0x40010800

080013fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	; 0x30
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a32      	ldr	r2, [pc, #200]	; (80014e0 <HAL_I2C_MspInit+0xe4>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d133      	bne.n	8001484 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141c:	4b31      	ldr	r3, [pc, #196]	; (80014e4 <HAL_I2C_MspInit+0xe8>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a30      	ldr	r2, [pc, #192]	; (80014e4 <HAL_I2C_MspInit+0xe8>)
 8001422:	f043 0308 	orr.w	r3, r3, #8
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <HAL_I2C_MspInit+0xe8>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001434:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800143a:	2312      	movs	r3, #18
 800143c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	4827      	ldr	r0, [pc, #156]	; (80014e8 <HAL_I2C_MspInit+0xec>)
 800144a:	f000 fb91 	bl	8001b70 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800144e:	4b27      	ldr	r3, [pc, #156]	; (80014ec <HAL_I2C_MspInit+0xf0>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001456:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800145c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001464:	4a21      	ldr	r2, [pc, #132]	; (80014ec <HAL_I2C_MspInit+0xf0>)
 8001466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001468:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800146a:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <HAL_I2C_MspInit+0xe8>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <HAL_I2C_MspInit+0xe8>)
 8001470:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001474:	61d3      	str	r3, [r2, #28]
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <HAL_I2C_MspInit+0xe8>)
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001482:	e029      	b.n	80014d8 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a19      	ldr	r2, [pc, #100]	; (80014f0 <HAL_I2C_MspInit+0xf4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d124      	bne.n	80014d8 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_I2C_MspInit+0xe8>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <HAL_I2C_MspInit+0xe8>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	6193      	str	r3, [r2, #24]
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_I2C_MspInit+0xe8>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ac:	2312      	movs	r3, #18
 80014ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	4619      	mov	r1, r3
 80014ba:	480b      	ldr	r0, [pc, #44]	; (80014e8 <HAL_I2C_MspInit+0xec>)
 80014bc:	f000 fb58 	bl	8001b70 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_I2C_MspInit+0xe8>)
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_I2C_MspInit+0xe8>)
 80014c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014ca:	61d3      	str	r3, [r2, #28]
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_I2C_MspInit+0xe8>)
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
}
 80014d8:	bf00      	nop
 80014da:	3730      	adds	r7, #48	; 0x30
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40005400 	.word	0x40005400
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010c00 	.word	0x40010c00
 80014ec:	40010000 	.word	0x40010000
 80014f0:	40005800 	.word	0x40005800

080014f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a1c      	ldr	r2, [pc, #112]	; (8001580 <HAL_UART_MspInit+0x8c>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d131      	bne.n	8001578 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_UART_MspInit+0x90>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a1a      	ldr	r2, [pc, #104]	; (8001584 <HAL_UART_MspInit+0x90>)
 800151a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_UART_MspInit+0x90>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <HAL_UART_MspInit+0x90>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a14      	ldr	r2, [pc, #80]	; (8001584 <HAL_UART_MspInit+0x90>)
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	6193      	str	r3, [r2, #24]
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_UART_MspInit+0x90>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001548:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 0310 	add.w	r3, r7, #16
 8001556:	4619      	mov	r1, r3
 8001558:	480b      	ldr	r0, [pc, #44]	; (8001588 <HAL_UART_MspInit+0x94>)
 800155a:	f000 fb09 	bl	8001b70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800155e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001562:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	4619      	mov	r1, r3
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <HAL_UART_MspInit+0x94>)
 8001574:	f000 fafc 	bl	8001b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001578:	bf00      	nop
 800157a:	3720      	adds	r7, #32
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40013800 	.word	0x40013800
 8001584:	40021000 	.word	0x40021000
 8001588:	40010800 	.word	0x40010800

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001590:	f002 f860 	bl	8003654 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <NMI_Handler+0x8>

08001596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <HardFault_Handler+0x4>

0800159c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <MemManage_Handler+0x4>

080015a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <BusFault_Handler+0x4>

080015a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <UsageFault_Handler+0x4>

080015ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr

080015ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr

080015c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr

080015d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d6:	f000 f8ab 	bl	8001730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e8:	4a14      	ldr	r2, [pc, #80]	; (800163c <_sbrk+0x5c>)
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <_sbrk+0x60>)
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f4:	4b13      	ldr	r3, [pc, #76]	; (8001644 <_sbrk+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <_sbrk+0x64>)
 80015fe:	4a12      	ldr	r2, [pc, #72]	; (8001648 <_sbrk+0x68>)
 8001600:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	429a      	cmp	r2, r3
 800160e:	d207      	bcs.n	8001620 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001610:	f002 fa10 	bl	8003a34 <__errno>
 8001614:	4603      	mov	r3, r0
 8001616:	220c      	movs	r2, #12
 8001618:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800161a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800161e:	e009      	b.n	8001634 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <_sbrk+0x64>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001626:	4b07      	ldr	r3, [pc, #28]	; (8001644 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <_sbrk+0x64>)
 8001630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001632:	68fb      	ldr	r3, [r7, #12]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20005000 	.word	0x20005000
 8001640:	00000400 	.word	0x00000400
 8001644:	20000094 	.word	0x20000094
 8001648:	200001c8 	.word	0x200001c8

0800164c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001658:	480c      	ldr	r0, [pc, #48]	; (800168c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800165a:	490d      	ldr	r1, [pc, #52]	; (8001690 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800165c:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001670:	4c0a      	ldr	r4, [pc, #40]	; (800169c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800167e:	f7ff ffe5 	bl	800164c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001682:	f002 f9dd 	bl	8003a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001686:	f7ff fddd 	bl	8001244 <main>
  bx lr
 800168a:	4770      	bx	lr
  ldr r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001690:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001694:	08004394 	.word	0x08004394
  ldr r2, =_sbss
 8001698:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800169c:	200001c8 	.word	0x200001c8

080016a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC1_2_IRQHandler>
	...

080016a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_Init+0x28>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a07      	ldr	r2, [pc, #28]	; (80016cc <HAL_Init+0x28>)
 80016ae:	f043 0310 	orr.w	r3, r3, #16
 80016b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b4:	2003      	movs	r0, #3
 80016b6:	f000 fa27 	bl	8001b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ba:	200f      	movs	r0, #15
 80016bc:	f000 f808 	bl	80016d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c0:	f7ff fe1e 	bl	8001300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40022000 	.word	0x40022000

080016d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_InitTick+0x54>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_InitTick+0x58>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 fa31 	bl	8001b56 <HAL_SYSTICK_Config>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00e      	b.n	800171c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b0f      	cmp	r3, #15
 8001702:	d80a      	bhi.n	800171a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001704:	2200      	movs	r2, #0
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800170c:	f000 fa07 	bl	8001b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001710:	4a06      	ldr	r2, [pc, #24]	; (800172c <HAL_InitTick+0x5c>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	e000      	b.n	800171c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
}
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000004 	.word	0x20000004
 8001728:	2000000c 	.word	0x2000000c
 800172c:	20000008 	.word	0x20000008

08001730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <HAL_IncTick+0x1c>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_IncTick+0x20>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	4a03      	ldr	r2, [pc, #12]	; (8001750 <HAL_IncTick+0x20>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	2000000c 	.word	0x2000000c
 8001750:	200001b4 	.word	0x200001b4

08001754 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return uwTick;
 8001758:	4b02      	ldr	r3, [pc, #8]	; (8001764 <HAL_GetTick+0x10>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	200001b4 	.word	0x200001b4

08001768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001770:	f7ff fff0 	bl	8001754 <HAL_GetTick>
 8001774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001780:	d005      	beq.n	800178e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_Delay+0x44>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800178e:	bf00      	nop
 8001790:	f7ff ffe0 	bl	8001754 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	429a      	cmp	r2, r3
 800179e:	d8f7      	bhi.n	8001790 <HAL_Delay+0x28>
  {
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000000c 	.word	0x2000000c

080017b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e0ed      	b.n	800199e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d102      	bne.n	80017d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff fdc8 	bl	8001364 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0201 	orr.w	r2, r2, #1
 80017e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017e4:	f7ff ffb6 	bl	8001754 <HAL_GetTick>
 80017e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017ea:	e012      	b.n	8001812 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017ec:	f7ff ffb2 	bl	8001754 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b0a      	cmp	r3, #10
 80017f8:	d90b      	bls.n	8001812 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2205      	movs	r2, #5
 800180a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e0c5      	b.n	800199e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0e5      	beq.n	80017ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0202 	bic.w	r2, r2, #2
 800182e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001830:	f7ff ff90 	bl	8001754 <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001836:	e012      	b.n	800185e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001838:	f7ff ff8c 	bl	8001754 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b0a      	cmp	r3, #10
 8001844:	d90b      	bls.n	800185e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2205      	movs	r2, #5
 8001856:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e09f      	b.n	800199e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1e5      	bne.n	8001838 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7e1b      	ldrb	r3, [r3, #24]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d108      	bne.n	8001886 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	e007      	b.n	8001896 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001894:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	7e5b      	ldrb	r3, [r3, #25]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d108      	bne.n	80018b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	e007      	b.n	80018c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	7e9b      	ldrb	r3, [r3, #26]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d108      	bne.n	80018da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0220 	orr.w	r2, r2, #32
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	e007      	b.n	80018ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0220 	bic.w	r2, r2, #32
 80018e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7edb      	ldrb	r3, [r3, #27]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d108      	bne.n	8001904 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0210 	bic.w	r2, r2, #16
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e007      	b.n	8001914 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0210 	orr.w	r2, r2, #16
 8001912:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7f1b      	ldrb	r3, [r3, #28]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d108      	bne.n	800192e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0208 	orr.w	r2, r2, #8
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	e007      	b.n	800193e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0208 	bic.w	r2, r2, #8
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	7f5b      	ldrb	r3, [r3, #29]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d108      	bne.n	8001958 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f042 0204 	orr.w	r2, r2, #4
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	e007      	b.n	8001968 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0204 	bic.w	r2, r2, #4
 8001966:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	ea42 0103 	orr.w	r1, r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	1e5a      	subs	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <__NVIC_SetPriorityGrouping+0x44>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c4:	4013      	ands	r3, r2
 80019c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019da:	4a04      	ldr	r2, [pc, #16]	; (80019ec <__NVIC_SetPriorityGrouping+0x44>)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	60d3      	str	r3, [r2, #12]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <__NVIC_GetPriorityGrouping+0x18>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	0a1b      	lsrs	r3, r3, #8
 80019fa:	f003 0307 	and.w	r3, r3, #7
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	6039      	str	r1, [r7, #0]
 8001a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	db0a      	blt.n	8001a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	490c      	ldr	r1, [pc, #48]	; (8001a58 <__NVIC_SetPriority+0x4c>)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	0112      	lsls	r2, r2, #4
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	440b      	add	r3, r1
 8001a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a34:	e00a      	b.n	8001a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4908      	ldr	r1, [pc, #32]	; (8001a5c <__NVIC_SetPriority+0x50>)
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	3b04      	subs	r3, #4
 8001a44:	0112      	lsls	r2, r2, #4
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	440b      	add	r3, r1
 8001a4a:	761a      	strb	r2, [r3, #24]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000e100 	.word	0xe000e100
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	; 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f1c3 0307 	rsb	r3, r3, #7
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	bf28      	it	cs
 8001a7e:	2304      	movcs	r3, #4
 8001a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3304      	adds	r3, #4
 8001a86:	2b06      	cmp	r3, #6
 8001a88:	d902      	bls.n	8001a90 <NVIC_EncodePriority+0x30>
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3b03      	subs	r3, #3
 8001a8e:	e000      	b.n	8001a92 <NVIC_EncodePriority+0x32>
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	43d9      	mvns	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	4313      	orrs	r3, r2
         );
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3724      	adds	r7, #36	; 0x24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad4:	d301      	bcc.n	8001ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00f      	b.n	8001afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ada:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <SysTick_Config+0x40>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ae8:	f7ff ff90 	bl	8001a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <SysTick_Config+0x40>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af2:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <SysTick_Config+0x40>)
 8001af4:	2207      	movs	r2, #7
 8001af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	e000e010 	.word	0xe000e010

08001b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ff49 	bl	80019a8 <__NVIC_SetPriorityGrouping>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b30:	f7ff ff5e 	bl	80019f0 <__NVIC_GetPriorityGrouping>
 8001b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	6978      	ldr	r0, [r7, #20]
 8001b3c:	f7ff ff90 	bl	8001a60 <NVIC_EncodePriority>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff5f 	bl	8001a0c <__NVIC_SetPriority>
}
 8001b4e:	bf00      	nop
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffb0 	bl	8001ac4 <SysTick_Config>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b08b      	sub	sp, #44	; 0x2c
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b82:	e169      	b.n	8001e58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b84:	2201      	movs	r2, #1
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	f040 8158 	bne.w	8001e52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4a9a      	ldr	r2, [pc, #616]	; (8001e10 <HAL_GPIO_Init+0x2a0>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d05e      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bac:	4a98      	ldr	r2, [pc, #608]	; (8001e10 <HAL_GPIO_Init+0x2a0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d875      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bb2:	4a98      	ldr	r2, [pc, #608]	; (8001e14 <HAL_GPIO_Init+0x2a4>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d058      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bb8:	4a96      	ldr	r2, [pc, #600]	; (8001e14 <HAL_GPIO_Init+0x2a4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d86f      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bbe:	4a96      	ldr	r2, [pc, #600]	; (8001e18 <HAL_GPIO_Init+0x2a8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d052      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bc4:	4a94      	ldr	r2, [pc, #592]	; (8001e18 <HAL_GPIO_Init+0x2a8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d869      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bca:	4a94      	ldr	r2, [pc, #592]	; (8001e1c <HAL_GPIO_Init+0x2ac>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d04c      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bd0:	4a92      	ldr	r2, [pc, #584]	; (8001e1c <HAL_GPIO_Init+0x2ac>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d863      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bd6:	4a92      	ldr	r2, [pc, #584]	; (8001e20 <HAL_GPIO_Init+0x2b0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d046      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bdc:	4a90      	ldr	r2, [pc, #576]	; (8001e20 <HAL_GPIO_Init+0x2b0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d85d      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001be2:	2b12      	cmp	r3, #18
 8001be4:	d82a      	bhi.n	8001c3c <HAL_GPIO_Init+0xcc>
 8001be6:	2b12      	cmp	r3, #18
 8001be8:	d859      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bea:	a201      	add	r2, pc, #4	; (adr r2, 8001bf0 <HAL_GPIO_Init+0x80>)
 8001bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf0:	08001c6b 	.word	0x08001c6b
 8001bf4:	08001c45 	.word	0x08001c45
 8001bf8:	08001c57 	.word	0x08001c57
 8001bfc:	08001c99 	.word	0x08001c99
 8001c00:	08001c9f 	.word	0x08001c9f
 8001c04:	08001c9f 	.word	0x08001c9f
 8001c08:	08001c9f 	.word	0x08001c9f
 8001c0c:	08001c9f 	.word	0x08001c9f
 8001c10:	08001c9f 	.word	0x08001c9f
 8001c14:	08001c9f 	.word	0x08001c9f
 8001c18:	08001c9f 	.word	0x08001c9f
 8001c1c:	08001c9f 	.word	0x08001c9f
 8001c20:	08001c9f 	.word	0x08001c9f
 8001c24:	08001c9f 	.word	0x08001c9f
 8001c28:	08001c9f 	.word	0x08001c9f
 8001c2c:	08001c9f 	.word	0x08001c9f
 8001c30:	08001c9f 	.word	0x08001c9f
 8001c34:	08001c4d 	.word	0x08001c4d
 8001c38:	08001c61 	.word	0x08001c61
 8001c3c:	4a79      	ldr	r2, [pc, #484]	; (8001e24 <HAL_GPIO_Init+0x2b4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d013      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c42:	e02c      	b.n	8001c9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	623b      	str	r3, [r7, #32]
          break;
 8001c4a:	e029      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	3304      	adds	r3, #4
 8001c52:	623b      	str	r3, [r7, #32]
          break;
 8001c54:	e024      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	3308      	adds	r3, #8
 8001c5c:	623b      	str	r3, [r7, #32]
          break;
 8001c5e:	e01f      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	330c      	adds	r3, #12
 8001c66:	623b      	str	r3, [r7, #32]
          break;
 8001c68:	e01a      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c72:	2304      	movs	r3, #4
 8001c74:	623b      	str	r3, [r7, #32]
          break;
 8001c76:	e013      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d105      	bne.n	8001c8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c80:	2308      	movs	r3, #8
 8001c82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69fa      	ldr	r2, [r7, #28]
 8001c88:	611a      	str	r2, [r3, #16]
          break;
 8001c8a:	e009      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c8c:	2308      	movs	r3, #8
 8001c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	615a      	str	r2, [r3, #20]
          break;
 8001c96:	e003      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
          break;
 8001c9c:	e000      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          break;
 8001c9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2bff      	cmp	r3, #255	; 0xff
 8001ca4:	d801      	bhi.n	8001caa <HAL_GPIO_Init+0x13a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	e001      	b.n	8001cae <HAL_GPIO_Init+0x13e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3304      	adds	r3, #4
 8001cae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2bff      	cmp	r3, #255	; 0xff
 8001cb4:	d802      	bhi.n	8001cbc <HAL_GPIO_Init+0x14c>
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	e002      	b.n	8001cc2 <HAL_GPIO_Init+0x152>
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	3b08      	subs	r3, #8
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	210f      	movs	r1, #15
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	6a39      	ldr	r1, [r7, #32]
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80b1 	beq.w	8001e52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf0:	4b4d      	ldr	r3, [pc, #308]	; (8001e28 <HAL_GPIO_Init+0x2b8>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a4c      	ldr	r2, [pc, #304]	; (8001e28 <HAL_GPIO_Init+0x2b8>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b4a      	ldr	r3, [pc, #296]	; (8001e28 <HAL_GPIO_Init+0x2b8>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d08:	4a48      	ldr	r2, [pc, #288]	; (8001e2c <HAL_GPIO_Init+0x2bc>)
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	3302      	adds	r3, #2
 8001d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a40      	ldr	r2, [pc, #256]	; (8001e30 <HAL_GPIO_Init+0x2c0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d013      	beq.n	8001d5c <HAL_GPIO_Init+0x1ec>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a3f      	ldr	r2, [pc, #252]	; (8001e34 <HAL_GPIO_Init+0x2c4>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d00d      	beq.n	8001d58 <HAL_GPIO_Init+0x1e8>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a3e      	ldr	r2, [pc, #248]	; (8001e38 <HAL_GPIO_Init+0x2c8>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d007      	beq.n	8001d54 <HAL_GPIO_Init+0x1e4>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a3d      	ldr	r2, [pc, #244]	; (8001e3c <HAL_GPIO_Init+0x2cc>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d101      	bne.n	8001d50 <HAL_GPIO_Init+0x1e0>
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e006      	b.n	8001d5e <HAL_GPIO_Init+0x1ee>
 8001d50:	2304      	movs	r3, #4
 8001d52:	e004      	b.n	8001d5e <HAL_GPIO_Init+0x1ee>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e002      	b.n	8001d5e <HAL_GPIO_Init+0x1ee>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <HAL_GPIO_Init+0x1ee>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d60:	f002 0203 	and.w	r2, r2, #3
 8001d64:	0092      	lsls	r2, r2, #2
 8001d66:	4093      	lsls	r3, r2
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d6e:	492f      	ldr	r1, [pc, #188]	; (8001e2c <HAL_GPIO_Init+0x2bc>)
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	089b      	lsrs	r3, r3, #2
 8001d74:	3302      	adds	r3, #2
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d006      	beq.n	8001d96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d88:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	492c      	ldr	r1, [pc, #176]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	600b      	str	r3, [r1, #0]
 8001d94:	e006      	b.n	8001da4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d96:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	4928      	ldr	r1, [pc, #160]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d006      	beq.n	8001dbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001db0:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	4922      	ldr	r1, [pc, #136]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
 8001dbc:	e006      	b.n	8001dcc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	491e      	ldr	r1, [pc, #120]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d006      	beq.n	8001de6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	4918      	ldr	r1, [pc, #96]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	608b      	str	r3, [r1, #8]
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	4914      	ldr	r1, [pc, #80]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d021      	beq.n	8001e44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	490e      	ldr	r1, [pc, #56]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60cb      	str	r3, [r1, #12]
 8001e0c:	e021      	b.n	8001e52 <HAL_GPIO_Init+0x2e2>
 8001e0e:	bf00      	nop
 8001e10:	10320000 	.word	0x10320000
 8001e14:	10310000 	.word	0x10310000
 8001e18:	10220000 	.word	0x10220000
 8001e1c:	10210000 	.word	0x10210000
 8001e20:	10120000 	.word	0x10120000
 8001e24:	10110000 	.word	0x10110000
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	40010800 	.word	0x40010800
 8001e34:	40010c00 	.word	0x40010c00
 8001e38:	40011000 	.word	0x40011000
 8001e3c:	40011400 	.word	0x40011400
 8001e40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <HAL_GPIO_Init+0x304>)
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	4909      	ldr	r1, [pc, #36]	; (8001e74 <HAL_GPIO_Init+0x304>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	3301      	adds	r3, #1
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f47f ae8e 	bne.w	8001b84 <HAL_GPIO_Init+0x14>
  }
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	372c      	adds	r7, #44	; 0x2c
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	40010400 	.word	0x40010400

08001e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	807b      	strh	r3, [r7, #2]
 8001e84:	4613      	mov	r3, r2
 8001e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e88:	787b      	ldrb	r3, [r7, #1]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e8e:	887a      	ldrh	r2, [r7, #2]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e94:	e003      	b.n	8001e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e96:	887b      	ldrh	r3, [r7, #2]
 8001e98:	041a      	lsls	r2, r3, #16
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	611a      	str	r2, [r3, #16]
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e12b      	b.n	8002112 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d106      	bne.n	8001ed4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fa94 	bl	80013fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2224      	movs	r2, #36	; 0x24
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001efa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f0c:	f001 fb7a 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8001f10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	4a81      	ldr	r2, [pc, #516]	; (800211c <HAL_I2C_Init+0x274>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d807      	bhi.n	8001f2c <HAL_I2C_Init+0x84>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4a80      	ldr	r2, [pc, #512]	; (8002120 <HAL_I2C_Init+0x278>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	bf94      	ite	ls
 8001f24:	2301      	movls	r3, #1
 8001f26:	2300      	movhi	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	e006      	b.n	8001f3a <HAL_I2C_Init+0x92>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4a7d      	ldr	r2, [pc, #500]	; (8002124 <HAL_I2C_Init+0x27c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	bf94      	ite	ls
 8001f34:	2301      	movls	r3, #1
 8001f36:	2300      	movhi	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e0e7      	b.n	8002112 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4a78      	ldr	r2, [pc, #480]	; (8002128 <HAL_I2C_Init+0x280>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	0c9b      	lsrs	r3, r3, #18
 8001f4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	4a6a      	ldr	r2, [pc, #424]	; (800211c <HAL_I2C_Init+0x274>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d802      	bhi.n	8001f7c <HAL_I2C_Init+0xd4>
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	e009      	b.n	8001f90 <HAL_I2C_Init+0xe8>
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f82:	fb02 f303 	mul.w	r3, r2, r3
 8001f86:	4a69      	ldr	r2, [pc, #420]	; (800212c <HAL_I2C_Init+0x284>)
 8001f88:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8c:	099b      	lsrs	r3, r3, #6
 8001f8e:	3301      	adds	r3, #1
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	430b      	orrs	r3, r1
 8001f96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fa2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	495c      	ldr	r1, [pc, #368]	; (800211c <HAL_I2C_Init+0x274>)
 8001fac:	428b      	cmp	r3, r1
 8001fae:	d819      	bhi.n	8001fe4 <HAL_I2C_Init+0x13c>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1e59      	subs	r1, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fbe:	1c59      	adds	r1, r3, #1
 8001fc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fc4:	400b      	ands	r3, r1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <HAL_I2C_Init+0x138>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1e59      	subs	r1, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fd8:	3301      	adds	r3, #1
 8001fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fde:	e051      	b.n	8002084 <HAL_I2C_Init+0x1dc>
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	e04f      	b.n	8002084 <HAL_I2C_Init+0x1dc>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d111      	bne.n	8002010 <HAL_I2C_Init+0x168>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1e58      	subs	r0, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	440b      	add	r3, r1
 8001ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	e012      	b.n	8002036 <HAL_I2C_Init+0x18e>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1e58      	subs	r0, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6859      	ldr	r1, [r3, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	0099      	lsls	r1, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	fbb0 f3f3 	udiv	r3, r0, r3
 8002026:	3301      	adds	r3, #1
 8002028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800202c:	2b00      	cmp	r3, #0
 800202e:	bf0c      	ite	eq
 8002030:	2301      	moveq	r3, #1
 8002032:	2300      	movne	r3, #0
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_I2C_Init+0x196>
 800203a:	2301      	movs	r3, #1
 800203c:	e022      	b.n	8002084 <HAL_I2C_Init+0x1dc>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10e      	bne.n	8002064 <HAL_I2C_Init+0x1bc>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1e58      	subs	r0, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6859      	ldr	r1, [r3, #4]
 800204e:	460b      	mov	r3, r1
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	440b      	add	r3, r1
 8002054:	fbb0 f3f3 	udiv	r3, r0, r3
 8002058:	3301      	adds	r3, #1
 800205a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800205e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002062:	e00f      	b.n	8002084 <HAL_I2C_Init+0x1dc>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1e58      	subs	r0, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6859      	ldr	r1, [r3, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	0099      	lsls	r1, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	fbb0 f3f3 	udiv	r3, r0, r3
 800207a:	3301      	adds	r3, #1
 800207c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002080:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	6809      	ldr	r1, [r1, #0]
 8002088:	4313      	orrs	r3, r2
 800208a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69da      	ldr	r2, [r3, #28]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6911      	ldr	r1, [r2, #16]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68d2      	ldr	r2, [r2, #12]
 80020be:	4311      	orrs	r1, r2
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	430b      	orrs	r3, r1
 80020c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695a      	ldr	r2, [r3, #20]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2220      	movs	r2, #32
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	000186a0 	.word	0x000186a0
 8002120:	001e847f 	.word	0x001e847f
 8002124:	003d08ff 	.word	0x003d08ff
 8002128:	431bde83 	.word	0x431bde83
 800212c:	10624dd3 	.word	0x10624dd3

08002130 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af02      	add	r7, sp, #8
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	461a      	mov	r2, r3
 800213c:	460b      	mov	r3, r1
 800213e:	817b      	strh	r3, [r7, #10]
 8002140:	4613      	mov	r3, r2
 8002142:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002144:	f7ff fb06 	bl	8001754 <HAL_GetTick>
 8002148:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b20      	cmp	r3, #32
 8002154:	f040 80e0 	bne.w	8002318 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2319      	movs	r3, #25
 800215e:	2201      	movs	r2, #1
 8002160:	4970      	ldr	r1, [pc, #448]	; (8002324 <HAL_I2C_Master_Transmit+0x1f4>)
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 fc92 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800216e:	2302      	movs	r3, #2
 8002170:	e0d3      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <HAL_I2C_Master_Transmit+0x50>
 800217c:	2302      	movs	r3, #2
 800217e:	e0cc      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b01      	cmp	r3, #1
 8002194:	d007      	beq.n	80021a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0201 	orr.w	r2, r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2221      	movs	r2, #33	; 0x21
 80021ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2210      	movs	r2, #16
 80021c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	893a      	ldrh	r2, [r7, #8]
 80021d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4a50      	ldr	r2, [pc, #320]	; (8002328 <HAL_I2C_Master_Transmit+0x1f8>)
 80021e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021e8:	8979      	ldrh	r1, [r7, #10]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	6a3a      	ldr	r2, [r7, #32]
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fafc 	bl	80027ec <I2C_MasterRequestWrite>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e08d      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002214:	e066      	b.n	80022e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	6a39      	ldr	r1, [r7, #32]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fd0c 	bl	8002c38 <I2C_WaitOnTXEFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00d      	beq.n	8002242 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	2b04      	cmp	r3, #4
 800222c:	d107      	bne.n	800223e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e06b      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29b      	uxth	r3, r3
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b04      	cmp	r3, #4
 800227e:	d11b      	bne.n	80022b8 <HAL_I2C_Master_Transmit+0x188>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002284:	2b00      	cmp	r3, #0
 8002286:	d017      	beq.n	80022b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	6a39      	ldr	r1, [r7, #32]
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 fcfc 	bl	8002cba <I2C_WaitOnBTFFlagUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00d      	beq.n	80022e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d107      	bne.n	80022e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e01a      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d194      	bne.n	8002216 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	e000      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002318:	2302      	movs	r3, #2
  }
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	00100002 	.word	0x00100002
 8002328:	ffff0000 	.word	0xffff0000

0800232c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08c      	sub	sp, #48	; 0x30
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	461a      	mov	r2, r3
 8002338:	460b      	mov	r3, r1
 800233a:	817b      	strh	r3, [r7, #10]
 800233c:	4613      	mov	r3, r2
 800233e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002344:	f7ff fa06 	bl	8001754 <HAL_GetTick>
 8002348:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b20      	cmp	r3, #32
 8002354:	f040 823f 	bne.w	80027d6 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	2319      	movs	r3, #25
 800235e:	2201      	movs	r2, #1
 8002360:	497f      	ldr	r1, [pc, #508]	; (8002560 <HAL_I2C_Master_Receive+0x234>)
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 fb92 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800236e:	2302      	movs	r3, #2
 8002370:	e232      	b.n	80027d8 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_I2C_Master_Receive+0x54>
 800237c:	2302      	movs	r3, #2
 800237e:	e22b      	b.n	80027d8 <HAL_I2C_Master_Receive+0x4ac>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b01      	cmp	r3, #1
 8002394:	d007      	beq.n	80023a6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0201 	orr.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2222      	movs	r2, #34	; 0x22
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2210      	movs	r2, #16
 80023c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	893a      	ldrh	r2, [r7, #8]
 80023d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4a5f      	ldr	r2, [pc, #380]	; (8002564 <HAL_I2C_Master_Receive+0x238>)
 80023e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023e8:	8979      	ldrh	r1, [r7, #10]
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 fa7e 	bl	80028f0 <I2C_MasterRequestRead>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e1ec      	b.n	80027d8 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002402:	2b00      	cmp	r3, #0
 8002404:	d113      	bne.n	800242e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e1c0      	b.n	80027b0 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002432:	2b01      	cmp	r3, #1
 8002434:	d11e      	bne.n	8002474 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002444:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002446:	b672      	cpsid	i
}
 8002448:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	61bb      	str	r3, [r7, #24]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002470:	b662      	cpsie	i
}
 8002472:	e035      	b.n	80024e0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002478:	2b02      	cmp	r3, #2
 800247a:	d11e      	bne.n	80024ba <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800248a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800248c:	b672      	cpsid	i
}
 800248e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024b6:	b662      	cpsie	i
}
 80024b8:	e012      	b.n	80024e0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80024e0:	e166      	b.n	80027b0 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	f200 811f 	bhi.w	800272a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d123      	bne.n	800253c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 fc1f 	bl	8002d3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e167      	b.n	80027d8 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002530:	b29b      	uxth	r3, r3
 8002532:	3b01      	subs	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	855a      	strh	r2, [r3, #42]	; 0x2a
 800253a:	e139      	b.n	80027b0 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002540:	2b02      	cmp	r3, #2
 8002542:	d152      	bne.n	80025ea <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254a:	2200      	movs	r2, #0
 800254c:	4906      	ldr	r1, [pc, #24]	; (8002568 <HAL_I2C_Master_Receive+0x23c>)
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 fa9c 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d008      	beq.n	800256c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e13c      	b.n	80027d8 <HAL_I2C_Master_Receive+0x4ac>
 800255e:	bf00      	nop
 8002560:	00100002 	.word	0x00100002
 8002564:	ffff0000 	.word	0xffff0000
 8002568:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800256c:	b672      	cpsid	i
}
 800256e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800257e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80025b2:	b662      	cpsie	i
}
 80025b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025e8:	e0e2      	b.n	80027b0 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f0:	2200      	movs	r2, #0
 80025f2:	497b      	ldr	r1, [pc, #492]	; (80027e0 <HAL_I2C_Master_Receive+0x4b4>)
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 fa49 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0e9      	b.n	80027d8 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002612:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002614:	b672      	cpsid	i
}
 8002616:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800264a:	4b66      	ldr	r3, [pc, #408]	; (80027e4 <HAL_I2C_Master_Receive+0x4b8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	08db      	lsrs	r3, r3, #3
 8002650:	4a65      	ldr	r2, [pc, #404]	; (80027e8 <HAL_I2C_Master_Receive+0x4bc>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	0a1a      	lsrs	r2, r3, #8
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	00da      	lsls	r2, r3, #3
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	3b01      	subs	r3, #1
 8002668:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d118      	bne.n	80026a2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2220      	movs	r2, #32
 800267a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f043 0220 	orr.w	r2, r3, #32
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002692:	b662      	cpsie	i
}
 8002694:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e09a      	b.n	80027d8 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d1d9      	bne.n	8002664 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691a      	ldr	r2, [r3, #16]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80026f2:	b662      	cpsie	i
}
 80026f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271e:	b29b      	uxth	r3, r3
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002728:	e042      	b.n	80027b0 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800272a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800272c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 fb04 	bl	8002d3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e04c      	b.n	80027d8 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b04      	cmp	r3, #4
 800277c:	d118      	bne.n	80027b0 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f47f ae94 	bne.w	80024e2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	e000      	b.n	80027d8 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80027d6:	2302      	movs	r3, #2
  }
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3728      	adds	r7, #40	; 0x28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	00010004 	.word	0x00010004
 80027e4:	20000004 	.word	0x20000004
 80027e8:	14f8b589 	.word	0x14f8b589

080027ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	460b      	mov	r3, r1
 80027fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2b08      	cmp	r3, #8
 8002806:	d006      	beq.n	8002816 <I2C_MasterRequestWrite+0x2a>
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d003      	beq.n	8002816 <I2C_MasterRequestWrite+0x2a>
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002814:	d108      	bne.n	8002828 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	e00b      	b.n	8002840 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	2b12      	cmp	r3, #18
 800282e:	d107      	bne.n	8002840 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800283e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f91d 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00d      	beq.n	8002874 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002866:	d103      	bne.n	8002870 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800286e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e035      	b.n	80028e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800287c:	d108      	bne.n	8002890 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800287e:	897b      	ldrh	r3, [r7, #10]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800288c:	611a      	str	r2, [r3, #16]
 800288e:	e01b      	b.n	80028c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002890:	897b      	ldrh	r3, [r7, #10]
 8002892:	11db      	asrs	r3, r3, #7
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f003 0306 	and.w	r3, r3, #6
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f063 030f 	orn	r3, r3, #15
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	490e      	ldr	r1, [pc, #56]	; (80028e8 <I2C_MasterRequestWrite+0xfc>)
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f943 	bl	8002b3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e010      	b.n	80028e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028be:	897b      	ldrh	r3, [r7, #10]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4907      	ldr	r1, [pc, #28]	; (80028ec <I2C_MasterRequestWrite+0x100>)
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f933 	bl	8002b3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	00010008 	.word	0x00010008
 80028ec:	00010002 	.word	0x00010002

080028f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	460b      	mov	r3, r1
 80028fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002914:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2b08      	cmp	r3, #8
 800291a:	d006      	beq.n	800292a <I2C_MasterRequestRead+0x3a>
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d003      	beq.n	800292a <I2C_MasterRequestRead+0x3a>
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002928:	d108      	bne.n	800293c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	e00b      	b.n	8002954 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	2b11      	cmp	r3, #17
 8002942:	d107      	bne.n	8002954 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002952:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 f893 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00d      	beq.n	8002988 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800297a:	d103      	bne.n	8002984 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002982:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e079      	b.n	8002a7c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002990:	d108      	bne.n	80029a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002992:	897b      	ldrh	r3, [r7, #10]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	b2da      	uxtb	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	611a      	str	r2, [r3, #16]
 80029a2:	e05f      	b.n	8002a64 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029a4:	897b      	ldrh	r3, [r7, #10]
 80029a6:	11db      	asrs	r3, r3, #7
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	f003 0306 	and.w	r3, r3, #6
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f063 030f 	orn	r3, r3, #15
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	4930      	ldr	r1, [pc, #192]	; (8002a84 <I2C_MasterRequestRead+0x194>)
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f8b9 	bl	8002b3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e054      	b.n	8002a7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029d2:	897b      	ldrh	r3, [r7, #10]
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	4929      	ldr	r1, [pc, #164]	; (8002a88 <I2C_MasterRequestRead+0x198>)
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f8a9 	bl	8002b3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e044      	b.n	8002a7c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a16:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f831 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00d      	beq.n	8002a4c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a3e:	d103      	bne.n	8002a48 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a46:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e017      	b.n	8002a7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002a4c:	897b      	ldrh	r3, [r7, #10]
 8002a4e:	11db      	asrs	r3, r3, #7
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	f003 0306 	and.w	r3, r3, #6
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	f063 030e 	orn	r3, r3, #14
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	4907      	ldr	r1, [pc, #28]	; (8002a88 <I2C_MasterRequestRead+0x198>)
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f865 	bl	8002b3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	00010008 	.word	0x00010008
 8002a88:	00010002 	.word	0x00010002

08002a8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a9c:	e025      	b.n	8002aea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002aa4:	d021      	beq.n	8002aea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa6:	f7fe fe55 	bl	8001754 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d302      	bcc.n	8002abc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d116      	bne.n	8002aea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f043 0220 	orr.w	r2, r3, #32
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e023      	b.n	8002b32 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	0c1b      	lsrs	r3, r3, #16
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d10d      	bne.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	43da      	mvns	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4013      	ands	r3, r2
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	bf0c      	ite	eq
 8002b06:	2301      	moveq	r3, #1
 8002b08:	2300      	movne	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	e00c      	b.n	8002b2a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	43da      	mvns	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	bf0c      	ite	eq
 8002b22:	2301      	moveq	r3, #1
 8002b24:	2300      	movne	r3, #0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d0b6      	beq.n	8002a9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
 8002b46:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b48:	e051      	b.n	8002bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b58:	d123      	bne.n	8002ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b68:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b72:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f043 0204 	orr.w	r2, r3, #4
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e046      	b.n	8002c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ba8:	d021      	beq.n	8002bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002baa:	f7fe fdd3 	bl	8001754 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d302      	bcc.n	8002bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d116      	bne.n	8002bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	f043 0220 	orr.w	r2, r3, #32
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e020      	b.n	8002c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	0c1b      	lsrs	r3, r3, #16
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d10c      	bne.n	8002c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	43da      	mvns	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4013      	ands	r3, r2
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	bf14      	ite	ne
 8002c0a:	2301      	movne	r3, #1
 8002c0c:	2300      	moveq	r3, #0
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	e00b      	b.n	8002c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	43da      	mvns	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d18d      	bne.n	8002b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c44:	e02d      	b.n	8002ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f8ce 	bl	8002de8 <I2C_IsAcknowledgeFailed>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e02d      	b.n	8002cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c5c:	d021      	beq.n	8002ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5e:	f7fe fd79 	bl	8001754 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d302      	bcc.n	8002c74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d116      	bne.n	8002ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f043 0220 	orr.w	r2, r3, #32
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e007      	b.n	8002cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cac:	2b80      	cmp	r3, #128	; 0x80
 8002cae:	d1ca      	bne.n	8002c46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cc6:	e02d      	b.n	8002d24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f88d 	bl	8002de8 <I2C_IsAcknowledgeFailed>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e02d      	b.n	8002d34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cde:	d021      	beq.n	8002d24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce0:	f7fe fd38 	bl	8001754 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d302      	bcc.n	8002cf6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d116      	bne.n	8002d24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f043 0220 	orr.w	r2, r3, #32
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e007      	b.n	8002d34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d1ca      	bne.n	8002cc8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d48:	e042      	b.n	8002dd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b10      	cmp	r3, #16
 8002d56:	d119      	bne.n	8002d8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f06f 0210 	mvn.w	r2, #16
 8002d60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e029      	b.n	8002de0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8c:	f7fe fce2 	bl	8001754 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d302      	bcc.n	8002da2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d116      	bne.n	8002dd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	f043 0220 	orr.w	r2, r3, #32
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e007      	b.n	8002de0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dda:	2b40      	cmp	r3, #64	; 0x40
 8002ddc:	d1b5      	bne.n	8002d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfe:	d11b      	bne.n	8002e38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	f043 0204 	orr.w	r2, r3, #4
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e26c      	b.n	8003330 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 8087 	beq.w	8002f72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e64:	4b92      	ldr	r3, [pc, #584]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 030c 	and.w	r3, r3, #12
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d00c      	beq.n	8002e8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e70:	4b8f      	ldr	r3, [pc, #572]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 030c 	and.w	r3, r3, #12
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d112      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x5e>
 8002e7c:	4b8c      	ldr	r3, [pc, #560]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e88:	d10b      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8a:	4b89      	ldr	r3, [pc, #548]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d06c      	beq.n	8002f70 <HAL_RCC_OscConfig+0x12c>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d168      	bne.n	8002f70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e246      	b.n	8003330 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eaa:	d106      	bne.n	8002eba <HAL_RCC_OscConfig+0x76>
 8002eac:	4b80      	ldr	r3, [pc, #512]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a7f      	ldr	r2, [pc, #508]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb6:	6013      	str	r3, [r2, #0]
 8002eb8:	e02e      	b.n	8002f18 <HAL_RCC_OscConfig+0xd4>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10c      	bne.n	8002edc <HAL_RCC_OscConfig+0x98>
 8002ec2:	4b7b      	ldr	r3, [pc, #492]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a7a      	ldr	r2, [pc, #488]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	4b78      	ldr	r3, [pc, #480]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a77      	ldr	r2, [pc, #476]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	e01d      	b.n	8002f18 <HAL_RCC_OscConfig+0xd4>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ee4:	d10c      	bne.n	8002f00 <HAL_RCC_OscConfig+0xbc>
 8002ee6:	4b72      	ldr	r3, [pc, #456]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a71      	ldr	r2, [pc, #452]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	4b6f      	ldr	r3, [pc, #444]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a6e      	ldr	r2, [pc, #440]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	e00b      	b.n	8002f18 <HAL_RCC_OscConfig+0xd4>
 8002f00:	4b6b      	ldr	r3, [pc, #428]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a6a      	ldr	r2, [pc, #424]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	4b68      	ldr	r3, [pc, #416]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a67      	ldr	r2, [pc, #412]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d013      	beq.n	8002f48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7fe fc18 	bl	8001754 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f28:	f7fe fc14 	bl	8001754 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	; 0x64
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e1fa      	b.n	8003330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3a:	4b5d      	ldr	r3, [pc, #372]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0xe4>
 8002f46:	e014      	b.n	8002f72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7fe fc04 	bl	8001754 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f50:	f7fe fc00 	bl	8001754 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	; 0x64
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e1e6      	b.n	8003330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f62:	4b53      	ldr	r3, [pc, #332]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x10c>
 8002f6e:	e000      	b.n	8002f72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d063      	beq.n	8003046 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f7e:	4b4c      	ldr	r3, [pc, #304]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00b      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f8a:	4b49      	ldr	r3, [pc, #292]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d11c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x18c>
 8002f96:	4b46      	ldr	r3, [pc, #280]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d116      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa2:	4b43      	ldr	r3, [pc, #268]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <HAL_RCC_OscConfig+0x176>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d001      	beq.n	8002fba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e1ba      	b.n	8003330 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fba:	4b3d      	ldr	r3, [pc, #244]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4939      	ldr	r1, [pc, #228]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fce:	e03a      	b.n	8003046 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d020      	beq.n	800301a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fd8:	4b36      	ldr	r3, [pc, #216]	; (80030b4 <HAL_RCC_OscConfig+0x270>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fde:	f7fe fbb9 	bl	8001754 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe6:	f7fe fbb5 	bl	8001754 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e19b      	b.n	8003330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff8:	4b2d      	ldr	r3, [pc, #180]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f0      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003004:	4b2a      	ldr	r3, [pc, #168]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4927      	ldr	r1, [pc, #156]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8003014:	4313      	orrs	r3, r2
 8003016:	600b      	str	r3, [r1, #0]
 8003018:	e015      	b.n	8003046 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800301a:	4b26      	ldr	r3, [pc, #152]	; (80030b4 <HAL_RCC_OscConfig+0x270>)
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003020:	f7fe fb98 	bl	8001754 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003028:	f7fe fb94 	bl	8001754 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e17a      	b.n	8003330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303a:	4b1d      	ldr	r3, [pc, #116]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d03a      	beq.n	80030c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d019      	beq.n	800308e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800305a:	4b17      	ldr	r3, [pc, #92]	; (80030b8 <HAL_RCC_OscConfig+0x274>)
 800305c:	2201      	movs	r2, #1
 800305e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003060:	f7fe fb78 	bl	8001754 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003068:	f7fe fb74 	bl	8001754 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e15a      	b.n	8003330 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307a:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <HAL_RCC_OscConfig+0x26c>)
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003086:	2001      	movs	r0, #1
 8003088:	f000 faf8 	bl	800367c <RCC_Delay>
 800308c:	e01c      	b.n	80030c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <HAL_RCC_OscConfig+0x274>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003094:	f7fe fb5e 	bl	8001754 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800309a:	e00f      	b.n	80030bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309c:	f7fe fb5a 	bl	8001754 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d908      	bls.n	80030bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e140      	b.n	8003330 <HAL_RCC_OscConfig+0x4ec>
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000
 80030b4:	42420000 	.word	0x42420000
 80030b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030bc:	4b9e      	ldr	r3, [pc, #632]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1e9      	bne.n	800309c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80a6 	beq.w	8003222 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d6:	2300      	movs	r3, #0
 80030d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030da:	4b97      	ldr	r3, [pc, #604]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10d      	bne.n	8003102 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e6:	4b94      	ldr	r3, [pc, #592]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	4a93      	ldr	r2, [pc, #588]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 80030ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f0:	61d3      	str	r3, [r2, #28]
 80030f2:	4b91      	ldr	r3, [pc, #580]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030fe:	2301      	movs	r3, #1
 8003100:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003102:	4b8e      	ldr	r3, [pc, #568]	; (800333c <HAL_RCC_OscConfig+0x4f8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310a:	2b00      	cmp	r3, #0
 800310c:	d118      	bne.n	8003140 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800310e:	4b8b      	ldr	r3, [pc, #556]	; (800333c <HAL_RCC_OscConfig+0x4f8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a8a      	ldr	r2, [pc, #552]	; (800333c <HAL_RCC_OscConfig+0x4f8>)
 8003114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800311a:	f7fe fb1b 	bl	8001754 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003122:	f7fe fb17 	bl	8001754 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b64      	cmp	r3, #100	; 0x64
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e0fd      	b.n	8003330 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	4b81      	ldr	r3, [pc, #516]	; (800333c <HAL_RCC_OscConfig+0x4f8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0f0      	beq.n	8003122 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d106      	bne.n	8003156 <HAL_RCC_OscConfig+0x312>
 8003148:	4b7b      	ldr	r3, [pc, #492]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	4a7a      	ldr	r2, [pc, #488]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6213      	str	r3, [r2, #32]
 8003154:	e02d      	b.n	80031b2 <HAL_RCC_OscConfig+0x36e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10c      	bne.n	8003178 <HAL_RCC_OscConfig+0x334>
 800315e:	4b76      	ldr	r3, [pc, #472]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	4a75      	ldr	r2, [pc, #468]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 8003164:	f023 0301 	bic.w	r3, r3, #1
 8003168:	6213      	str	r3, [r2, #32]
 800316a:	4b73      	ldr	r3, [pc, #460]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	4a72      	ldr	r2, [pc, #456]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 8003170:	f023 0304 	bic.w	r3, r3, #4
 8003174:	6213      	str	r3, [r2, #32]
 8003176:	e01c      	b.n	80031b2 <HAL_RCC_OscConfig+0x36e>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	2b05      	cmp	r3, #5
 800317e:	d10c      	bne.n	800319a <HAL_RCC_OscConfig+0x356>
 8003180:	4b6d      	ldr	r3, [pc, #436]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	4a6c      	ldr	r2, [pc, #432]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 8003186:	f043 0304 	orr.w	r3, r3, #4
 800318a:	6213      	str	r3, [r2, #32]
 800318c:	4b6a      	ldr	r3, [pc, #424]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	4a69      	ldr	r2, [pc, #420]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	6213      	str	r3, [r2, #32]
 8003198:	e00b      	b.n	80031b2 <HAL_RCC_OscConfig+0x36e>
 800319a:	4b67      	ldr	r3, [pc, #412]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	4a66      	ldr	r2, [pc, #408]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	6213      	str	r3, [r2, #32]
 80031a6:	4b64      	ldr	r3, [pc, #400]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	4a63      	ldr	r2, [pc, #396]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 80031ac:	f023 0304 	bic.w	r3, r3, #4
 80031b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d015      	beq.n	80031e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ba:	f7fe facb 	bl	8001754 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c0:	e00a      	b.n	80031d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c2:	f7fe fac7 	bl	8001754 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e0ab      	b.n	8003330 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d8:	4b57      	ldr	r3, [pc, #348]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0ee      	beq.n	80031c2 <HAL_RCC_OscConfig+0x37e>
 80031e4:	e014      	b.n	8003210 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e6:	f7fe fab5 	bl	8001754 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ec:	e00a      	b.n	8003204 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7fe fab1 	bl	8001754 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e095      	b.n	8003330 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003204:	4b4c      	ldr	r3, [pc, #304]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1ee      	bne.n	80031ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003210:	7dfb      	ldrb	r3, [r7, #23]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d105      	bne.n	8003222 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003216:	4b48      	ldr	r3, [pc, #288]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	4a47      	ldr	r2, [pc, #284]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 800321c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003220:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 8081 	beq.w	800332e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800322c:	4b42      	ldr	r3, [pc, #264]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 030c 	and.w	r3, r3, #12
 8003234:	2b08      	cmp	r3, #8
 8003236:	d061      	beq.n	80032fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d146      	bne.n	80032ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003240:	4b3f      	ldr	r3, [pc, #252]	; (8003340 <HAL_RCC_OscConfig+0x4fc>)
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003246:	f7fe fa85 	bl	8001754 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324e:	f7fe fa81 	bl	8001754 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e067      	b.n	8003330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003260:	4b35      	ldr	r3, [pc, #212]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1f0      	bne.n	800324e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003274:	d108      	bne.n	8003288 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003276:	4b30      	ldr	r3, [pc, #192]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	492d      	ldr	r1, [pc, #180]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 8003284:	4313      	orrs	r3, r2
 8003286:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003288:	4b2b      	ldr	r3, [pc, #172]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a19      	ldr	r1, [r3, #32]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	430b      	orrs	r3, r1
 800329a:	4927      	ldr	r1, [pc, #156]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 800329c:	4313      	orrs	r3, r2
 800329e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a0:	4b27      	ldr	r3, [pc, #156]	; (8003340 <HAL_RCC_OscConfig+0x4fc>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a6:	f7fe fa55 	bl	8001754 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ae:	f7fe fa51 	bl	8001754 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e037      	b.n	8003330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032c0:	4b1d      	ldr	r3, [pc, #116]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x46a>
 80032cc:	e02f      	b.n	800332e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ce:	4b1c      	ldr	r3, [pc, #112]	; (8003340 <HAL_RCC_OscConfig+0x4fc>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d4:	f7fe fa3e 	bl	8001754 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032dc:	f7fe fa3a 	bl	8001754 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e020      	b.n	8003330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ee:	4b12      	ldr	r3, [pc, #72]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x498>
 80032fa:	e018      	b.n	800332e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e013      	b.n	8003330 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_RCC_OscConfig+0x4f4>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	429a      	cmp	r2, r3
 800331a:	d106      	bne.n	800332a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003326:	429a      	cmp	r2, r3
 8003328:	d001      	beq.n	800332e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021000 	.word	0x40021000
 800333c:	40007000 	.word	0x40007000
 8003340:	42420060 	.word	0x42420060

08003344 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0d0      	b.n	80034fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003358:	4b6a      	ldr	r3, [pc, #424]	; (8003504 <HAL_RCC_ClockConfig+0x1c0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d910      	bls.n	8003388 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b67      	ldr	r3, [pc, #412]	; (8003504 <HAL_RCC_ClockConfig+0x1c0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 0207 	bic.w	r2, r3, #7
 800336e:	4965      	ldr	r1, [pc, #404]	; (8003504 <HAL_RCC_ClockConfig+0x1c0>)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b63      	ldr	r3, [pc, #396]	; (8003504 <HAL_RCC_ClockConfig+0x1c0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0b8      	b.n	80034fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d020      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033a0:	4b59      	ldr	r3, [pc, #356]	; (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	4a58      	ldr	r2, [pc, #352]	; (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 80033a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033b8:	4b53      	ldr	r3, [pc, #332]	; (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	4a52      	ldr	r2, [pc, #328]	; (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 80033be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c4:	4b50      	ldr	r3, [pc, #320]	; (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	494d      	ldr	r1, [pc, #308]	; (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d040      	beq.n	8003464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d107      	bne.n	80033fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ea:	4b47      	ldr	r3, [pc, #284]	; (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d115      	bne.n	8003422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e07f      	b.n	80034fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d107      	bne.n	8003412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003402:	4b41      	ldr	r3, [pc, #260]	; (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e073      	b.n	80034fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003412:	4b3d      	ldr	r3, [pc, #244]	; (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e06b      	b.n	80034fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003422:	4b39      	ldr	r3, [pc, #228]	; (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f023 0203 	bic.w	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	4936      	ldr	r1, [pc, #216]	; (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 8003430:	4313      	orrs	r3, r2
 8003432:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003434:	f7fe f98e 	bl	8001754 <HAL_GetTick>
 8003438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343a:	e00a      	b.n	8003452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800343c:	f7fe f98a 	bl	8001754 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	; 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e053      	b.n	80034fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003452:	4b2d      	ldr	r3, [pc, #180]	; (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f003 020c 	and.w	r2, r3, #12
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	429a      	cmp	r2, r3
 8003462:	d1eb      	bne.n	800343c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003464:	4b27      	ldr	r3, [pc, #156]	; (8003504 <HAL_RCC_ClockConfig+0x1c0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d210      	bcs.n	8003494 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003472:	4b24      	ldr	r3, [pc, #144]	; (8003504 <HAL_RCC_ClockConfig+0x1c0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 0207 	bic.w	r2, r3, #7
 800347a:	4922      	ldr	r1, [pc, #136]	; (8003504 <HAL_RCC_ClockConfig+0x1c0>)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	4313      	orrs	r3, r2
 8003480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003482:	4b20      	ldr	r3, [pc, #128]	; (8003504 <HAL_RCC_ClockConfig+0x1c0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e032      	b.n	80034fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034a0:	4b19      	ldr	r3, [pc, #100]	; (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4916      	ldr	r1, [pc, #88]	; (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d009      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034be:	4b12      	ldr	r3, [pc, #72]	; (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	490e      	ldr	r1, [pc, #56]	; (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034d2:	f000 f82d 	bl	8003530 <HAL_RCC_GetSysClockFreq>
 80034d6:	4602      	mov	r2, r0
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	091b      	lsrs	r3, r3, #4
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	490a      	ldr	r1, [pc, #40]	; (800350c <HAL_RCC_ClockConfig+0x1c8>)
 80034e4:	5ccb      	ldrb	r3, [r1, r3]
 80034e6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ea:	4a09      	ldr	r2, [pc, #36]	; (8003510 <HAL_RCC_ClockConfig+0x1cc>)
 80034ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034ee:	4b09      	ldr	r3, [pc, #36]	; (8003514 <HAL_RCC_ClockConfig+0x1d0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fe f8ec 	bl	80016d0 <HAL_InitTick>

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40022000 	.word	0x40022000
 8003508:	40021000 	.word	0x40021000
 800350c:	08004340 	.word	0x08004340
 8003510:	20000004 	.word	0x20000004
 8003514:	20000008 	.word	0x20000008

08003518 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800351c:	4b03      	ldr	r3, [pc, #12]	; (800352c <HAL_RCC_EnableCSS+0x14>)
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]
}
 8003522:	bf00      	nop
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	4242004c 	.word	0x4242004c

08003530 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003530:	b490      	push	{r4, r7}
 8003532:	b08a      	sub	sp, #40	; 0x28
 8003534:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003536:	4b2a      	ldr	r3, [pc, #168]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003538:	1d3c      	adds	r4, r7, #4
 800353a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800353c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003540:	f240 2301 	movw	r3, #513	; 0x201
 8003544:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	61fb      	str	r3, [r7, #28]
 800354a:	2300      	movs	r3, #0
 800354c:	61bb      	str	r3, [r7, #24]
 800354e:	2300      	movs	r3, #0
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
 8003552:	2300      	movs	r3, #0
 8003554:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800355a:	4b22      	ldr	r3, [pc, #136]	; (80035e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b04      	cmp	r3, #4
 8003568:	d002      	beq.n	8003570 <HAL_RCC_GetSysClockFreq+0x40>
 800356a:	2b08      	cmp	r3, #8
 800356c:	d003      	beq.n	8003576 <HAL_RCC_GetSysClockFreq+0x46>
 800356e:	e02d      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003570:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003572:	623b      	str	r3, [r7, #32]
      break;
 8003574:	e02d      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	0c9b      	lsrs	r3, r3, #18
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003582:	4413      	add	r3, r2
 8003584:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003588:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d013      	beq.n	80035bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003594:	4b13      	ldr	r3, [pc, #76]	; (80035e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	0c5b      	lsrs	r3, r3, #17
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035a2:	4413      	add	r3, r2
 80035a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	4a0e      	ldr	r2, [pc, #56]	; (80035e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ae:	fb02 f203 	mul.w	r2, r2, r3
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ba:	e004      	b.n	80035c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	4a0b      	ldr	r2, [pc, #44]	; (80035ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80035c0:	fb02 f303 	mul.w	r3, r2, r3
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	623b      	str	r3, [r7, #32]
      break;
 80035ca:	e002      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035cc:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ce:	623b      	str	r3, [r7, #32]
      break;
 80035d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035d2:	6a3b      	ldr	r3, [r7, #32]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3728      	adds	r7, #40	; 0x28
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc90      	pop	{r4, r7}
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	08004330 	.word	0x08004330
 80035e4:	40021000 	.word	0x40021000
 80035e8:	007a1200 	.word	0x007a1200
 80035ec:	003d0900 	.word	0x003d0900

080035f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f4:	4b02      	ldr	r3, [pc, #8]	; (8003600 <HAL_RCC_GetHCLKFreq+0x10>)
 80035f6:	681b      	ldr	r3, [r3, #0]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr
 8003600:	20000004 	.word	0x20000004

08003604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003608:	f7ff fff2 	bl	80035f0 <HAL_RCC_GetHCLKFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	0a1b      	lsrs	r3, r3, #8
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4903      	ldr	r1, [pc, #12]	; (8003628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000
 8003628:	08004350 	.word	0x08004350

0800362c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003630:	f7ff ffde 	bl	80035f0 <HAL_RCC_GetHCLKFreq>
 8003634:	4602      	mov	r2, r0
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	0adb      	lsrs	r3, r3, #11
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4903      	ldr	r1, [pc, #12]	; (8003650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003642:	5ccb      	ldrb	r3, [r1, r3]
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40021000 	.word	0x40021000
 8003650:	08004350 	.word	0x08004350

08003654 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_RCC_NMI_IRQHandler+0x20>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003660:	2b80      	cmp	r3, #128	; 0x80
 8003662:	d104      	bne.n	800366e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003664:	f000 f828 	bl	80036b8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003668:	4b03      	ldr	r3, [pc, #12]	; (8003678 <HAL_RCC_NMI_IRQHandler+0x24>)
 800366a:	2280      	movs	r2, #128	; 0x80
 800366c:	701a      	strb	r2, [r3, #0]
  }
}
 800366e:	bf00      	nop
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40021000 	.word	0x40021000
 8003678:	4002100a 	.word	0x4002100a

0800367c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003684:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <RCC_Delay+0x34>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <RCC_Delay+0x38>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	0a5b      	lsrs	r3, r3, #9
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	fb02 f303 	mul.w	r3, r2, r3
 8003696:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003698:	bf00      	nop
  }
  while (Delay --);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	1e5a      	subs	r2, r3, #1
 800369e:	60fa      	str	r2, [r7, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1f9      	bne.n	8003698 <RCC_Delay+0x1c>
}
 80036a4:	bf00      	nop
 80036a6:	bf00      	nop
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr
 80036b0:	20000004 	.word	0x20000004
 80036b4:	10624dd3 	.word	0x10624dd3

080036b8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80036bc:	bf00      	nop
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e03f      	b.n	8003756 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fd ff02 	bl	80014f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2224      	movs	r2, #36	; 0x24
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003706:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f905 	bl	8003918 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800371c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695a      	ldr	r2, [r3, #20]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800372c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800373c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b08a      	sub	sp, #40	; 0x28
 8003762:	af02      	add	r7, sp, #8
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	603b      	str	r3, [r7, #0]
 800376a:	4613      	mov	r3, r2
 800376c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b20      	cmp	r3, #32
 800377c:	d17c      	bne.n	8003878 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <HAL_UART_Transmit+0x2c>
 8003784:	88fb      	ldrh	r3, [r7, #6]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e075      	b.n	800387a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_UART_Transmit+0x3e>
 8003798:	2302      	movs	r3, #2
 800379a:	e06e      	b.n	800387a <HAL_UART_Transmit+0x11c>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2221      	movs	r2, #33	; 0x21
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037b2:	f7fd ffcf 	bl	8001754 <HAL_GetTick>
 80037b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	88fa      	ldrh	r2, [r7, #6]
 80037bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	88fa      	ldrh	r2, [r7, #6]
 80037c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037cc:	d108      	bne.n	80037e0 <HAL_UART_Transmit+0x82>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d104      	bne.n	80037e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	e003      	b.n	80037e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037f0:	e02a      	b.n	8003848 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2200      	movs	r2, #0
 80037fa:	2180      	movs	r1, #128	; 0x80
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 f840 	bl	8003882 <UART_WaitOnFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e036      	b.n	800387a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10b      	bne.n	800382a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003820:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	3302      	adds	r3, #2
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	e007      	b.n	800383a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	3301      	adds	r3, #1
 8003838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1cf      	bne.n	80037f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2200      	movs	r2, #0
 800385a:	2140      	movs	r1, #64	; 0x40
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f810 	bl	8003882 <UART_WaitOnFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e006      	b.n	800387a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	e000      	b.n	800387a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003878:	2302      	movs	r3, #2
  }
}
 800387a:	4618      	mov	r0, r3
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b084      	sub	sp, #16
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	603b      	str	r3, [r7, #0]
 800388e:	4613      	mov	r3, r2
 8003890:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003892:	e02c      	b.n	80038ee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800389a:	d028      	beq.n	80038ee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d007      	beq.n	80038b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80038a2:	f7fd ff57 	bl	8001754 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d21d      	bcs.n	80038ee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038c0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	695a      	ldr	r2, [r3, #20]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0201 	bic.w	r2, r2, #1
 80038d0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e00f      	b.n	800390e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4013      	ands	r3, r2
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	bf0c      	ite	eq
 80038fe:	2301      	moveq	r3, #1
 8003900:	2300      	movne	r3, #0
 8003902:	b2db      	uxtb	r3, r3
 8003904:	461a      	mov	r2, r3
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	429a      	cmp	r2, r3
 800390a:	d0c3      	beq.n	8003894 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003952:	f023 030c 	bic.w	r3, r3, #12
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	430b      	orrs	r3, r1
 800395e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a2c      	ldr	r2, [pc, #176]	; (8003a2c <UART_SetConfig+0x114>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d103      	bne.n	8003988 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003980:	f7ff fe54 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	e002      	b.n	800398e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003988:	f7ff fe3c 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 800398c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	009a      	lsls	r2, r3, #2
 8003998:	441a      	add	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a4:	4a22      	ldr	r2, [pc, #136]	; (8003a30 <UART_SetConfig+0x118>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	0119      	lsls	r1, r3, #4
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	009a      	lsls	r2, r3, #2
 80039b8:	441a      	add	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039c4:	4b1a      	ldr	r3, [pc, #104]	; (8003a30 <UART_SetConfig+0x118>)
 80039c6:	fba3 0302 	umull	r0, r3, r3, r2
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	2064      	movs	r0, #100	; 0x64
 80039ce:	fb00 f303 	mul.w	r3, r0, r3
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	3332      	adds	r3, #50	; 0x32
 80039d8:	4a15      	ldr	r2, [pc, #84]	; (8003a30 <UART_SetConfig+0x118>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039e4:	4419      	add	r1, r3
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	009a      	lsls	r2, r3, #2
 80039f0:	441a      	add	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <UART_SetConfig+0x118>)
 80039fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	2064      	movs	r0, #100	; 0x64
 8003a06:	fb00 f303 	mul.w	r3, r0, r3
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	3332      	adds	r3, #50	; 0x32
 8003a10:	4a07      	ldr	r2, [pc, #28]	; (8003a30 <UART_SetConfig+0x118>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	f003 020f 	and.w	r2, r3, #15
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	440a      	add	r2, r1
 8003a22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a24:	bf00      	nop
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40013800 	.word	0x40013800
 8003a30:	51eb851f 	.word	0x51eb851f

08003a34 <__errno>:
 8003a34:	4b01      	ldr	r3, [pc, #4]	; (8003a3c <__errno+0x8>)
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	20000010 	.word	0x20000010

08003a40 <__libc_init_array>:
 8003a40:	b570      	push	{r4, r5, r6, lr}
 8003a42:	2600      	movs	r6, #0
 8003a44:	4d0c      	ldr	r5, [pc, #48]	; (8003a78 <__libc_init_array+0x38>)
 8003a46:	4c0d      	ldr	r4, [pc, #52]	; (8003a7c <__libc_init_array+0x3c>)
 8003a48:	1b64      	subs	r4, r4, r5
 8003a4a:	10a4      	asrs	r4, r4, #2
 8003a4c:	42a6      	cmp	r6, r4
 8003a4e:	d109      	bne.n	8003a64 <__libc_init_array+0x24>
 8003a50:	f000 fc5c 	bl	800430c <_init>
 8003a54:	2600      	movs	r6, #0
 8003a56:	4d0a      	ldr	r5, [pc, #40]	; (8003a80 <__libc_init_array+0x40>)
 8003a58:	4c0a      	ldr	r4, [pc, #40]	; (8003a84 <__libc_init_array+0x44>)
 8003a5a:	1b64      	subs	r4, r4, r5
 8003a5c:	10a4      	asrs	r4, r4, #2
 8003a5e:	42a6      	cmp	r6, r4
 8003a60:	d105      	bne.n	8003a6e <__libc_init_array+0x2e>
 8003a62:	bd70      	pop	{r4, r5, r6, pc}
 8003a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a68:	4798      	blx	r3
 8003a6a:	3601      	adds	r6, #1
 8003a6c:	e7ee      	b.n	8003a4c <__libc_init_array+0xc>
 8003a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a72:	4798      	blx	r3
 8003a74:	3601      	adds	r6, #1
 8003a76:	e7f2      	b.n	8003a5e <__libc_init_array+0x1e>
 8003a78:	0800438c 	.word	0x0800438c
 8003a7c:	0800438c 	.word	0x0800438c
 8003a80:	0800438c 	.word	0x0800438c
 8003a84:	08004390 	.word	0x08004390

08003a88 <memset>:
 8003a88:	4603      	mov	r3, r0
 8003a8a:	4402      	add	r2, r0
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d100      	bne.n	8003a92 <memset+0xa>
 8003a90:	4770      	bx	lr
 8003a92:	f803 1b01 	strb.w	r1, [r3], #1
 8003a96:	e7f9      	b.n	8003a8c <memset+0x4>

08003a98 <siprintf>:
 8003a98:	b40e      	push	{r1, r2, r3}
 8003a9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a9e:	b500      	push	{lr}
 8003aa0:	b09c      	sub	sp, #112	; 0x70
 8003aa2:	ab1d      	add	r3, sp, #116	; 0x74
 8003aa4:	9002      	str	r0, [sp, #8]
 8003aa6:	9006      	str	r0, [sp, #24]
 8003aa8:	9107      	str	r1, [sp, #28]
 8003aaa:	9104      	str	r1, [sp, #16]
 8003aac:	4808      	ldr	r0, [pc, #32]	; (8003ad0 <siprintf+0x38>)
 8003aae:	4909      	ldr	r1, [pc, #36]	; (8003ad4 <siprintf+0x3c>)
 8003ab0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ab4:	9105      	str	r1, [sp, #20]
 8003ab6:	6800      	ldr	r0, [r0, #0]
 8003ab8:	a902      	add	r1, sp, #8
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	f000 f868 	bl	8003b90 <_svfiprintf_r>
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	9b02      	ldr	r3, [sp, #8]
 8003ac4:	701a      	strb	r2, [r3, #0]
 8003ac6:	b01c      	add	sp, #112	; 0x70
 8003ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003acc:	b003      	add	sp, #12
 8003ace:	4770      	bx	lr
 8003ad0:	20000010 	.word	0x20000010
 8003ad4:	ffff0208 	.word	0xffff0208

08003ad8 <__ssputs_r>:
 8003ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003adc:	688e      	ldr	r6, [r1, #8]
 8003ade:	4682      	mov	sl, r0
 8003ae0:	429e      	cmp	r6, r3
 8003ae2:	460c      	mov	r4, r1
 8003ae4:	4690      	mov	r8, r2
 8003ae6:	461f      	mov	r7, r3
 8003ae8:	d838      	bhi.n	8003b5c <__ssputs_r+0x84>
 8003aea:	898a      	ldrh	r2, [r1, #12]
 8003aec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003af0:	d032      	beq.n	8003b58 <__ssputs_r+0x80>
 8003af2:	6825      	ldr	r5, [r4, #0]
 8003af4:	6909      	ldr	r1, [r1, #16]
 8003af6:	3301      	adds	r3, #1
 8003af8:	eba5 0901 	sub.w	r9, r5, r1
 8003afc:	6965      	ldr	r5, [r4, #20]
 8003afe:	444b      	add	r3, r9
 8003b00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b08:	106d      	asrs	r5, r5, #1
 8003b0a:	429d      	cmp	r5, r3
 8003b0c:	bf38      	it	cc
 8003b0e:	461d      	movcc	r5, r3
 8003b10:	0553      	lsls	r3, r2, #21
 8003b12:	d531      	bpl.n	8003b78 <__ssputs_r+0xa0>
 8003b14:	4629      	mov	r1, r5
 8003b16:	f000 fb53 	bl	80041c0 <_malloc_r>
 8003b1a:	4606      	mov	r6, r0
 8003b1c:	b950      	cbnz	r0, 8003b34 <__ssputs_r+0x5c>
 8003b1e:	230c      	movs	r3, #12
 8003b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b24:	f8ca 3000 	str.w	r3, [sl]
 8003b28:	89a3      	ldrh	r3, [r4, #12]
 8003b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b2e:	81a3      	strh	r3, [r4, #12]
 8003b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b34:	464a      	mov	r2, r9
 8003b36:	6921      	ldr	r1, [r4, #16]
 8003b38:	f000 face 	bl	80040d8 <memcpy>
 8003b3c:	89a3      	ldrh	r3, [r4, #12]
 8003b3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b46:	81a3      	strh	r3, [r4, #12]
 8003b48:	6126      	str	r6, [r4, #16]
 8003b4a:	444e      	add	r6, r9
 8003b4c:	6026      	str	r6, [r4, #0]
 8003b4e:	463e      	mov	r6, r7
 8003b50:	6165      	str	r5, [r4, #20]
 8003b52:	eba5 0509 	sub.w	r5, r5, r9
 8003b56:	60a5      	str	r5, [r4, #8]
 8003b58:	42be      	cmp	r6, r7
 8003b5a:	d900      	bls.n	8003b5e <__ssputs_r+0x86>
 8003b5c:	463e      	mov	r6, r7
 8003b5e:	4632      	mov	r2, r6
 8003b60:	4641      	mov	r1, r8
 8003b62:	6820      	ldr	r0, [r4, #0]
 8003b64:	f000 fac6 	bl	80040f4 <memmove>
 8003b68:	68a3      	ldr	r3, [r4, #8]
 8003b6a:	6822      	ldr	r2, [r4, #0]
 8003b6c:	1b9b      	subs	r3, r3, r6
 8003b6e:	4432      	add	r2, r6
 8003b70:	2000      	movs	r0, #0
 8003b72:	60a3      	str	r3, [r4, #8]
 8003b74:	6022      	str	r2, [r4, #0]
 8003b76:	e7db      	b.n	8003b30 <__ssputs_r+0x58>
 8003b78:	462a      	mov	r2, r5
 8003b7a:	f000 fb7b 	bl	8004274 <_realloc_r>
 8003b7e:	4606      	mov	r6, r0
 8003b80:	2800      	cmp	r0, #0
 8003b82:	d1e1      	bne.n	8003b48 <__ssputs_r+0x70>
 8003b84:	4650      	mov	r0, sl
 8003b86:	6921      	ldr	r1, [r4, #16]
 8003b88:	f000 face 	bl	8004128 <_free_r>
 8003b8c:	e7c7      	b.n	8003b1e <__ssputs_r+0x46>
	...

08003b90 <_svfiprintf_r>:
 8003b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b94:	4698      	mov	r8, r3
 8003b96:	898b      	ldrh	r3, [r1, #12]
 8003b98:	4607      	mov	r7, r0
 8003b9a:	061b      	lsls	r3, r3, #24
 8003b9c:	460d      	mov	r5, r1
 8003b9e:	4614      	mov	r4, r2
 8003ba0:	b09d      	sub	sp, #116	; 0x74
 8003ba2:	d50e      	bpl.n	8003bc2 <_svfiprintf_r+0x32>
 8003ba4:	690b      	ldr	r3, [r1, #16]
 8003ba6:	b963      	cbnz	r3, 8003bc2 <_svfiprintf_r+0x32>
 8003ba8:	2140      	movs	r1, #64	; 0x40
 8003baa:	f000 fb09 	bl	80041c0 <_malloc_r>
 8003bae:	6028      	str	r0, [r5, #0]
 8003bb0:	6128      	str	r0, [r5, #16]
 8003bb2:	b920      	cbnz	r0, 8003bbe <_svfiprintf_r+0x2e>
 8003bb4:	230c      	movs	r3, #12
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bbc:	e0d1      	b.n	8003d62 <_svfiprintf_r+0x1d2>
 8003bbe:	2340      	movs	r3, #64	; 0x40
 8003bc0:	616b      	str	r3, [r5, #20]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8003bc6:	2320      	movs	r3, #32
 8003bc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bcc:	2330      	movs	r3, #48	; 0x30
 8003bce:	f04f 0901 	mov.w	r9, #1
 8003bd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bd6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003d7c <_svfiprintf_r+0x1ec>
 8003bda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bde:	4623      	mov	r3, r4
 8003be0:	469a      	mov	sl, r3
 8003be2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003be6:	b10a      	cbz	r2, 8003bec <_svfiprintf_r+0x5c>
 8003be8:	2a25      	cmp	r2, #37	; 0x25
 8003bea:	d1f9      	bne.n	8003be0 <_svfiprintf_r+0x50>
 8003bec:	ebba 0b04 	subs.w	fp, sl, r4
 8003bf0:	d00b      	beq.n	8003c0a <_svfiprintf_r+0x7a>
 8003bf2:	465b      	mov	r3, fp
 8003bf4:	4622      	mov	r2, r4
 8003bf6:	4629      	mov	r1, r5
 8003bf8:	4638      	mov	r0, r7
 8003bfa:	f7ff ff6d 	bl	8003ad8 <__ssputs_r>
 8003bfe:	3001      	adds	r0, #1
 8003c00:	f000 80aa 	beq.w	8003d58 <_svfiprintf_r+0x1c8>
 8003c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c06:	445a      	add	r2, fp
 8003c08:	9209      	str	r2, [sp, #36]	; 0x24
 8003c0a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 80a2 	beq.w	8003d58 <_svfiprintf_r+0x1c8>
 8003c14:	2300      	movs	r3, #0
 8003c16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c1e:	f10a 0a01 	add.w	sl, sl, #1
 8003c22:	9304      	str	r3, [sp, #16]
 8003c24:	9307      	str	r3, [sp, #28]
 8003c26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c2a:	931a      	str	r3, [sp, #104]	; 0x68
 8003c2c:	4654      	mov	r4, sl
 8003c2e:	2205      	movs	r2, #5
 8003c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c34:	4851      	ldr	r0, [pc, #324]	; (8003d7c <_svfiprintf_r+0x1ec>)
 8003c36:	f000 fa41 	bl	80040bc <memchr>
 8003c3a:	9a04      	ldr	r2, [sp, #16]
 8003c3c:	b9d8      	cbnz	r0, 8003c76 <_svfiprintf_r+0xe6>
 8003c3e:	06d0      	lsls	r0, r2, #27
 8003c40:	bf44      	itt	mi
 8003c42:	2320      	movmi	r3, #32
 8003c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c48:	0711      	lsls	r1, r2, #28
 8003c4a:	bf44      	itt	mi
 8003c4c:	232b      	movmi	r3, #43	; 0x2b
 8003c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c52:	f89a 3000 	ldrb.w	r3, [sl]
 8003c56:	2b2a      	cmp	r3, #42	; 0x2a
 8003c58:	d015      	beq.n	8003c86 <_svfiprintf_r+0xf6>
 8003c5a:	4654      	mov	r4, sl
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	f04f 0c0a 	mov.w	ip, #10
 8003c62:	9a07      	ldr	r2, [sp, #28]
 8003c64:	4621      	mov	r1, r4
 8003c66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c6a:	3b30      	subs	r3, #48	; 0x30
 8003c6c:	2b09      	cmp	r3, #9
 8003c6e:	d94e      	bls.n	8003d0e <_svfiprintf_r+0x17e>
 8003c70:	b1b0      	cbz	r0, 8003ca0 <_svfiprintf_r+0x110>
 8003c72:	9207      	str	r2, [sp, #28]
 8003c74:	e014      	b.n	8003ca0 <_svfiprintf_r+0x110>
 8003c76:	eba0 0308 	sub.w	r3, r0, r8
 8003c7a:	fa09 f303 	lsl.w	r3, r9, r3
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	46a2      	mov	sl, r4
 8003c82:	9304      	str	r3, [sp, #16]
 8003c84:	e7d2      	b.n	8003c2c <_svfiprintf_r+0x9c>
 8003c86:	9b03      	ldr	r3, [sp, #12]
 8003c88:	1d19      	adds	r1, r3, #4
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	9103      	str	r1, [sp, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	bfbb      	ittet	lt
 8003c92:	425b      	neglt	r3, r3
 8003c94:	f042 0202 	orrlt.w	r2, r2, #2
 8003c98:	9307      	strge	r3, [sp, #28]
 8003c9a:	9307      	strlt	r3, [sp, #28]
 8003c9c:	bfb8      	it	lt
 8003c9e:	9204      	strlt	r2, [sp, #16]
 8003ca0:	7823      	ldrb	r3, [r4, #0]
 8003ca2:	2b2e      	cmp	r3, #46	; 0x2e
 8003ca4:	d10c      	bne.n	8003cc0 <_svfiprintf_r+0x130>
 8003ca6:	7863      	ldrb	r3, [r4, #1]
 8003ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8003caa:	d135      	bne.n	8003d18 <_svfiprintf_r+0x188>
 8003cac:	9b03      	ldr	r3, [sp, #12]
 8003cae:	3402      	adds	r4, #2
 8003cb0:	1d1a      	adds	r2, r3, #4
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	9203      	str	r2, [sp, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	bfb8      	it	lt
 8003cba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003cbe:	9305      	str	r3, [sp, #20]
 8003cc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003d8c <_svfiprintf_r+0x1fc>
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	4650      	mov	r0, sl
 8003cc8:	7821      	ldrb	r1, [r4, #0]
 8003cca:	f000 f9f7 	bl	80040bc <memchr>
 8003cce:	b140      	cbz	r0, 8003ce2 <_svfiprintf_r+0x152>
 8003cd0:	2340      	movs	r3, #64	; 0x40
 8003cd2:	eba0 000a 	sub.w	r0, r0, sl
 8003cd6:	fa03 f000 	lsl.w	r0, r3, r0
 8003cda:	9b04      	ldr	r3, [sp, #16]
 8003cdc:	3401      	adds	r4, #1
 8003cde:	4303      	orrs	r3, r0
 8003ce0:	9304      	str	r3, [sp, #16]
 8003ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ce6:	2206      	movs	r2, #6
 8003ce8:	4825      	ldr	r0, [pc, #148]	; (8003d80 <_svfiprintf_r+0x1f0>)
 8003cea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cee:	f000 f9e5 	bl	80040bc <memchr>
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	d038      	beq.n	8003d68 <_svfiprintf_r+0x1d8>
 8003cf6:	4b23      	ldr	r3, [pc, #140]	; (8003d84 <_svfiprintf_r+0x1f4>)
 8003cf8:	bb1b      	cbnz	r3, 8003d42 <_svfiprintf_r+0x1b2>
 8003cfa:	9b03      	ldr	r3, [sp, #12]
 8003cfc:	3307      	adds	r3, #7
 8003cfe:	f023 0307 	bic.w	r3, r3, #7
 8003d02:	3308      	adds	r3, #8
 8003d04:	9303      	str	r3, [sp, #12]
 8003d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d08:	4433      	add	r3, r6
 8003d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d0c:	e767      	b.n	8003bde <_svfiprintf_r+0x4e>
 8003d0e:	460c      	mov	r4, r1
 8003d10:	2001      	movs	r0, #1
 8003d12:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d16:	e7a5      	b.n	8003c64 <_svfiprintf_r+0xd4>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f04f 0c0a 	mov.w	ip, #10
 8003d1e:	4619      	mov	r1, r3
 8003d20:	3401      	adds	r4, #1
 8003d22:	9305      	str	r3, [sp, #20]
 8003d24:	4620      	mov	r0, r4
 8003d26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d2a:	3a30      	subs	r2, #48	; 0x30
 8003d2c:	2a09      	cmp	r2, #9
 8003d2e:	d903      	bls.n	8003d38 <_svfiprintf_r+0x1a8>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0c5      	beq.n	8003cc0 <_svfiprintf_r+0x130>
 8003d34:	9105      	str	r1, [sp, #20]
 8003d36:	e7c3      	b.n	8003cc0 <_svfiprintf_r+0x130>
 8003d38:	4604      	mov	r4, r0
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d40:	e7f0      	b.n	8003d24 <_svfiprintf_r+0x194>
 8003d42:	ab03      	add	r3, sp, #12
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	462a      	mov	r2, r5
 8003d48:	4638      	mov	r0, r7
 8003d4a:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <_svfiprintf_r+0x1f8>)
 8003d4c:	a904      	add	r1, sp, #16
 8003d4e:	f3af 8000 	nop.w
 8003d52:	1c42      	adds	r2, r0, #1
 8003d54:	4606      	mov	r6, r0
 8003d56:	d1d6      	bne.n	8003d06 <_svfiprintf_r+0x176>
 8003d58:	89ab      	ldrh	r3, [r5, #12]
 8003d5a:	065b      	lsls	r3, r3, #25
 8003d5c:	f53f af2c 	bmi.w	8003bb8 <_svfiprintf_r+0x28>
 8003d60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d62:	b01d      	add	sp, #116	; 0x74
 8003d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d68:	ab03      	add	r3, sp, #12
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	462a      	mov	r2, r5
 8003d6e:	4638      	mov	r0, r7
 8003d70:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <_svfiprintf_r+0x1f8>)
 8003d72:	a904      	add	r1, sp, #16
 8003d74:	f000 f87c 	bl	8003e70 <_printf_i>
 8003d78:	e7eb      	b.n	8003d52 <_svfiprintf_r+0x1c2>
 8003d7a:	bf00      	nop
 8003d7c:	08004358 	.word	0x08004358
 8003d80:	08004362 	.word	0x08004362
 8003d84:	00000000 	.word	0x00000000
 8003d88:	08003ad9 	.word	0x08003ad9
 8003d8c:	0800435e 	.word	0x0800435e

08003d90 <_printf_common>:
 8003d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d94:	4616      	mov	r6, r2
 8003d96:	4699      	mov	r9, r3
 8003d98:	688a      	ldr	r2, [r1, #8]
 8003d9a:	690b      	ldr	r3, [r1, #16]
 8003d9c:	4607      	mov	r7, r0
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	bfb8      	it	lt
 8003da2:	4613      	movlt	r3, r2
 8003da4:	6033      	str	r3, [r6, #0]
 8003da6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003daa:	460c      	mov	r4, r1
 8003dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003db0:	b10a      	cbz	r2, 8003db6 <_printf_common+0x26>
 8003db2:	3301      	adds	r3, #1
 8003db4:	6033      	str	r3, [r6, #0]
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	0699      	lsls	r1, r3, #26
 8003dba:	bf42      	ittt	mi
 8003dbc:	6833      	ldrmi	r3, [r6, #0]
 8003dbe:	3302      	addmi	r3, #2
 8003dc0:	6033      	strmi	r3, [r6, #0]
 8003dc2:	6825      	ldr	r5, [r4, #0]
 8003dc4:	f015 0506 	ands.w	r5, r5, #6
 8003dc8:	d106      	bne.n	8003dd8 <_printf_common+0x48>
 8003dca:	f104 0a19 	add.w	sl, r4, #25
 8003dce:	68e3      	ldr	r3, [r4, #12]
 8003dd0:	6832      	ldr	r2, [r6, #0]
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	42ab      	cmp	r3, r5
 8003dd6:	dc28      	bgt.n	8003e2a <_printf_common+0x9a>
 8003dd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ddc:	1e13      	subs	r3, r2, #0
 8003dde:	6822      	ldr	r2, [r4, #0]
 8003de0:	bf18      	it	ne
 8003de2:	2301      	movne	r3, #1
 8003de4:	0692      	lsls	r2, r2, #26
 8003de6:	d42d      	bmi.n	8003e44 <_printf_common+0xb4>
 8003de8:	4649      	mov	r1, r9
 8003dea:	4638      	mov	r0, r7
 8003dec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003df0:	47c0      	blx	r8
 8003df2:	3001      	adds	r0, #1
 8003df4:	d020      	beq.n	8003e38 <_printf_common+0xa8>
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	68e5      	ldr	r5, [r4, #12]
 8003dfa:	f003 0306 	and.w	r3, r3, #6
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	bf18      	it	ne
 8003e02:	2500      	movne	r5, #0
 8003e04:	6832      	ldr	r2, [r6, #0]
 8003e06:	f04f 0600 	mov.w	r6, #0
 8003e0a:	68a3      	ldr	r3, [r4, #8]
 8003e0c:	bf08      	it	eq
 8003e0e:	1aad      	subeq	r5, r5, r2
 8003e10:	6922      	ldr	r2, [r4, #16]
 8003e12:	bf08      	it	eq
 8003e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	bfc4      	itt	gt
 8003e1c:	1a9b      	subgt	r3, r3, r2
 8003e1e:	18ed      	addgt	r5, r5, r3
 8003e20:	341a      	adds	r4, #26
 8003e22:	42b5      	cmp	r5, r6
 8003e24:	d11a      	bne.n	8003e5c <_printf_common+0xcc>
 8003e26:	2000      	movs	r0, #0
 8003e28:	e008      	b.n	8003e3c <_printf_common+0xac>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	4652      	mov	r2, sl
 8003e2e:	4649      	mov	r1, r9
 8003e30:	4638      	mov	r0, r7
 8003e32:	47c0      	blx	r8
 8003e34:	3001      	adds	r0, #1
 8003e36:	d103      	bne.n	8003e40 <_printf_common+0xb0>
 8003e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e40:	3501      	adds	r5, #1
 8003e42:	e7c4      	b.n	8003dce <_printf_common+0x3e>
 8003e44:	2030      	movs	r0, #48	; 0x30
 8003e46:	18e1      	adds	r1, r4, r3
 8003e48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e52:	4422      	add	r2, r4
 8003e54:	3302      	adds	r3, #2
 8003e56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e5a:	e7c5      	b.n	8003de8 <_printf_common+0x58>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	4622      	mov	r2, r4
 8003e60:	4649      	mov	r1, r9
 8003e62:	4638      	mov	r0, r7
 8003e64:	47c0      	blx	r8
 8003e66:	3001      	adds	r0, #1
 8003e68:	d0e6      	beq.n	8003e38 <_printf_common+0xa8>
 8003e6a:	3601      	adds	r6, #1
 8003e6c:	e7d9      	b.n	8003e22 <_printf_common+0x92>
	...

08003e70 <_printf_i>:
 8003e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e74:	460c      	mov	r4, r1
 8003e76:	7e27      	ldrb	r7, [r4, #24]
 8003e78:	4691      	mov	r9, r2
 8003e7a:	2f78      	cmp	r7, #120	; 0x78
 8003e7c:	4680      	mov	r8, r0
 8003e7e:	469a      	mov	sl, r3
 8003e80:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003e82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e86:	d807      	bhi.n	8003e98 <_printf_i+0x28>
 8003e88:	2f62      	cmp	r7, #98	; 0x62
 8003e8a:	d80a      	bhi.n	8003ea2 <_printf_i+0x32>
 8003e8c:	2f00      	cmp	r7, #0
 8003e8e:	f000 80d9 	beq.w	8004044 <_printf_i+0x1d4>
 8003e92:	2f58      	cmp	r7, #88	; 0x58
 8003e94:	f000 80a4 	beq.w	8003fe0 <_printf_i+0x170>
 8003e98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ea0:	e03a      	b.n	8003f18 <_printf_i+0xa8>
 8003ea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ea6:	2b15      	cmp	r3, #21
 8003ea8:	d8f6      	bhi.n	8003e98 <_printf_i+0x28>
 8003eaa:	a001      	add	r0, pc, #4	; (adr r0, 8003eb0 <_printf_i+0x40>)
 8003eac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003eb0:	08003f09 	.word	0x08003f09
 8003eb4:	08003f1d 	.word	0x08003f1d
 8003eb8:	08003e99 	.word	0x08003e99
 8003ebc:	08003e99 	.word	0x08003e99
 8003ec0:	08003e99 	.word	0x08003e99
 8003ec4:	08003e99 	.word	0x08003e99
 8003ec8:	08003f1d 	.word	0x08003f1d
 8003ecc:	08003e99 	.word	0x08003e99
 8003ed0:	08003e99 	.word	0x08003e99
 8003ed4:	08003e99 	.word	0x08003e99
 8003ed8:	08003e99 	.word	0x08003e99
 8003edc:	0800402b 	.word	0x0800402b
 8003ee0:	08003f4d 	.word	0x08003f4d
 8003ee4:	0800400d 	.word	0x0800400d
 8003ee8:	08003e99 	.word	0x08003e99
 8003eec:	08003e99 	.word	0x08003e99
 8003ef0:	0800404d 	.word	0x0800404d
 8003ef4:	08003e99 	.word	0x08003e99
 8003ef8:	08003f4d 	.word	0x08003f4d
 8003efc:	08003e99 	.word	0x08003e99
 8003f00:	08003e99 	.word	0x08003e99
 8003f04:	08004015 	.word	0x08004015
 8003f08:	680b      	ldr	r3, [r1, #0]
 8003f0a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f0e:	1d1a      	adds	r2, r3, #4
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	600a      	str	r2, [r1, #0]
 8003f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e0a4      	b.n	8004066 <_printf_i+0x1f6>
 8003f1c:	6825      	ldr	r5, [r4, #0]
 8003f1e:	6808      	ldr	r0, [r1, #0]
 8003f20:	062e      	lsls	r6, r5, #24
 8003f22:	f100 0304 	add.w	r3, r0, #4
 8003f26:	d50a      	bpl.n	8003f3e <_printf_i+0xce>
 8003f28:	6805      	ldr	r5, [r0, #0]
 8003f2a:	600b      	str	r3, [r1, #0]
 8003f2c:	2d00      	cmp	r5, #0
 8003f2e:	da03      	bge.n	8003f38 <_printf_i+0xc8>
 8003f30:	232d      	movs	r3, #45	; 0x2d
 8003f32:	426d      	negs	r5, r5
 8003f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f38:	230a      	movs	r3, #10
 8003f3a:	485e      	ldr	r0, [pc, #376]	; (80040b4 <_printf_i+0x244>)
 8003f3c:	e019      	b.n	8003f72 <_printf_i+0x102>
 8003f3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f42:	6805      	ldr	r5, [r0, #0]
 8003f44:	600b      	str	r3, [r1, #0]
 8003f46:	bf18      	it	ne
 8003f48:	b22d      	sxthne	r5, r5
 8003f4a:	e7ef      	b.n	8003f2c <_printf_i+0xbc>
 8003f4c:	680b      	ldr	r3, [r1, #0]
 8003f4e:	6825      	ldr	r5, [r4, #0]
 8003f50:	1d18      	adds	r0, r3, #4
 8003f52:	6008      	str	r0, [r1, #0]
 8003f54:	0628      	lsls	r0, r5, #24
 8003f56:	d501      	bpl.n	8003f5c <_printf_i+0xec>
 8003f58:	681d      	ldr	r5, [r3, #0]
 8003f5a:	e002      	b.n	8003f62 <_printf_i+0xf2>
 8003f5c:	0669      	lsls	r1, r5, #25
 8003f5e:	d5fb      	bpl.n	8003f58 <_printf_i+0xe8>
 8003f60:	881d      	ldrh	r5, [r3, #0]
 8003f62:	2f6f      	cmp	r7, #111	; 0x6f
 8003f64:	bf0c      	ite	eq
 8003f66:	2308      	moveq	r3, #8
 8003f68:	230a      	movne	r3, #10
 8003f6a:	4852      	ldr	r0, [pc, #328]	; (80040b4 <_printf_i+0x244>)
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f72:	6866      	ldr	r6, [r4, #4]
 8003f74:	2e00      	cmp	r6, #0
 8003f76:	bfa8      	it	ge
 8003f78:	6821      	ldrge	r1, [r4, #0]
 8003f7a:	60a6      	str	r6, [r4, #8]
 8003f7c:	bfa4      	itt	ge
 8003f7e:	f021 0104 	bicge.w	r1, r1, #4
 8003f82:	6021      	strge	r1, [r4, #0]
 8003f84:	b90d      	cbnz	r5, 8003f8a <_printf_i+0x11a>
 8003f86:	2e00      	cmp	r6, #0
 8003f88:	d04d      	beq.n	8004026 <_printf_i+0x1b6>
 8003f8a:	4616      	mov	r6, r2
 8003f8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f90:	fb03 5711 	mls	r7, r3, r1, r5
 8003f94:	5dc7      	ldrb	r7, [r0, r7]
 8003f96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f9a:	462f      	mov	r7, r5
 8003f9c:	42bb      	cmp	r3, r7
 8003f9e:	460d      	mov	r5, r1
 8003fa0:	d9f4      	bls.n	8003f8c <_printf_i+0x11c>
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d10b      	bne.n	8003fbe <_printf_i+0x14e>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	07df      	lsls	r7, r3, #31
 8003faa:	d508      	bpl.n	8003fbe <_printf_i+0x14e>
 8003fac:	6923      	ldr	r3, [r4, #16]
 8003fae:	6861      	ldr	r1, [r4, #4]
 8003fb0:	4299      	cmp	r1, r3
 8003fb2:	bfde      	ittt	le
 8003fb4:	2330      	movle	r3, #48	; 0x30
 8003fb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fba:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003fbe:	1b92      	subs	r2, r2, r6
 8003fc0:	6122      	str	r2, [r4, #16]
 8003fc2:	464b      	mov	r3, r9
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	4640      	mov	r0, r8
 8003fc8:	f8cd a000 	str.w	sl, [sp]
 8003fcc:	aa03      	add	r2, sp, #12
 8003fce:	f7ff fedf 	bl	8003d90 <_printf_common>
 8003fd2:	3001      	adds	r0, #1
 8003fd4:	d14c      	bne.n	8004070 <_printf_i+0x200>
 8003fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fda:	b004      	add	sp, #16
 8003fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe0:	4834      	ldr	r0, [pc, #208]	; (80040b4 <_printf_i+0x244>)
 8003fe2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003fe6:	680e      	ldr	r6, [r1, #0]
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	f856 5b04 	ldr.w	r5, [r6], #4
 8003fee:	061f      	lsls	r7, r3, #24
 8003ff0:	600e      	str	r6, [r1, #0]
 8003ff2:	d514      	bpl.n	800401e <_printf_i+0x1ae>
 8003ff4:	07d9      	lsls	r1, r3, #31
 8003ff6:	bf44      	itt	mi
 8003ff8:	f043 0320 	orrmi.w	r3, r3, #32
 8003ffc:	6023      	strmi	r3, [r4, #0]
 8003ffe:	b91d      	cbnz	r5, 8004008 <_printf_i+0x198>
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	f023 0320 	bic.w	r3, r3, #32
 8004006:	6023      	str	r3, [r4, #0]
 8004008:	2310      	movs	r3, #16
 800400a:	e7af      	b.n	8003f6c <_printf_i+0xfc>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	f043 0320 	orr.w	r3, r3, #32
 8004012:	6023      	str	r3, [r4, #0]
 8004014:	2378      	movs	r3, #120	; 0x78
 8004016:	4828      	ldr	r0, [pc, #160]	; (80040b8 <_printf_i+0x248>)
 8004018:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800401c:	e7e3      	b.n	8003fe6 <_printf_i+0x176>
 800401e:	065e      	lsls	r6, r3, #25
 8004020:	bf48      	it	mi
 8004022:	b2ad      	uxthmi	r5, r5
 8004024:	e7e6      	b.n	8003ff4 <_printf_i+0x184>
 8004026:	4616      	mov	r6, r2
 8004028:	e7bb      	b.n	8003fa2 <_printf_i+0x132>
 800402a:	680b      	ldr	r3, [r1, #0]
 800402c:	6826      	ldr	r6, [r4, #0]
 800402e:	1d1d      	adds	r5, r3, #4
 8004030:	6960      	ldr	r0, [r4, #20]
 8004032:	600d      	str	r5, [r1, #0]
 8004034:	0635      	lsls	r5, r6, #24
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	d501      	bpl.n	800403e <_printf_i+0x1ce>
 800403a:	6018      	str	r0, [r3, #0]
 800403c:	e002      	b.n	8004044 <_printf_i+0x1d4>
 800403e:	0671      	lsls	r1, r6, #25
 8004040:	d5fb      	bpl.n	800403a <_printf_i+0x1ca>
 8004042:	8018      	strh	r0, [r3, #0]
 8004044:	2300      	movs	r3, #0
 8004046:	4616      	mov	r6, r2
 8004048:	6123      	str	r3, [r4, #16]
 800404a:	e7ba      	b.n	8003fc2 <_printf_i+0x152>
 800404c:	680b      	ldr	r3, [r1, #0]
 800404e:	1d1a      	adds	r2, r3, #4
 8004050:	600a      	str	r2, [r1, #0]
 8004052:	681e      	ldr	r6, [r3, #0]
 8004054:	2100      	movs	r1, #0
 8004056:	4630      	mov	r0, r6
 8004058:	6862      	ldr	r2, [r4, #4]
 800405a:	f000 f82f 	bl	80040bc <memchr>
 800405e:	b108      	cbz	r0, 8004064 <_printf_i+0x1f4>
 8004060:	1b80      	subs	r0, r0, r6
 8004062:	6060      	str	r0, [r4, #4]
 8004064:	6863      	ldr	r3, [r4, #4]
 8004066:	6123      	str	r3, [r4, #16]
 8004068:	2300      	movs	r3, #0
 800406a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800406e:	e7a8      	b.n	8003fc2 <_printf_i+0x152>
 8004070:	4632      	mov	r2, r6
 8004072:	4649      	mov	r1, r9
 8004074:	4640      	mov	r0, r8
 8004076:	6923      	ldr	r3, [r4, #16]
 8004078:	47d0      	blx	sl
 800407a:	3001      	adds	r0, #1
 800407c:	d0ab      	beq.n	8003fd6 <_printf_i+0x166>
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	079b      	lsls	r3, r3, #30
 8004082:	d413      	bmi.n	80040ac <_printf_i+0x23c>
 8004084:	68e0      	ldr	r0, [r4, #12]
 8004086:	9b03      	ldr	r3, [sp, #12]
 8004088:	4298      	cmp	r0, r3
 800408a:	bfb8      	it	lt
 800408c:	4618      	movlt	r0, r3
 800408e:	e7a4      	b.n	8003fda <_printf_i+0x16a>
 8004090:	2301      	movs	r3, #1
 8004092:	4632      	mov	r2, r6
 8004094:	4649      	mov	r1, r9
 8004096:	4640      	mov	r0, r8
 8004098:	47d0      	blx	sl
 800409a:	3001      	adds	r0, #1
 800409c:	d09b      	beq.n	8003fd6 <_printf_i+0x166>
 800409e:	3501      	adds	r5, #1
 80040a0:	68e3      	ldr	r3, [r4, #12]
 80040a2:	9903      	ldr	r1, [sp, #12]
 80040a4:	1a5b      	subs	r3, r3, r1
 80040a6:	42ab      	cmp	r3, r5
 80040a8:	dcf2      	bgt.n	8004090 <_printf_i+0x220>
 80040aa:	e7eb      	b.n	8004084 <_printf_i+0x214>
 80040ac:	2500      	movs	r5, #0
 80040ae:	f104 0619 	add.w	r6, r4, #25
 80040b2:	e7f5      	b.n	80040a0 <_printf_i+0x230>
 80040b4:	08004369 	.word	0x08004369
 80040b8:	0800437a 	.word	0x0800437a

080040bc <memchr>:
 80040bc:	4603      	mov	r3, r0
 80040be:	b510      	push	{r4, lr}
 80040c0:	b2c9      	uxtb	r1, r1
 80040c2:	4402      	add	r2, r0
 80040c4:	4293      	cmp	r3, r2
 80040c6:	4618      	mov	r0, r3
 80040c8:	d101      	bne.n	80040ce <memchr+0x12>
 80040ca:	2000      	movs	r0, #0
 80040cc:	e003      	b.n	80040d6 <memchr+0x1a>
 80040ce:	7804      	ldrb	r4, [r0, #0]
 80040d0:	3301      	adds	r3, #1
 80040d2:	428c      	cmp	r4, r1
 80040d4:	d1f6      	bne.n	80040c4 <memchr+0x8>
 80040d6:	bd10      	pop	{r4, pc}

080040d8 <memcpy>:
 80040d8:	440a      	add	r2, r1
 80040da:	4291      	cmp	r1, r2
 80040dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80040e0:	d100      	bne.n	80040e4 <memcpy+0xc>
 80040e2:	4770      	bx	lr
 80040e4:	b510      	push	{r4, lr}
 80040e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040ea:	4291      	cmp	r1, r2
 80040ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040f0:	d1f9      	bne.n	80040e6 <memcpy+0xe>
 80040f2:	bd10      	pop	{r4, pc}

080040f4 <memmove>:
 80040f4:	4288      	cmp	r0, r1
 80040f6:	b510      	push	{r4, lr}
 80040f8:	eb01 0402 	add.w	r4, r1, r2
 80040fc:	d902      	bls.n	8004104 <memmove+0x10>
 80040fe:	4284      	cmp	r4, r0
 8004100:	4623      	mov	r3, r4
 8004102:	d807      	bhi.n	8004114 <memmove+0x20>
 8004104:	1e43      	subs	r3, r0, #1
 8004106:	42a1      	cmp	r1, r4
 8004108:	d008      	beq.n	800411c <memmove+0x28>
 800410a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800410e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004112:	e7f8      	b.n	8004106 <memmove+0x12>
 8004114:	4601      	mov	r1, r0
 8004116:	4402      	add	r2, r0
 8004118:	428a      	cmp	r2, r1
 800411a:	d100      	bne.n	800411e <memmove+0x2a>
 800411c:	bd10      	pop	{r4, pc}
 800411e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004126:	e7f7      	b.n	8004118 <memmove+0x24>

08004128 <_free_r>:
 8004128:	b538      	push	{r3, r4, r5, lr}
 800412a:	4605      	mov	r5, r0
 800412c:	2900      	cmp	r1, #0
 800412e:	d043      	beq.n	80041b8 <_free_r+0x90>
 8004130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004134:	1f0c      	subs	r4, r1, #4
 8004136:	2b00      	cmp	r3, #0
 8004138:	bfb8      	it	lt
 800413a:	18e4      	addlt	r4, r4, r3
 800413c:	f000 f8d0 	bl	80042e0 <__malloc_lock>
 8004140:	4a1e      	ldr	r2, [pc, #120]	; (80041bc <_free_r+0x94>)
 8004142:	6813      	ldr	r3, [r2, #0]
 8004144:	4610      	mov	r0, r2
 8004146:	b933      	cbnz	r3, 8004156 <_free_r+0x2e>
 8004148:	6063      	str	r3, [r4, #4]
 800414a:	6014      	str	r4, [r2, #0]
 800414c:	4628      	mov	r0, r5
 800414e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004152:	f000 b8cb 	b.w	80042ec <__malloc_unlock>
 8004156:	42a3      	cmp	r3, r4
 8004158:	d90a      	bls.n	8004170 <_free_r+0x48>
 800415a:	6821      	ldr	r1, [r4, #0]
 800415c:	1862      	adds	r2, r4, r1
 800415e:	4293      	cmp	r3, r2
 8004160:	bf01      	itttt	eq
 8004162:	681a      	ldreq	r2, [r3, #0]
 8004164:	685b      	ldreq	r3, [r3, #4]
 8004166:	1852      	addeq	r2, r2, r1
 8004168:	6022      	streq	r2, [r4, #0]
 800416a:	6063      	str	r3, [r4, #4]
 800416c:	6004      	str	r4, [r0, #0]
 800416e:	e7ed      	b.n	800414c <_free_r+0x24>
 8004170:	461a      	mov	r2, r3
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	b10b      	cbz	r3, 800417a <_free_r+0x52>
 8004176:	42a3      	cmp	r3, r4
 8004178:	d9fa      	bls.n	8004170 <_free_r+0x48>
 800417a:	6811      	ldr	r1, [r2, #0]
 800417c:	1850      	adds	r0, r2, r1
 800417e:	42a0      	cmp	r0, r4
 8004180:	d10b      	bne.n	800419a <_free_r+0x72>
 8004182:	6820      	ldr	r0, [r4, #0]
 8004184:	4401      	add	r1, r0
 8004186:	1850      	adds	r0, r2, r1
 8004188:	4283      	cmp	r3, r0
 800418a:	6011      	str	r1, [r2, #0]
 800418c:	d1de      	bne.n	800414c <_free_r+0x24>
 800418e:	6818      	ldr	r0, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	4401      	add	r1, r0
 8004194:	6011      	str	r1, [r2, #0]
 8004196:	6053      	str	r3, [r2, #4]
 8004198:	e7d8      	b.n	800414c <_free_r+0x24>
 800419a:	d902      	bls.n	80041a2 <_free_r+0x7a>
 800419c:	230c      	movs	r3, #12
 800419e:	602b      	str	r3, [r5, #0]
 80041a0:	e7d4      	b.n	800414c <_free_r+0x24>
 80041a2:	6820      	ldr	r0, [r4, #0]
 80041a4:	1821      	adds	r1, r4, r0
 80041a6:	428b      	cmp	r3, r1
 80041a8:	bf01      	itttt	eq
 80041aa:	6819      	ldreq	r1, [r3, #0]
 80041ac:	685b      	ldreq	r3, [r3, #4]
 80041ae:	1809      	addeq	r1, r1, r0
 80041b0:	6021      	streq	r1, [r4, #0]
 80041b2:	6063      	str	r3, [r4, #4]
 80041b4:	6054      	str	r4, [r2, #4]
 80041b6:	e7c9      	b.n	800414c <_free_r+0x24>
 80041b8:	bd38      	pop	{r3, r4, r5, pc}
 80041ba:	bf00      	nop
 80041bc:	20000098 	.word	0x20000098

080041c0 <_malloc_r>:
 80041c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c2:	1ccd      	adds	r5, r1, #3
 80041c4:	f025 0503 	bic.w	r5, r5, #3
 80041c8:	3508      	adds	r5, #8
 80041ca:	2d0c      	cmp	r5, #12
 80041cc:	bf38      	it	cc
 80041ce:	250c      	movcc	r5, #12
 80041d0:	2d00      	cmp	r5, #0
 80041d2:	4606      	mov	r6, r0
 80041d4:	db01      	blt.n	80041da <_malloc_r+0x1a>
 80041d6:	42a9      	cmp	r1, r5
 80041d8:	d903      	bls.n	80041e2 <_malloc_r+0x22>
 80041da:	230c      	movs	r3, #12
 80041dc:	6033      	str	r3, [r6, #0]
 80041de:	2000      	movs	r0, #0
 80041e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041e2:	f000 f87d 	bl	80042e0 <__malloc_lock>
 80041e6:	4921      	ldr	r1, [pc, #132]	; (800426c <_malloc_r+0xac>)
 80041e8:	680a      	ldr	r2, [r1, #0]
 80041ea:	4614      	mov	r4, r2
 80041ec:	b99c      	cbnz	r4, 8004216 <_malloc_r+0x56>
 80041ee:	4f20      	ldr	r7, [pc, #128]	; (8004270 <_malloc_r+0xb0>)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	b923      	cbnz	r3, 80041fe <_malloc_r+0x3e>
 80041f4:	4621      	mov	r1, r4
 80041f6:	4630      	mov	r0, r6
 80041f8:	f000 f862 	bl	80042c0 <_sbrk_r>
 80041fc:	6038      	str	r0, [r7, #0]
 80041fe:	4629      	mov	r1, r5
 8004200:	4630      	mov	r0, r6
 8004202:	f000 f85d 	bl	80042c0 <_sbrk_r>
 8004206:	1c43      	adds	r3, r0, #1
 8004208:	d123      	bne.n	8004252 <_malloc_r+0x92>
 800420a:	230c      	movs	r3, #12
 800420c:	4630      	mov	r0, r6
 800420e:	6033      	str	r3, [r6, #0]
 8004210:	f000 f86c 	bl	80042ec <__malloc_unlock>
 8004214:	e7e3      	b.n	80041de <_malloc_r+0x1e>
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	1b5b      	subs	r3, r3, r5
 800421a:	d417      	bmi.n	800424c <_malloc_r+0x8c>
 800421c:	2b0b      	cmp	r3, #11
 800421e:	d903      	bls.n	8004228 <_malloc_r+0x68>
 8004220:	6023      	str	r3, [r4, #0]
 8004222:	441c      	add	r4, r3
 8004224:	6025      	str	r5, [r4, #0]
 8004226:	e004      	b.n	8004232 <_malloc_r+0x72>
 8004228:	6863      	ldr	r3, [r4, #4]
 800422a:	42a2      	cmp	r2, r4
 800422c:	bf0c      	ite	eq
 800422e:	600b      	streq	r3, [r1, #0]
 8004230:	6053      	strne	r3, [r2, #4]
 8004232:	4630      	mov	r0, r6
 8004234:	f000 f85a 	bl	80042ec <__malloc_unlock>
 8004238:	f104 000b 	add.w	r0, r4, #11
 800423c:	1d23      	adds	r3, r4, #4
 800423e:	f020 0007 	bic.w	r0, r0, #7
 8004242:	1ac2      	subs	r2, r0, r3
 8004244:	d0cc      	beq.n	80041e0 <_malloc_r+0x20>
 8004246:	1a1b      	subs	r3, r3, r0
 8004248:	50a3      	str	r3, [r4, r2]
 800424a:	e7c9      	b.n	80041e0 <_malloc_r+0x20>
 800424c:	4622      	mov	r2, r4
 800424e:	6864      	ldr	r4, [r4, #4]
 8004250:	e7cc      	b.n	80041ec <_malloc_r+0x2c>
 8004252:	1cc4      	adds	r4, r0, #3
 8004254:	f024 0403 	bic.w	r4, r4, #3
 8004258:	42a0      	cmp	r0, r4
 800425a:	d0e3      	beq.n	8004224 <_malloc_r+0x64>
 800425c:	1a21      	subs	r1, r4, r0
 800425e:	4630      	mov	r0, r6
 8004260:	f000 f82e 	bl	80042c0 <_sbrk_r>
 8004264:	3001      	adds	r0, #1
 8004266:	d1dd      	bne.n	8004224 <_malloc_r+0x64>
 8004268:	e7cf      	b.n	800420a <_malloc_r+0x4a>
 800426a:	bf00      	nop
 800426c:	20000098 	.word	0x20000098
 8004270:	2000009c 	.word	0x2000009c

08004274 <_realloc_r>:
 8004274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004276:	4607      	mov	r7, r0
 8004278:	4614      	mov	r4, r2
 800427a:	460e      	mov	r6, r1
 800427c:	b921      	cbnz	r1, 8004288 <_realloc_r+0x14>
 800427e:	4611      	mov	r1, r2
 8004280:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004284:	f7ff bf9c 	b.w	80041c0 <_malloc_r>
 8004288:	b922      	cbnz	r2, 8004294 <_realloc_r+0x20>
 800428a:	f7ff ff4d 	bl	8004128 <_free_r>
 800428e:	4625      	mov	r5, r4
 8004290:	4628      	mov	r0, r5
 8004292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004294:	f000 f830 	bl	80042f8 <_malloc_usable_size_r>
 8004298:	42a0      	cmp	r0, r4
 800429a:	d20f      	bcs.n	80042bc <_realloc_r+0x48>
 800429c:	4621      	mov	r1, r4
 800429e:	4638      	mov	r0, r7
 80042a0:	f7ff ff8e 	bl	80041c0 <_malloc_r>
 80042a4:	4605      	mov	r5, r0
 80042a6:	2800      	cmp	r0, #0
 80042a8:	d0f2      	beq.n	8004290 <_realloc_r+0x1c>
 80042aa:	4631      	mov	r1, r6
 80042ac:	4622      	mov	r2, r4
 80042ae:	f7ff ff13 	bl	80040d8 <memcpy>
 80042b2:	4631      	mov	r1, r6
 80042b4:	4638      	mov	r0, r7
 80042b6:	f7ff ff37 	bl	8004128 <_free_r>
 80042ba:	e7e9      	b.n	8004290 <_realloc_r+0x1c>
 80042bc:	4635      	mov	r5, r6
 80042be:	e7e7      	b.n	8004290 <_realloc_r+0x1c>

080042c0 <_sbrk_r>:
 80042c0:	b538      	push	{r3, r4, r5, lr}
 80042c2:	2300      	movs	r3, #0
 80042c4:	4d05      	ldr	r5, [pc, #20]	; (80042dc <_sbrk_r+0x1c>)
 80042c6:	4604      	mov	r4, r0
 80042c8:	4608      	mov	r0, r1
 80042ca:	602b      	str	r3, [r5, #0]
 80042cc:	f7fd f988 	bl	80015e0 <_sbrk>
 80042d0:	1c43      	adds	r3, r0, #1
 80042d2:	d102      	bne.n	80042da <_sbrk_r+0x1a>
 80042d4:	682b      	ldr	r3, [r5, #0]
 80042d6:	b103      	cbz	r3, 80042da <_sbrk_r+0x1a>
 80042d8:	6023      	str	r3, [r4, #0]
 80042da:	bd38      	pop	{r3, r4, r5, pc}
 80042dc:	200001b8 	.word	0x200001b8

080042e0 <__malloc_lock>:
 80042e0:	4801      	ldr	r0, [pc, #4]	; (80042e8 <__malloc_lock+0x8>)
 80042e2:	f000 b811 	b.w	8004308 <__retarget_lock_acquire_recursive>
 80042e6:	bf00      	nop
 80042e8:	200001c0 	.word	0x200001c0

080042ec <__malloc_unlock>:
 80042ec:	4801      	ldr	r0, [pc, #4]	; (80042f4 <__malloc_unlock+0x8>)
 80042ee:	f000 b80c 	b.w	800430a <__retarget_lock_release_recursive>
 80042f2:	bf00      	nop
 80042f4:	200001c0 	.word	0x200001c0

080042f8 <_malloc_usable_size_r>:
 80042f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042fc:	1f18      	subs	r0, r3, #4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	bfbc      	itt	lt
 8004302:	580b      	ldrlt	r3, [r1, r0]
 8004304:	18c0      	addlt	r0, r0, r3
 8004306:	4770      	bx	lr

08004308 <__retarget_lock_acquire_recursive>:
 8004308:	4770      	bx	lr

0800430a <__retarget_lock_release_recursive>:
 800430a:	4770      	bx	lr

0800430c <_init>:
 800430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430e:	bf00      	nop
 8004310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004312:	bc08      	pop	{r3}
 8004314:	469e      	mov	lr, r3
 8004316:	4770      	bx	lr

08004318 <_fini>:
 8004318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431a:	bf00      	nop
 800431c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800431e:	bc08      	pop	{r3}
 8004320:	469e      	mov	lr, r3
 8004322:	4770      	bx	lr
