
gas_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003624  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003730  08003730  00013730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003758  08003758  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003758  08003758  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003758  08003758  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003758  08003758  00013758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800375c  0800375c  0001375c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000010  08003770  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08003770  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e86c  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e81  00000000  00000000  0002e8a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  00030728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  000311e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000210b  00000000  00000000  00031c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c70e  00000000  00000000  00033d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087a20  00000000  00000000  00040421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c7e41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d40  00000000  00000000  000c7e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003718 	.word	0x08003718

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003718 	.word	0x08003718

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2uiz>:
 80008e8:	004a      	lsls	r2, r1, #1
 80008ea:	d211      	bcs.n	8000910 <__aeabi_d2uiz+0x28>
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d211      	bcs.n	8000916 <__aeabi_d2uiz+0x2e>
 80008f2:	d50d      	bpl.n	8000910 <__aeabi_d2uiz+0x28>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d40e      	bmi.n	800091c <__aeabi_d2uiz+0x34>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d102      	bne.n	8000922 <__aeabi_d2uiz+0x3a>
 800091c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000920:	4770      	bx	lr
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	4770      	bx	lr

08000928 <__aeabi_d2f>:
 8000928:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800092c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000930:	bf24      	itt	cs
 8000932:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000936:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093a:	d90d      	bls.n	8000958 <__aeabi_d2f+0x30>
 800093c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000940:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000944:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000948:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800094c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000950:	bf08      	it	eq
 8000952:	f020 0001 	biceq.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800095c:	d121      	bne.n	80009a2 <__aeabi_d2f+0x7a>
 800095e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000962:	bfbc      	itt	lt
 8000964:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000968:	4770      	bxlt	lr
 800096a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000972:	f1c2 0218 	rsb	r2, r2, #24
 8000976:	f1c2 0c20 	rsb	ip, r2, #32
 800097a:	fa10 f30c 	lsls.w	r3, r0, ip
 800097e:	fa20 f002 	lsr.w	r0, r0, r2
 8000982:	bf18      	it	ne
 8000984:	f040 0001 	orrne.w	r0, r0, #1
 8000988:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000990:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000994:	ea40 000c 	orr.w	r0, r0, ip
 8000998:	fa23 f302 	lsr.w	r3, r3, r2
 800099c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a0:	e7cc      	b.n	800093c <__aeabi_d2f+0x14>
 80009a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009a6:	d107      	bne.n	80009b8 <__aeabi_d2f+0x90>
 80009a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009ac:	bf1e      	ittt	ne
 80009ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009b6:	4770      	bxne	lr
 80009b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <ads1115_encode_cfg>:
/* Low water mark to signal an alert */
static uint8_t ADS1115_LOW_THRES_REG = 0x02;
/* High water mark to signal an alert */
static uint8_t ADS1115_HIGH_THRES_REG = 0x03;

ads1115_raw_conf_t ads1115_encode_cfg(ads1115_config_t * conf){
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	ads1115_raw_conf_t raw_conf = 0x0000;
 80009d0:	2300      	movs	r3, #0
 80009d2:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->os & ADS1115_OS_BIT_MASK) << ADS1115_OS_BIT_OFFSET;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	03db      	lsls	r3, r3, #15
 80009da:	b21a      	sxth	r2, r3
 80009dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	b21b      	sxth	r3, r3
 80009e4:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->pin & ADS1115_PIN_BIT_MASK) << ADS1115_PIN_BIT_OFFSET;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	785b      	ldrb	r3, [r3, #1]
 80009ea:	031b      	lsls	r3, r3, #12
 80009ec:	b21b      	sxth	r3, r3
 80009ee:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b21b      	sxth	r3, r3
 80009fc:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->gain & ADS1115_PGA_BIT_MASK) << ADS1115_PGA_BIT_OFFSET;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	789b      	ldrb	r3, [r3, #2]
 8000a02:	025b      	lsls	r3, r3, #9
 8000a04:	b21b      	sxth	r3, r3
 8000a06:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8000a0a:	b21a      	sxth	r2, r3
 8000a0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	b21b      	sxth	r3, r3
 8000a14:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->mode & ADS1115_MODE_BIT_MASK) << ADS1115_MODE_BIT_OFFSET;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	78db      	ldrb	r3, [r3, #3]
 8000a1a:	021b      	lsls	r3, r3, #8
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a22:	b21a      	sxth	r2, r3
 8000a24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	b21b      	sxth	r3, r3
 8000a2c:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->data_rate & ADS1115_DR_BIT_MASK) << ADS1115_DR_BIT_OFFSET;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	791b      	ldrb	r3, [r3, #4]
 8000a32:	015b      	lsls	r3, r3, #5
 8000a34:	b21b      	sxth	r3, r3
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	b21a      	sxth	r2, r3
 8000a3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	b21b      	sxth	r3, r3
 8000a42:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->comp & ADS1115_COMP_BIT_MASK) << ADS1115_COMP_BIT_OFFSET;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	795b      	ldrb	r3, [r3, #5]
 8000a48:	011b      	lsls	r3, r3, #4
 8000a4a:	b21b      	sxth	r3, r3
 8000a4c:	f003 0310 	and.w	r3, r3, #16
 8000a50:	b21a      	sxth	r2, r3
 8000a52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->polarity & ADS1115_POL_BIT_MASK) << ADS1115_POL_BIT_OFFSET;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	799b      	ldrb	r3, [r3, #6]
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	b21b      	sxth	r3, r3
 8000a64:	f003 0308 	and.w	r3, r3, #8
 8000a68:	b21a      	sxth	r2, r3
 8000a6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	b21b      	sxth	r3, r3
 8000a72:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->latch & ADS1115_LATCH_BIT_MASK) << ADS1115_LATCH_BIT_OFFSET;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	79db      	ldrb	r3, [r3, #7]
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	b21b      	sxth	r3, r3
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	b21a      	sxth	r2, r3
 8000a82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	b21b      	sxth	r3, r3
 8000a8a:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->que & ADS1115_QUEUE_BIT_MASK) << ADS1115_QUEUE_BIT_OFFSET;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	7a1b      	ldrb	r3, [r3, #8]
 8000a90:	b21b      	sxth	r3, r3
 8000a92:	f003 0303 	and.w	r3, r3, #3
 8000a96:	b21a      	sxth	r2, r3
 8000a98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	b21b      	sxth	r3, r3
 8000aa0:	81fb      	strh	r3, [r7, #14]
	return raw_conf;
 8000aa2:	89fb      	ldrh	r3, [r7, #14]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr

08000aae <ads1115_decode_cfg>:

ads1115_config_t   ads1115_decode_cfg(ads1115_raw_conf_t  raw_conf){
 8000aae:	b480      	push	{r7}
 8000ab0:	b087      	sub	sp, #28
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	807b      	strh	r3, [r7, #2]
	ads1115_config_t conf;
	conf.os = (raw_conf >> ADS1115_OS_BIT_OFFSET) & ADS1115_OS_BIT_MASK;
 8000aba:	887b      	ldrh	r3, [r7, #2]
 8000abc:	0bdb      	lsrs	r3, r3, #15
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	733b      	strb	r3, [r7, #12]
	conf.pin = (raw_conf >> ADS1115_PIN_BIT_OFFSET) & ADS1115_PIN_BIT_MASK;
 8000aca:	887b      	ldrh	r3, [r7, #2]
 8000acc:	0b1b      	lsrs	r3, r3, #12
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	737b      	strb	r3, [r7, #13]
	conf.gain = (raw_conf >> ADS1115_PGA_BIT_OFFSET) & ADS1115_PGA_BIT_MASK;
 8000ada:	887b      	ldrh	r3, [r7, #2]
 8000adc:	0a5b      	lsrs	r3, r3, #9
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	73bb      	strb	r3, [r7, #14]
	conf.mode = (raw_conf >> ADS1115_MODE_BIT_OFFSET) & ADS1115_MODE_BIT_MASK;
 8000aea:	887b      	ldrh	r3, [r7, #2]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	73fb      	strb	r3, [r7, #15]
	conf.data_rate = (raw_conf >> ADS1115_DR_BIT_OFFSET) & ADS1115_DR_BIT_MASK;
 8000afa:	887b      	ldrh	r3, [r7, #2]
 8000afc:	095b      	lsrs	r3, r3, #5
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	743b      	strb	r3, [r7, #16]
	conf.polarity = (raw_conf >> ADS1115_POL_BIT_OFFSET) & ADS1115_POL_BIT_MASK;
 8000b0a:	887b      	ldrh	r3, [r7, #2]
 8000b0c:	08db      	lsrs	r3, r3, #3
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	74bb      	strb	r3, [r7, #18]
	conf.latch = (raw_conf >> ADS1115_LATCH_BIT_OFFSET) & ADS1115_LATCH_BIT_MASK;
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	089b      	lsrs	r3, r3, #2
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	74fb      	strb	r3, [r7, #19]
	conf.que = (raw_conf >> ADS1115_QUEUE_BIT_OFFSET) & ADS1115_QUEUE_BIT_MASK;
 8000b2a:	887b      	ldrh	r3, [r7, #2]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	753b      	strb	r3, [r7, #20]
	return conf;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	cb03      	ldmia	r3!, {r0, r1}
 8000b40:	6010      	str	r0, [r2, #0]
 8000b42:	6051      	str	r1, [r2, #4]
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	7213      	strb	r3, [r2, #8]
}
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	371c      	adds	r7, #28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
	...

08000b54 <ads1115_read_cfg>:

HAL_StatusTypeDef ads1115_read_cfg(ads1115_i2c_conf_t* i2c_conf, ads1115_config_t * conf)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b08b      	sub	sp, #44	; 0x2c
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	6178      	str	r0, [r7, #20]
 8000b5c:	6139      	str	r1, [r7, #16]
    ads1115_raw_conf_t raw_conf ;
    HAL_StatusTypeDef err;
    uint8_t raw_conf_eight_bit[2];

    if (i2c_conf == NULL) {
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d101      	bne.n	8000b68 <ads1115_read_cfg+0x14>
        return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	e03c      	b.n	8000be2 <ads1115_read_cfg+0x8e>
    }

    err = HAL_I2C_Master_Transmit(&hi2c1, (i2c_conf->i2c_slave_addr << 1) | I2C_WRITE,  &ADS1115_CONFIGURATION_REG, 1, i2c_conf->timeout);
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	791b      	ldrb	r3, [r3, #4]
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	b21b      	sxth	r3, r3
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	b21b      	sxth	r3, r3
 8000b76:	b299      	uxth	r1, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2301      	movs	r3, #1
 8000b80:	4a1a      	ldr	r2, [pc, #104]	; (8000bec <ads1115_read_cfg+0x98>)
 8000b82:	481b      	ldr	r0, [pc, #108]	; (8000bf0 <ads1115_read_cfg+0x9c>)
 8000b84:	f001 f9f6 	bl	8001f74 <HAL_I2C_Master_Transmit>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	77fb      	strb	r3, [r7, #31]
    if (err == HAL_OK){
 8000b8c:	7ffb      	ldrb	r3, [r7, #31]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d10f      	bne.n	8000bb2 <ads1115_read_cfg+0x5e>
    	err = HAL_I2C_Master_Receive(&hi2c1, (i2c_conf->i2c_slave_addr << 1) | I2C_READ, raw_conf_eight_bit, 2, i2c_conf->timeout);
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	791b      	ldrb	r3, [r3, #4]
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	b299      	uxth	r1, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	f107 0218 	add.w	r2, r7, #24
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	4811      	ldr	r0, [pc, #68]	; (8000bf0 <ads1115_read_cfg+0x9c>)
 8000baa:	f001 fae1 	bl	8002170 <HAL_I2C_Master_Receive>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	77fb      	strb	r3, [r7, #31]
    }
    raw_conf = ((ads1115_raw_conf_t)raw_conf_eight_bit[0] << 8 )| raw_conf_eight_bit[1];
 8000bb2:	7e3b      	ldrb	r3, [r7, #24]
 8000bb4:	021b      	lsls	r3, r3, #8
 8000bb6:	b21a      	sxth	r2, r3
 8000bb8:	7e7b      	ldrb	r3, [r7, #25]
 8000bba:	b21b      	sxth	r3, r3
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	b21b      	sxth	r3, r3
 8000bc0:	83bb      	strh	r3, [r7, #28]
    *conf = ads1115_decode_cfg(raw_conf);
 8000bc2:	693c      	ldr	r4, [r7, #16]
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	8bba      	ldrh	r2, [r7, #28]
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff ff6f 	bl	8000aae <ads1115_decode_cfg>
 8000bd0:	4622      	mov	r2, r4
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	6818      	ldr	r0, [r3, #0]
 8000bd6:	6859      	ldr	r1, [r3, #4]
 8000bd8:	6010      	str	r0, [r2, #0]
 8000bda:	6051      	str	r1, [r2, #4]
 8000bdc:	7a1b      	ldrb	r3, [r3, #8]
 8000bde:	7213      	strb	r3, [r2, #8]
    return err;
 8000be0:	7ffb      	ldrb	r3, [r7, #31]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	; 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd90      	pop	{r4, r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000030 	.word	0x20000030

08000bf4 <ads1115_write_cfg>:

HAL_StatusTypeDef ads1115_write_cfg(ads1115_i2c_conf_t* i2c_conf, ads1115_config_t * conf)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af02      	add	r7, sp, #8
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
	 HAL_StatusTypeDef err;
    ads1115_raw_conf_t raw_conf = ads1115_encode_cfg(conf);
 8000bfe:	6838      	ldr	r0, [r7, #0]
 8000c00:	f7ff fee2 	bl	80009c8 <ads1115_encode_cfg>
 8000c04:	4603      	mov	r3, r0
 8000c06:	81fb      	strh	r3, [r7, #14]
    uint8_t i2c_buf[3] = { ADS1115_CONFIGURATION_REG, raw_conf >> 8, raw_conf & 0xFF};
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <ads1115_write_cfg+0x5c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	723b      	strb	r3, [r7, #8]
 8000c0e:	89fb      	ldrh	r3, [r7, #14]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	727b      	strb	r3, [r7, #9]
 8000c18:	89fb      	ldrh	r3, [r7, #14]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	72bb      	strb	r3, [r7, #10]
    err = HAL_I2C_Master_Transmit(i2c_conf->hi2c, ( i2c_conf->i2c_slave_addr << 1) | I2C_WRITE,
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6818      	ldr	r0, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	791b      	ldrb	r3, [r3, #4]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	b21b      	sxth	r3, r3
 8000c30:	b299      	uxth	r1, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f107 0208 	add.w	r2, r7, #8
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	f001 f999 	bl	8001f74 <HAL_I2C_Master_Transmit>
 8000c42:	4603      	mov	r3, r0
 8000c44:	737b      	strb	r3, [r7, #13]
    		i2c_buf, 3, i2c_conf->timeout);

   return err;
 8000c46:	7b7b      	ldrb	r3, [r7, #13]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000000 	.word	0x20000000

08000c54 <__ads1115_convert_raw_voltage>:

HAL_StatusTypeDef __ads1115_convert_raw_voltage(ads1115_config_t * conf,
                                         int16_t raw_value, int16_t* converted_value)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	607a      	str	r2, [r7, #4]
 8000c60:	817b      	strh	r3, [r7, #10]
    if (converted_value == NULL) {
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <__ads1115_convert_raw_voltage+0x18>
        return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e078      	b.n	8000d5e <__ads1115_convert_raw_voltage+0x10a>
    }
    double buf = ((double)raw_value / 32768);
 8000c6c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fbbd 	bl	80003f0 <__aeabi_i2d>
 8000c76:	f04f 0200 	mov.w	r2, #0
 8000c7a:	4b3b      	ldr	r3, [pc, #236]	; (8000d68 <__ads1115_convert_raw_voltage+0x114>)
 8000c7c:	f7ff fd4c 	bl	8000718 <__aeabi_ddiv>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	e9c7 2306 	strd	r2, r3, [r7, #24]
    HAL_StatusTypeDef err = HAL_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	75fb      	strb	r3, [r7, #23]
    switch (conf->gain) {
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	789b      	ldrb	r3, [r3, #2]
 8000c90:	2b05      	cmp	r3, #5
 8000c92:	d858      	bhi.n	8000d46 <__ads1115_convert_raw_voltage+0xf2>
 8000c94:	a201      	add	r2, pc, #4	; (adr r2, 8000c9c <__ads1115_convert_raw_voltage+0x48>)
 8000c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c9a:	bf00      	nop
 8000c9c:	08000cb5 	.word	0x08000cb5
 8000ca0:	08000ccd 	.word	0x08000ccd
 8000ca4:	08000ce5 	.word	0x08000ce5
 8000ca8:	08000cfd 	.word	0x08000cfd
 8000cac:	08000d15 	.word	0x08000d15
 8000cb0:	08000d2f 	.word	0x08000d2f
		case ADS1115_6_144V: buf = buf * 6144; break;
 8000cb4:	f04f 0200 	mov.w	r2, #0
 8000cb8:	4b2c      	ldr	r3, [pc, #176]	; (8000d6c <__ads1115_convert_raw_voltage+0x118>)
 8000cba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000cbe:	f7ff fc01 	bl	80004c4 <__aeabi_dmul>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000cca:	e03e      	b.n	8000d4a <__ads1115_convert_raw_voltage+0xf6>
		case ADS1115_4_096V: buf = buf * 4096; break;
 8000ccc:	f04f 0200 	mov.w	r2, #0
 8000cd0:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <__ads1115_convert_raw_voltage+0x11c>)
 8000cd2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000cd6:	f7ff fbf5 	bl	80004c4 <__aeabi_dmul>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	460b      	mov	r3, r1
 8000cde:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000ce2:	e032      	b.n	8000d4a <__ads1115_convert_raw_voltage+0xf6>
		case ADS1115_2_048V: buf = buf * 2048; break;
 8000ce4:	f04f 0200 	mov.w	r2, #0
 8000ce8:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <__ads1115_convert_raw_voltage+0x120>)
 8000cea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000cee:	f7ff fbe9 	bl	80004c4 <__aeabi_dmul>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000cfa:	e026      	b.n	8000d4a <__ads1115_convert_raw_voltage+0xf6>
		case ADS1115_1_024V: buf = buf * 1024; break;
 8000cfc:	f04f 0200 	mov.w	r2, #0
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <__ads1115_convert_raw_voltage+0x124>)
 8000d02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d06:	f7ff fbdd 	bl	80004c4 <__aeabi_dmul>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000d12:	e01a      	b.n	8000d4a <__ads1115_convert_raw_voltage+0xf6>
		case ADS1115_0_512V: buf = buf * 512; break;
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8000d1c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d20:	f7ff fbd0 	bl	80004c4 <__aeabi_dmul>
 8000d24:	4602      	mov	r2, r0
 8000d26:	460b      	mov	r3, r1
 8000d28:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000d2c:	e00d      	b.n	8000d4a <__ads1115_convert_raw_voltage+0xf6>
		case ADS1115_0_256V: buf = buf * 256; break;
 8000d2e:	f04f 0200 	mov.w	r2, #0
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <__ads1115_convert_raw_voltage+0x128>)
 8000d34:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d38:	f7ff fbc4 	bl	80004c4 <__aeabi_dmul>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000d44:	e001      	b.n	8000d4a <__ads1115_convert_raw_voltage+0xf6>
		default: return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e009      	b.n	8000d5e <__ads1115_convert_raw_voltage+0x10a>
    }

    *converted_value = (uint16_t)buf;
 8000d4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d4e:	f7ff fdcb 	bl	80008e8 <__aeabi_d2uiz>
 8000d52:	4603      	mov	r3, r0
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	b21a      	sxth	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	801a      	strh	r2, [r3, #0]

    return err;
 8000d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3720      	adds	r7, #32
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40e00000 	.word	0x40e00000
 8000d6c:	40b80000 	.word	0x40b80000
 8000d70:	40b00000 	.word	0x40b00000
 8000d74:	40a00000 	.word	0x40a00000
 8000d78:	40900000 	.word	0x40900000
 8000d7c:	40700000 	.word	0x40700000

08000d80 <ads1115_read_adc_millivolts>:

HAL_StatusTypeDef ads1115_read_adc_millivolts(ads1115_i2c_conf_t* i2c_conf,
		ads1115_config_t *  conf, int16_t* mv)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
	return ads1115_read_to_millivolts(i2c_conf, conf, mv, &ADS1115_CONVERSION_REG);
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <ads1115_read_adc_millivolts+0x24>)
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	68b9      	ldr	r1, [r7, #8]
 8000d92:	68f8      	ldr	r0, [r7, #12]
 8000d94:	f000 f808 	bl	8000da8 <ads1115_read_to_millivolts>
 8000d98:	4603      	mov	r3, r0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000002c 	.word	0x2000002c

08000da8 <ads1115_read_to_millivolts>:
	return ads1115_read_to_millivolts(i2c_conf, conf, mv_value, &ADS1115_HIGH_THRES_REG);
}

HAL_StatusTypeDef ads1115_read_to_millivolts(ads1115_i2c_conf_t* i2c_conf,
		ads1115_config_t *  conf, int16_t* mv_value, uint8_t * dev_register)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af02      	add	r7, sp, #8
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	603b      	str	r3, [r7, #0]
	int16_t raw_value = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	82bb      	strh	r3, [r7, #20]

	HAL_StatusTypeDef err = HAL_OK;;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	75fb      	strb	r3, [r7, #23]

	if (i2c_conf == NULL) {
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d101      	bne.n	8000dc8 <ads1115_read_to_millivolts+0x20>
		return err;
 8000dc4:	7dfb      	ldrb	r3, [r7, #23]
 8000dc6:	e043      	b.n	8000e50 <ads1115_read_to_millivolts+0xa8>
	}
	err = ads1115_read_cfg(i2c_conf, conf);
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f7ff fec2 	bl	8000b54 <ads1115_read_cfg>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	75fb      	strb	r3, [r7, #23]
	if (err == HAL_OK){
 8000dd4:	7dfb      	ldrb	r3, [r7, #23]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d139      	bne.n	8000e4e <ads1115_read_to_millivolts+0xa6>
		uint8_t conv_res_eight_bit[2];
		err = HAL_I2C_Master_Transmit(i2c_conf->hi2c,  (i2c_conf->i2c_slave_addr << 1) | I2C_WRITE,
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	6818      	ldr	r0, [r3, #0]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	791b      	ldrb	r3, [r3, #4]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	b21b      	sxth	r3, r3
 8000dec:	b299      	uxth	r1, r3
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	2301      	movs	r3, #1
 8000df6:	683a      	ldr	r2, [r7, #0]
 8000df8:	f001 f8bc 	bl	8001f74 <HAL_I2C_Master_Transmit>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	75fb      	strb	r3, [r7, #23]
				dev_register, 1, i2c_conf->timeout);
		if (err == HAL_OK){
 8000e00:	7dfb      	ldrb	r3, [r7, #23]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d110      	bne.n	8000e28 <ads1115_read_to_millivolts+0x80>
			err = HAL_I2C_Master_Receive(i2c_conf->hi2c, (i2c_conf->i2c_slave_addr << 1),
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	6818      	ldr	r0, [r3, #0]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	791b      	ldrb	r3, [r3, #4]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	b299      	uxth	r1, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	f107 0210 	add.w	r2, r7, #16
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	2302      	movs	r3, #2
 8000e20:	f001 f9a6 	bl	8002170 <HAL_I2C_Master_Receive>
 8000e24:	4603      	mov	r3, r0
 8000e26:	75fb      	strb	r3, [r7, #23]
					conv_res_eight_bit, 2, i2c_conf->timeout);
		}
		raw_value = ((int16_t)conv_res_eight_bit[0] << 8 )| conv_res_eight_bit[1];
 8000e28:	7c3b      	ldrb	r3, [r7, #16]
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	b21a      	sxth	r2, r3
 8000e2e:	7c7b      	ldrb	r3, [r7, #17]
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	4313      	orrs	r3, r2
 8000e34:	82bb      	strh	r3, [r7, #20]
		if (err == HAL_OK) {
 8000e36:	7dfb      	ldrb	r3, [r7, #23]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d108      	bne.n	8000e4e <ads1115_read_to_millivolts+0xa6>
			err = __ads1115_convert_raw_voltage(conf, raw_value, mv_value);
 8000e3c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	4619      	mov	r1, r3
 8000e44:	68b8      	ldr	r0, [r7, #8]
 8000e46:	f7ff ff05 	bl	8000c54 <__ads1115_convert_raw_voltage>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	75fb      	strb	r3, [r7, #23]
		}
	}
	return err;
 8000e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <lm60_get_temp>:

#include <string.h>
#include <stdio.h>
#include "hw_config.h"

HAL_StatusTypeDef lm60_get_temp(lm60_cfg_t* lm60_conf, float * temp_c){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
	int16_t mv;
	HAL_StatusTypeDef err = ads1115_write_cfg(&lm60_conf->ads_i2c_conf,  &lm60_conf->ads_reg_conf);
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	330c      	adds	r3, #12
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	f7ff fec2 	bl	8000bf4 <ads1115_write_cfg>
 8000e70:	4603      	mov	r3, r0
 8000e72:	73fb      	strb	r3, [r7, #15]

	if (err == HAL_OK){
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d121      	bne.n	8000ebe <lm60_get_temp+0x66>
		err = ads1115_read_adc_millivolts(&lm60_conf->ads_i2c_conf, &lm60_conf->ads_reg_conf, &mv);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	330c      	adds	r3, #12
 8000e80:	f107 020c 	add.w	r2, r7, #12
 8000e84:	4619      	mov	r1, r3
 8000e86:	f7ff ff7b 	bl	8000d80 <ads1115_read_adc_millivolts>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	73fb      	strb	r3, [r7, #15]
		if( err == HAL_OK){
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d114      	bne.n	8000ebe <lm60_get_temp+0x66>
			* temp_c = (mv - 424) / 6.25;
 8000e94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e98:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff faa7 	bl	80003f0 <__aeabi_i2d>
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <lm60_get_temp+0x70>)
 8000ea8:	f7ff fc36 	bl	8000718 <__aeabi_ddiv>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f7ff fd38 	bl	8000928 <__aeabi_d2f>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	601a      	str	r2, [r3, #0]
		}
	}
	return err;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40190000 	.word	0x40190000

08000ecc <hw_conf_lm60>:
 *      Author: dann
 */
#include "hw_config.h"
#include "stm32f1xx_hal.h"

lm60_cfg_t hw_conf_lm60(){
 8000ecc:	b480      	push	{r7}
 8000ece:	b08f      	sub	sp, #60	; 0x3c
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	return (lm60_cfg_t){
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <hw_conf_lm60+0x5c>)
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2248      	movs	r2, #72	; 0x48
 8000ede:	711a      	strb	r2, [r3, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2264      	movs	r2, #100	; 0x64
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	731a      	strb	r2, [r3, #12]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2205      	movs	r2, #5
 8000ef0:	735a      	strb	r2, [r3, #13]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	739a      	strb	r2, [r3, #14]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2201      	movs	r2, #1
 8000efc:	73da      	strb	r2, [r3, #15]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2204      	movs	r2, #4
 8000f02:	741a      	strb	r2, [r3, #16]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	745a      	strb	r2, [r3, #17]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	749a      	strb	r2, [r3, #18]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	74da      	strb	r2, [r3, #19]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2203      	movs	r2, #3
 8000f1a:	751a      	strb	r2, [r3, #20]
			.polarity = ADS1115_DEF_POL,
			.latch = ADS1115_DEF_LATCH,
			.que = ADS1115_COMP_DISABLE,
		},
	};
}
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	373c      	adds	r7, #60	; 0x3c
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000030 	.word	0x20000030

08000f2c <MX_USART1_UART_Init>:
		.pages = 256,
	};
}

void MX_USART1_UART_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <MX_USART1_UART_Init+0x50>)
 8000f34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f52:	220c      	movs	r2, #12
 8000f54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f64:	f002 fad0 	bl	8003508 <HAL_UART_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f6e:	f000 f897 	bl	80010a0 <Error_Handler>
  }
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000100 	.word	0x20000100
 8000f7c:	40013800 	.word	0x40013800

08000f80 <MX_CAN_Init>:

void MX_CAN_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  hcan.Instance = CAN1;
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <MX_CAN_Init+0x60>)
 8000f86:	4a17      	ldr	r2, [pc, #92]	; (8000fe4 <MX_CAN_Init+0x64>)
 8000f88:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <MX_CAN_Init+0x60>)
 8000f8c:	2210      	movs	r2, #16
 8000f8e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <MX_CAN_Init+0x60>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_CAN_Init+0x60>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000f9c:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_CAN_Init+0x60>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_CAN_Init+0x60>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <MX_CAN_Init+0x60>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_CAN_Init+0x60>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <MX_CAN_Init+0x60>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_CAN_Init+0x60>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <MX_CAN_Init+0x60>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_CAN_Init+0x60>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <MX_CAN_Init+0x60>)
 8000fce:	f000 fb29 	bl	8001624 <HAL_CAN_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000fd8:	f000 f862 	bl	80010a0 <Error_Handler>
  }
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200000d8 	.word	0x200000d8
 8000fe4:	40006400 	.word	0x40006400

08000fe8 <MX_I2C1_Init>:

void MX_I2C1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <MX_I2C1_Init+0x50>)
 8000fee:	4a13      	ldr	r2, [pc, #76]	; (800103c <MX_I2C1_Init+0x54>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_I2C1_Init+0x50>)
 8000ff4:	4a12      	ldr	r2, [pc, #72]	; (8001040 <MX_I2C1_Init+0x58>)
 8000ff6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_I2C1_Init+0x50>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_I2C1_Init+0x50>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_I2C1_Init+0x50>)
 8001006:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800100a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <MX_I2C1_Init+0x50>)
 800100e:	2200      	movs	r2, #0
 8001010:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_I2C1_Init+0x50>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <MX_I2C1_Init+0x50>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_I2C1_Init+0x50>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <MX_I2C1_Init+0x50>)
 8001026:	f000 fe61 	bl	8001cec <HAL_I2C_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001030:	f000 f836 	bl	80010a0 <Error_Handler>
  }
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000030 	.word	0x20000030
 800103c:	40005400 	.word	0x40005400
 8001040:	000186a0 	.word	0x000186a0

08001044 <MX_I2C2_Init>:

void MX_I2C2_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  hi2c2.Instance = I2C2;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_I2C2_Init+0x50>)
 800104a:	4a13      	ldr	r2, [pc, #76]	; (8001098 <MX_I2C2_Init+0x54>)
 800104c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_I2C2_Init+0x50>)
 8001050:	4a12      	ldr	r2, [pc, #72]	; (800109c <MX_I2C2_Init+0x58>)
 8001052:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_I2C2_Init+0x50>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_I2C2_Init+0x50>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_I2C2_Init+0x50>)
 8001062:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001066:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <MX_I2C2_Init+0x50>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_I2C2_Init+0x50>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <MX_I2C2_Init+0x50>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_I2C2_Init+0x50>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <MX_I2C2_Init+0x50>)
 8001082:	f000 fe33 	bl	8001cec <HAL_I2C_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800108c:	f000 f808 	bl	80010a0 <Error_Handler>
  }
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000084 	.word	0x20000084
 8001098:	40005800 	.word	0x40005800
 800109c:	000186a0 	.word	0x000186a0

080010a0 <Error_Handler>:

void Error_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <Error_Handler+0x8>
	...

080010ac <MX_GPIO_Init>:
  }
  /* USER CODE END Error_Handler_Debug */
}

void MX_GPIO_Init(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_GPIO_Init+0x58>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	4a13      	ldr	r2, [pc, #76]	; (8001104 <MX_GPIO_Init+0x58>)
 80010b8:	f043 0320 	orr.w	r3, r3, #32
 80010bc:	6193      	str	r3, [r2, #24]
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_GPIO_Init+0x58>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	f003 0320 	and.w	r3, r3, #32
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_GPIO_Init+0x58>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <MX_GPIO_Init+0x58>)
 80010d0:	f043 0308 	orr.w	r3, r3, #8
 80010d4:	6193      	str	r3, [r2, #24]
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <MX_GPIO_Init+0x58>)
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	f003 0308 	and.w	r3, r3, #8
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <MX_GPIO_Init+0x58>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	4a07      	ldr	r2, [pc, #28]	; (8001104 <MX_GPIO_Init+0x58>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	6193      	str	r3, [r2, #24]
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <MX_GPIO_Init+0x58>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	40021000 	.word	0x40021000

08001108 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b090      	sub	sp, #64	; 0x40
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 0318 	add.w	r3, r7, #24
 8001112:	2228      	movs	r2, #40	; 0x28
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f002 faf6 	bl	8003708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800112a:	2301      	movs	r3, #1
 800112c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800112e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001132:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001138:	2301      	movs	r3, #1
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113c:	2302      	movs	r3, #2
 800113e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001140:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001144:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001146:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114c:	f107 0318 	add.w	r3, r7, #24
 8001150:	4618      	mov	r0, r3
 8001152:	f001 fd99 	bl	8002c88 <HAL_RCC_OscConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800115c:	f7ff ffa0 	bl	80010a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001160:	230f      	movs	r3, #15
 8001162:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001164:	2302      	movs	r3, #2
 8001166:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800116c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001170:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2102      	movs	r1, #2
 800117a:	4618      	mov	r0, r3
 800117c:	f002 f804 	bl	8003188 <HAL_RCC_ClockConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001186:	f7ff ff8b 	bl	80010a0 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800118a:	f002 f8e7 	bl	800335c <HAL_RCC_EnableCSS>
}
 800118e:	bf00      	nop
 8001190:	3740      	adds	r7, #64	; 0x40
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b088      	sub	sp, #32
 800119a:	af00      	add	r7, sp, #0
  HAL_Init();
 800119c:	f000 f9bc 	bl	8001518 <HAL_Init>

  SystemClock_Config();
 80011a0:	f7ff ffb2 	bl	8001108 <SystemClock_Config>

  MX_GPIO_Init();
 80011a4:	f7ff ff82 	bl	80010ac <MX_GPIO_Init>
  MX_I2C2_Init();
 80011a8:	f7ff ff4c 	bl	8001044 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80011ac:	f7ff febe 	bl	8000f2c <MX_USART1_UART_Init>
  MX_CAN_Init();
 80011b0:	f7ff fee6 	bl	8000f80 <MX_CAN_Init>
  MX_I2C1_Init();
 80011b4:	f7ff ff18 	bl	8000fe8 <MX_I2C1_Init>

  float temp_c = 0;
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
  lm60_cfg_t lm60 = hw_conf_lm60();
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fe83 	bl	8000ecc <hw_conf_lm60>

  while (1){
	  lm60_get_temp(&lm60, &temp_c);
 80011c6:	f107 021c 	add.w	r2, r7, #28
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fe42 	bl	8000e58 <lm60_get_temp>
	 HAL_Delay(1000);
 80011d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d8:	f000 fa00 	bl	80015dc <HAL_Delay>
	  lm60_get_temp(&lm60, &temp_c);
 80011dc:	e7f3      	b.n	80011c6 <main+0x30>
	...

080011e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_MspInit+0x5c>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	4a14      	ldr	r2, [pc, #80]	; (800123c <HAL_MspInit+0x5c>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6193      	str	r3, [r2, #24]
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_MspInit+0x5c>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <HAL_MspInit+0x5c>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <HAL_MspInit+0x5c>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001208:	61d3      	str	r3, [r2, #28]
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <HAL_MspInit+0x5c>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <HAL_MspInit+0x60>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <HAL_MspInit+0x60>)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	bf00      	nop
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	40021000 	.word	0x40021000
 8001240:	40010000 	.word	0x40010000

08001244 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a1c      	ldr	r2, [pc, #112]	; (80012d0 <HAL_CAN_MspInit+0x8c>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d131      	bne.n	80012c8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <HAL_CAN_MspInit+0x90>)
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	4a1a      	ldr	r2, [pc, #104]	; (80012d4 <HAL_CAN_MspInit+0x90>)
 800126a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800126e:	61d3      	str	r3, [r2, #28]
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <HAL_CAN_MspInit+0x90>)
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_CAN_MspInit+0x90>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <HAL_CAN_MspInit+0x90>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_CAN_MspInit+0x90>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001294:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001298:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	4619      	mov	r1, r3
 80012a8:	480b      	ldr	r0, [pc, #44]	; (80012d8 <HAL_CAN_MspInit+0x94>)
 80012aa:	f000 fb9b 	bl	80019e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4619      	mov	r1, r3
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <HAL_CAN_MspInit+0x94>)
 80012c4:	f000 fb8e 	bl	80019e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80012c8:	bf00      	nop
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40006400 	.word	0x40006400
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010800 	.word	0x40010800

080012dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	; 0x30
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a32      	ldr	r2, [pc, #200]	; (80013c0 <HAL_I2C_MspInit+0xe4>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d133      	bne.n	8001364 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fc:	4b31      	ldr	r3, [pc, #196]	; (80013c4 <HAL_I2C_MspInit+0xe8>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a30      	ldr	r2, [pc, #192]	; (80013c4 <HAL_I2C_MspInit+0xe8>)
 8001302:	f043 0308 	orr.w	r3, r3, #8
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <HAL_I2C_MspInit+0xe8>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0308 	and.w	r3, r3, #8
 8001310:	61bb      	str	r3, [r7, #24]
 8001312:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001314:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800131a:	2312      	movs	r3, #18
 800131c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	4827      	ldr	r0, [pc, #156]	; (80013c8 <HAL_I2C_MspInit+0xec>)
 800132a:	f000 fb5b 	bl	80019e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800132e:	4b27      	ldr	r3, [pc, #156]	; (80013cc <HAL_I2C_MspInit+0xf0>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001336:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800133c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133e:	f043 0302 	orr.w	r3, r3, #2
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001344:	4a21      	ldr	r2, [pc, #132]	; (80013cc <HAL_I2C_MspInit+0xf0>)
 8001346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001348:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <HAL_I2C_MspInit+0xe8>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4a1d      	ldr	r2, [pc, #116]	; (80013c4 <HAL_I2C_MspInit+0xe8>)
 8001350:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001354:	61d3      	str	r3, [r2, #28]
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <HAL_I2C_MspInit+0xe8>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001362:	e029      	b.n	80013b8 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a19      	ldr	r2, [pc, #100]	; (80013d0 <HAL_I2C_MspInit+0xf4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d124      	bne.n	80013b8 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_I2C_MspInit+0xe8>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <HAL_I2C_MspInit+0xe8>)
 8001374:	f043 0308 	orr.w	r3, r3, #8
 8001378:	6193      	str	r3, [r2, #24]
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_I2C_MspInit+0xe8>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001386:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800138a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800138c:	2312      	movs	r3, #18
 800138e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	480b      	ldr	r0, [pc, #44]	; (80013c8 <HAL_I2C_MspInit+0xec>)
 800139c:	f000 fb22 	bl	80019e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_I2C_MspInit+0xe8>)
 80013a2:	69db      	ldr	r3, [r3, #28]
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_I2C_MspInit+0xe8>)
 80013a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013aa:	61d3      	str	r3, [r2, #28]
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <HAL_I2C_MspInit+0xe8>)
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	bf00      	nop
 80013ba:	3730      	adds	r7, #48	; 0x30
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40005400 	.word	0x40005400
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010c00 	.word	0x40010c00
 80013cc:	40010000 	.word	0x40010000
 80013d0:	40005800 	.word	0x40005800

080013d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a1c      	ldr	r2, [pc, #112]	; (8001460 <HAL_UART_MspInit+0x8c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d131      	bne.n	8001458 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_UART_MspInit+0x90>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	4a1a      	ldr	r2, [pc, #104]	; (8001464 <HAL_UART_MspInit+0x90>)
 80013fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fe:	6193      	str	r3, [r2, #24]
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HAL_UART_MspInit+0x90>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <HAL_UART_MspInit+0x90>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a14      	ldr	r2, [pc, #80]	; (8001464 <HAL_UART_MspInit+0x90>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_UART_MspInit+0x90>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001428:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	4619      	mov	r1, r3
 8001438:	480b      	ldr	r0, [pc, #44]	; (8001468 <HAL_UART_MspInit+0x94>)
 800143a:	f000 fad3 	bl	80019e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800143e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001442:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	4619      	mov	r1, r3
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <HAL_UART_MspInit+0x94>)
 8001454:	f000 fac6 	bl	80019e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001458:	bf00      	nop
 800145a:	3720      	adds	r7, #32
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40013800 	.word	0x40013800
 8001464:	40021000 	.word	0x40021000
 8001468:	40010800 	.word	0x40010800

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001470:	f002 f812 	bl	8003498 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <NMI_Handler+0x8>

08001476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <HardFault_Handler+0x4>

0800147c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <MemManage_Handler+0x4>

08001482 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <BusFault_Handler+0x4>

08001488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <UsageFault_Handler+0x4>

0800148e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr

0800149a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr

080014a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr

080014b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b6:	f000 f875 	bl	80015a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}

080014be <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
	...

080014cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014cc:	480c      	ldr	r0, [pc, #48]	; (8001500 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ce:	490d      	ldr	r1, [pc, #52]	; (8001504 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014d0:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d4:	e002      	b.n	80014dc <LoopCopyDataInit>

080014d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014da:	3304      	adds	r3, #4

080014dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e0:	d3f9      	bcc.n	80014d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014e4:	4c0a      	ldr	r4, [pc, #40]	; (8001510 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e8:	e001      	b.n	80014ee <LoopFillZerobss>

080014ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ec:	3204      	adds	r2, #4

080014ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f0:	d3fb      	bcc.n	80014ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014f2:	f7ff ffe4 	bl	80014be <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014f6:	f002 f8e3 	bl	80036c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014fa:	f7ff fe4c 	bl	8001196 <main>
  bx lr
 80014fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001504:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001508:	08003760 	.word	0x08003760
  ldr r2, =_sbss
 800150c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001510:	20000148 	.word	0x20000148

08001514 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001514:	e7fe      	b.n	8001514 <ADC1_2_IRQHandler>
	...

08001518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <HAL_Init+0x28>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a07      	ldr	r2, [pc, #28]	; (8001540 <HAL_Init+0x28>)
 8001522:	f043 0310 	orr.w	r3, r3, #16
 8001526:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001528:	2003      	movs	r0, #3
 800152a:	f000 fa27 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152e:	200f      	movs	r0, #15
 8001530:	f000 f808 	bl	8001544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001534:	f7ff fe54 	bl	80011e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40022000 	.word	0x40022000

08001544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_InitTick+0x54>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_InitTick+0x58>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155a:	fbb3 f3f1 	udiv	r3, r3, r1
 800155e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fa31 	bl	80019ca <HAL_SYSTICK_Config>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e00e      	b.n	8001590 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b0f      	cmp	r3, #15
 8001576:	d80a      	bhi.n	800158e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001578:	2200      	movs	r2, #0
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001580:	f000 fa07 	bl	8001992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001584:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <HAL_InitTick+0x5c>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	e000      	b.n	8001590 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
}
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000004 	.word	0x20000004
 800159c:	2000000c 	.word	0x2000000c
 80015a0:	20000008 	.word	0x20000008

080015a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <HAL_IncTick+0x1c>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <HAL_IncTick+0x20>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4413      	add	r3, r2
 80015b4:	4a03      	ldr	r2, [pc, #12]	; (80015c4 <HAL_IncTick+0x20>)
 80015b6:	6013      	str	r3, [r2, #0]
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	2000000c 	.word	0x2000000c
 80015c4:	20000144 	.word	0x20000144

080015c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b02      	ldr	r3, [pc, #8]	; (80015d8 <HAL_GetTick+0x10>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	20000144 	.word	0x20000144

080015dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e4:	f7ff fff0 	bl	80015c8 <HAL_GetTick>
 80015e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015f4:	d005      	beq.n	8001602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_Delay+0x44>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4413      	add	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001602:	bf00      	nop
 8001604:	f7ff ffe0 	bl	80015c8 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	429a      	cmp	r2, r3
 8001612:	d8f7      	bhi.n	8001604 <HAL_Delay+0x28>
  {
  }
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000000c 	.word	0x2000000c

08001624 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0ed      	b.n	8001812 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 3020 	ldrb.w	r3, [r3, #32]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fdfe 	bl	8001244 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0201 	orr.w	r2, r2, #1
 8001656:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001658:	f7ff ffb6 	bl	80015c8 <HAL_GetTick>
 800165c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800165e:	e012      	b.n	8001686 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001660:	f7ff ffb2 	bl	80015c8 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b0a      	cmp	r3, #10
 800166c:	d90b      	bls.n	8001686 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2205      	movs	r2, #5
 800167e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e0c5      	b.n	8001812 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0e5      	beq.n	8001660 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0202 	bic.w	r2, r2, #2
 80016a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016a4:	f7ff ff90 	bl	80015c8 <HAL_GetTick>
 80016a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016aa:	e012      	b.n	80016d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016ac:	f7ff ff8c 	bl	80015c8 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b0a      	cmp	r3, #10
 80016b8:	d90b      	bls.n	80016d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2205      	movs	r2, #5
 80016ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e09f      	b.n	8001812 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1e5      	bne.n	80016ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7e1b      	ldrb	r3, [r3, #24]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d108      	bne.n	80016fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	e007      	b.n	800170a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001708:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7e5b      	ldrb	r3, [r3, #25]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d108      	bne.n	8001724 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	e007      	b.n	8001734 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001732:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7e9b      	ldrb	r3, [r3, #26]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d108      	bne.n	800174e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0220 	orr.w	r2, r2, #32
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	e007      	b.n	800175e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0220 	bic.w	r2, r2, #32
 800175c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	7edb      	ldrb	r3, [r3, #27]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d108      	bne.n	8001778 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0210 	bic.w	r2, r2, #16
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	e007      	b.n	8001788 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0210 	orr.w	r2, r2, #16
 8001786:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7f1b      	ldrb	r3, [r3, #28]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d108      	bne.n	80017a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0208 	orr.w	r2, r2, #8
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	e007      	b.n	80017b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0208 	bic.w	r2, r2, #8
 80017b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	7f5b      	ldrb	r3, [r3, #29]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d108      	bne.n	80017cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 0204 	orr.w	r2, r2, #4
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	e007      	b.n	80017dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0204 	bic.w	r2, r2, #4
 80017da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	431a      	orrs	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	ea42 0103 	orr.w	r1, r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	1e5a      	subs	r2, r3, #1
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001838:	4013      	ands	r3, r2
 800183a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184e:	4a04      	ldr	r2, [pc, #16]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60d3      	str	r3, [r2, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <__NVIC_GetPriorityGrouping+0x18>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f003 0307 	and.w	r3, r3, #7
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	6039      	str	r1, [r7, #0]
 800188a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001890:	2b00      	cmp	r3, #0
 8001892:	db0a      	blt.n	80018aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	b2da      	uxtb	r2, r3
 8001898:	490c      	ldr	r1, [pc, #48]	; (80018cc <__NVIC_SetPriority+0x4c>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	0112      	lsls	r2, r2, #4
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	440b      	add	r3, r1
 80018a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a8:	e00a      	b.n	80018c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4908      	ldr	r1, [pc, #32]	; (80018d0 <__NVIC_SetPriority+0x50>)
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	3b04      	subs	r3, #4
 80018b8:	0112      	lsls	r2, r2, #4
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	440b      	add	r3, r1
 80018be:	761a      	strb	r2, [r3, #24]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000e100 	.word	0xe000e100
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b089      	sub	sp, #36	; 0x24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f1c3 0307 	rsb	r3, r3, #7
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	bf28      	it	cs
 80018f2:	2304      	movcs	r3, #4
 80018f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3304      	adds	r3, #4
 80018fa:	2b06      	cmp	r3, #6
 80018fc:	d902      	bls.n	8001904 <NVIC_EncodePriority+0x30>
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3b03      	subs	r3, #3
 8001902:	e000      	b.n	8001906 <NVIC_EncodePriority+0x32>
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43da      	mvns	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	401a      	ands	r2, r3
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800191c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	43d9      	mvns	r1, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	4313      	orrs	r3, r2
         );
}
 800192e:	4618      	mov	r0, r3
 8001930:	3724      	adds	r7, #36	; 0x24
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001948:	d301      	bcc.n	800194e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194a:	2301      	movs	r3, #1
 800194c:	e00f      	b.n	800196e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <SysTick_Config+0x40>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001956:	210f      	movs	r1, #15
 8001958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800195c:	f7ff ff90 	bl	8001880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <SysTick_Config+0x40>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001966:	4b04      	ldr	r3, [pc, #16]	; (8001978 <SysTick_Config+0x40>)
 8001968:	2207      	movs	r2, #7
 800196a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	e000e010 	.word	0xe000e010

0800197c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff49 	bl	800181c <__NVIC_SetPriorityGrouping>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a4:	f7ff ff5e 	bl	8001864 <__NVIC_GetPriorityGrouping>
 80019a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	6978      	ldr	r0, [r7, #20]
 80019b0:	f7ff ff90 	bl	80018d4 <NVIC_EncodePriority>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff5f 	bl	8001880 <__NVIC_SetPriority>
}
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ffb0 	bl	8001938 <SysTick_Config>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b08b      	sub	sp, #44	; 0x2c
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f6:	e169      	b.n	8001ccc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019f8:	2201      	movs	r2, #1
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	f040 8158 	bne.w	8001cc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4a9a      	ldr	r2, [pc, #616]	; (8001c84 <HAL_GPIO_Init+0x2a0>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d05e      	beq.n	8001ade <HAL_GPIO_Init+0xfa>
 8001a20:	4a98      	ldr	r2, [pc, #608]	; (8001c84 <HAL_GPIO_Init+0x2a0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d875      	bhi.n	8001b12 <HAL_GPIO_Init+0x12e>
 8001a26:	4a98      	ldr	r2, [pc, #608]	; (8001c88 <HAL_GPIO_Init+0x2a4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d058      	beq.n	8001ade <HAL_GPIO_Init+0xfa>
 8001a2c:	4a96      	ldr	r2, [pc, #600]	; (8001c88 <HAL_GPIO_Init+0x2a4>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d86f      	bhi.n	8001b12 <HAL_GPIO_Init+0x12e>
 8001a32:	4a96      	ldr	r2, [pc, #600]	; (8001c8c <HAL_GPIO_Init+0x2a8>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d052      	beq.n	8001ade <HAL_GPIO_Init+0xfa>
 8001a38:	4a94      	ldr	r2, [pc, #592]	; (8001c8c <HAL_GPIO_Init+0x2a8>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d869      	bhi.n	8001b12 <HAL_GPIO_Init+0x12e>
 8001a3e:	4a94      	ldr	r2, [pc, #592]	; (8001c90 <HAL_GPIO_Init+0x2ac>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d04c      	beq.n	8001ade <HAL_GPIO_Init+0xfa>
 8001a44:	4a92      	ldr	r2, [pc, #584]	; (8001c90 <HAL_GPIO_Init+0x2ac>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d863      	bhi.n	8001b12 <HAL_GPIO_Init+0x12e>
 8001a4a:	4a92      	ldr	r2, [pc, #584]	; (8001c94 <HAL_GPIO_Init+0x2b0>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d046      	beq.n	8001ade <HAL_GPIO_Init+0xfa>
 8001a50:	4a90      	ldr	r2, [pc, #576]	; (8001c94 <HAL_GPIO_Init+0x2b0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d85d      	bhi.n	8001b12 <HAL_GPIO_Init+0x12e>
 8001a56:	2b12      	cmp	r3, #18
 8001a58:	d82a      	bhi.n	8001ab0 <HAL_GPIO_Init+0xcc>
 8001a5a:	2b12      	cmp	r3, #18
 8001a5c:	d859      	bhi.n	8001b12 <HAL_GPIO_Init+0x12e>
 8001a5e:	a201      	add	r2, pc, #4	; (adr r2, 8001a64 <HAL_GPIO_Init+0x80>)
 8001a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a64:	08001adf 	.word	0x08001adf
 8001a68:	08001ab9 	.word	0x08001ab9
 8001a6c:	08001acb 	.word	0x08001acb
 8001a70:	08001b0d 	.word	0x08001b0d
 8001a74:	08001b13 	.word	0x08001b13
 8001a78:	08001b13 	.word	0x08001b13
 8001a7c:	08001b13 	.word	0x08001b13
 8001a80:	08001b13 	.word	0x08001b13
 8001a84:	08001b13 	.word	0x08001b13
 8001a88:	08001b13 	.word	0x08001b13
 8001a8c:	08001b13 	.word	0x08001b13
 8001a90:	08001b13 	.word	0x08001b13
 8001a94:	08001b13 	.word	0x08001b13
 8001a98:	08001b13 	.word	0x08001b13
 8001a9c:	08001b13 	.word	0x08001b13
 8001aa0:	08001b13 	.word	0x08001b13
 8001aa4:	08001b13 	.word	0x08001b13
 8001aa8:	08001ac1 	.word	0x08001ac1
 8001aac:	08001ad5 	.word	0x08001ad5
 8001ab0:	4a79      	ldr	r2, [pc, #484]	; (8001c98 <HAL_GPIO_Init+0x2b4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d013      	beq.n	8001ade <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ab6:	e02c      	b.n	8001b12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	623b      	str	r3, [r7, #32]
          break;
 8001abe:	e029      	b.n	8001b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	623b      	str	r3, [r7, #32]
          break;
 8001ac8:	e024      	b.n	8001b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	3308      	adds	r3, #8
 8001ad0:	623b      	str	r3, [r7, #32]
          break;
 8001ad2:	e01f      	b.n	8001b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	330c      	adds	r3, #12
 8001ada:	623b      	str	r3, [r7, #32]
          break;
 8001adc:	e01a      	b.n	8001b14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d102      	bne.n	8001aec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	623b      	str	r3, [r7, #32]
          break;
 8001aea:	e013      	b.n	8001b14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d105      	bne.n	8001b00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001af4:	2308      	movs	r3, #8
 8001af6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69fa      	ldr	r2, [r7, #28]
 8001afc:	611a      	str	r2, [r3, #16]
          break;
 8001afe:	e009      	b.n	8001b14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b00:	2308      	movs	r3, #8
 8001b02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	615a      	str	r2, [r3, #20]
          break;
 8001b0a:	e003      	b.n	8001b14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	623b      	str	r3, [r7, #32]
          break;
 8001b10:	e000      	b.n	8001b14 <HAL_GPIO_Init+0x130>
          break;
 8001b12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	2bff      	cmp	r3, #255	; 0xff
 8001b18:	d801      	bhi.n	8001b1e <HAL_GPIO_Init+0x13a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	e001      	b.n	8001b22 <HAL_GPIO_Init+0x13e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3304      	adds	r3, #4
 8001b22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2bff      	cmp	r3, #255	; 0xff
 8001b28:	d802      	bhi.n	8001b30 <HAL_GPIO_Init+0x14c>
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	e002      	b.n	8001b36 <HAL_GPIO_Init+0x152>
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	3b08      	subs	r3, #8
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	210f      	movs	r1, #15
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	fa01 f303 	lsl.w	r3, r1, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	401a      	ands	r2, r3
 8001b48:	6a39      	ldr	r1, [r7, #32]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	431a      	orrs	r2, r3
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 80b1 	beq.w	8001cc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b64:	4b4d      	ldr	r3, [pc, #308]	; (8001c9c <HAL_GPIO_Init+0x2b8>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a4c      	ldr	r2, [pc, #304]	; (8001c9c <HAL_GPIO_Init+0x2b8>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b4a      	ldr	r3, [pc, #296]	; (8001c9c <HAL_GPIO_Init+0x2b8>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b7c:	4a48      	ldr	r2, [pc, #288]	; (8001ca0 <HAL_GPIO_Init+0x2bc>)
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	089b      	lsrs	r3, r3, #2
 8001b82:	3302      	adds	r3, #2
 8001b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	220f      	movs	r2, #15
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a40      	ldr	r2, [pc, #256]	; (8001ca4 <HAL_GPIO_Init+0x2c0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d013      	beq.n	8001bd0 <HAL_GPIO_Init+0x1ec>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a3f      	ldr	r2, [pc, #252]	; (8001ca8 <HAL_GPIO_Init+0x2c4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d00d      	beq.n	8001bcc <HAL_GPIO_Init+0x1e8>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a3e      	ldr	r2, [pc, #248]	; (8001cac <HAL_GPIO_Init+0x2c8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d007      	beq.n	8001bc8 <HAL_GPIO_Init+0x1e4>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a3d      	ldr	r2, [pc, #244]	; (8001cb0 <HAL_GPIO_Init+0x2cc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d101      	bne.n	8001bc4 <HAL_GPIO_Init+0x1e0>
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e006      	b.n	8001bd2 <HAL_GPIO_Init+0x1ee>
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	e004      	b.n	8001bd2 <HAL_GPIO_Init+0x1ee>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e002      	b.n	8001bd2 <HAL_GPIO_Init+0x1ee>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <HAL_GPIO_Init+0x1ee>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd4:	f002 0203 	and.w	r2, r2, #3
 8001bd8:	0092      	lsls	r2, r2, #2
 8001bda:	4093      	lsls	r3, r2
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001be2:	492f      	ldr	r1, [pc, #188]	; (8001ca0 <HAL_GPIO_Init+0x2bc>)
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	089b      	lsrs	r3, r3, #2
 8001be8:	3302      	adds	r3, #2
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d006      	beq.n	8001c0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bfc:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	492c      	ldr	r1, [pc, #176]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]
 8001c08:	e006      	b.n	8001c18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	4928      	ldr	r1, [pc, #160]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d006      	beq.n	8001c32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c24:	4b23      	ldr	r3, [pc, #140]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4922      	ldr	r1, [pc, #136]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
 8001c30:	e006      	b.n	8001c40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c32:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	491e      	ldr	r1, [pc, #120]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d006      	beq.n	8001c5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c4c:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	4918      	ldr	r1, [pc, #96]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]
 8001c58:	e006      	b.n	8001c68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c5a:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	4914      	ldr	r1, [pc, #80]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d021      	beq.n	8001cb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	490e      	ldr	r1, [pc, #56]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	60cb      	str	r3, [r1, #12]
 8001c80:	e021      	b.n	8001cc6 <HAL_GPIO_Init+0x2e2>
 8001c82:	bf00      	nop
 8001c84:	10320000 	.word	0x10320000
 8001c88:	10310000 	.word	0x10310000
 8001c8c:	10220000 	.word	0x10220000
 8001c90:	10210000 	.word	0x10210000
 8001c94:	10120000 	.word	0x10120000
 8001c98:	10110000 	.word	0x10110000
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40010000 	.word	0x40010000
 8001ca4:	40010800 	.word	0x40010800
 8001ca8:	40010c00 	.word	0x40010c00
 8001cac:	40011000 	.word	0x40011000
 8001cb0:	40011400 	.word	0x40011400
 8001cb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_GPIO_Init+0x304>)
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	4909      	ldr	r1, [pc, #36]	; (8001ce8 <HAL_GPIO_Init+0x304>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	3301      	adds	r3, #1
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f47f ae8e 	bne.w	80019f8 <HAL_GPIO_Init+0x14>
  }
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	372c      	adds	r7, #44	; 0x2c
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	40010400 	.word	0x40010400

08001cec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e12b      	b.n	8001f56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff fae2 	bl	80012dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2224      	movs	r2, #36	; 0x24
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0201 	bic.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d50:	f001 fb7a 	bl	8003448 <HAL_RCC_GetPCLK1Freq>
 8001d54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4a81      	ldr	r2, [pc, #516]	; (8001f60 <HAL_I2C_Init+0x274>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d807      	bhi.n	8001d70 <HAL_I2C_Init+0x84>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4a80      	ldr	r2, [pc, #512]	; (8001f64 <HAL_I2C_Init+0x278>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	bf94      	ite	ls
 8001d68:	2301      	movls	r3, #1
 8001d6a:	2300      	movhi	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	e006      	b.n	8001d7e <HAL_I2C_Init+0x92>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4a7d      	ldr	r2, [pc, #500]	; (8001f68 <HAL_I2C_Init+0x27c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	bf94      	ite	ls
 8001d78:	2301      	movls	r3, #1
 8001d7a:	2300      	movhi	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e0e7      	b.n	8001f56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4a78      	ldr	r2, [pc, #480]	; (8001f6c <HAL_I2C_Init+0x280>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	0c9b      	lsrs	r3, r3, #18
 8001d90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4a6a      	ldr	r2, [pc, #424]	; (8001f60 <HAL_I2C_Init+0x274>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d802      	bhi.n	8001dc0 <HAL_I2C_Init+0xd4>
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	e009      	b.n	8001dd4 <HAL_I2C_Init+0xe8>
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dc6:	fb02 f303 	mul.w	r3, r2, r3
 8001dca:	4a69      	ldr	r2, [pc, #420]	; (8001f70 <HAL_I2C_Init+0x284>)
 8001dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd0:	099b      	lsrs	r3, r3, #6
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001de6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	495c      	ldr	r1, [pc, #368]	; (8001f60 <HAL_I2C_Init+0x274>)
 8001df0:	428b      	cmp	r3, r1
 8001df2:	d819      	bhi.n	8001e28 <HAL_I2C_Init+0x13c>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	1e59      	subs	r1, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e02:	1c59      	adds	r1, r3, #1
 8001e04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e08:	400b      	ands	r3, r1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00a      	beq.n	8001e24 <HAL_I2C_Init+0x138>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1e59      	subs	r1, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e22:	e051      	b.n	8001ec8 <HAL_I2C_Init+0x1dc>
 8001e24:	2304      	movs	r3, #4
 8001e26:	e04f      	b.n	8001ec8 <HAL_I2C_Init+0x1dc>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d111      	bne.n	8001e54 <HAL_I2C_Init+0x168>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1e58      	subs	r0, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6859      	ldr	r1, [r3, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	440b      	add	r3, r1
 8001e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e42:	3301      	adds	r3, #1
 8001e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	bf0c      	ite	eq
 8001e4c:	2301      	moveq	r3, #1
 8001e4e:	2300      	movne	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	e012      	b.n	8001e7a <HAL_I2C_Init+0x18e>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1e58      	subs	r0, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6859      	ldr	r1, [r3, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	0099      	lsls	r1, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_I2C_Init+0x196>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e022      	b.n	8001ec8 <HAL_I2C_Init+0x1dc>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10e      	bne.n	8001ea8 <HAL_I2C_Init+0x1bc>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1e58      	subs	r0, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6859      	ldr	r1, [r3, #4]
 8001e92:	460b      	mov	r3, r1
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	440b      	add	r3, r1
 8001e98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ea6:	e00f      	b.n	8001ec8 <HAL_I2C_Init+0x1dc>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1e58      	subs	r0, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	0099      	lsls	r1, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	6809      	ldr	r1, [r1, #0]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69da      	ldr	r2, [r3, #28]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ef6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6911      	ldr	r1, [r2, #16]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68d2      	ldr	r2, [r2, #12]
 8001f02:	4311      	orrs	r1, r2
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2220      	movs	r2, #32
 8001f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	000186a0 	.word	0x000186a0
 8001f64:	001e847f 	.word	0x001e847f
 8001f68:	003d08ff 	.word	0x003d08ff
 8001f6c:	431bde83 	.word	0x431bde83
 8001f70:	10624dd3 	.word	0x10624dd3

08001f74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	460b      	mov	r3, r1
 8001f82:	817b      	strh	r3, [r7, #10]
 8001f84:	4613      	mov	r3, r2
 8001f86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f88:	f7ff fb1e 	bl	80015c8 <HAL_GetTick>
 8001f8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b20      	cmp	r3, #32
 8001f98:	f040 80e0 	bne.w	800215c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	2319      	movs	r3, #25
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	4970      	ldr	r1, [pc, #448]	; (8002168 <HAL_I2C_Master_Transmit+0x1f4>)
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 fc92 	bl	80028d0 <I2C_WaitOnFlagUntilTimeout>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e0d3      	b.n	800215e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_I2C_Master_Transmit+0x50>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e0cc      	b.n	800215e <HAL_I2C_Master_Transmit+0x1ea>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d007      	beq.n	8001fea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0201 	orr.w	r2, r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ff8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2221      	movs	r2, #33	; 0x21
 8001ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2210      	movs	r2, #16
 8002006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	893a      	ldrh	r2, [r7, #8]
 800201a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4a50      	ldr	r2, [pc, #320]	; (800216c <HAL_I2C_Master_Transmit+0x1f8>)
 800202a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800202c:	8979      	ldrh	r1, [r7, #10]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	6a3a      	ldr	r2, [r7, #32]
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 fafc 	bl	8002630 <I2C_MasterRequestWrite>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e08d      	b.n	800215e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002058:	e066      	b.n	8002128 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	6a39      	ldr	r1, [r7, #32]
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 fd0c 	bl	8002a7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00d      	beq.n	8002086 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	2b04      	cmp	r3, #4
 8002070:	d107      	bne.n	8002082 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002080:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e06b      	b.n	800215e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	781a      	ldrb	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d11b      	bne.n	80020fc <HAL_I2C_Master_Transmit+0x188>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d017      	beq.n	80020fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	781a      	ldrb	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	6a39      	ldr	r1, [r7, #32]
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 fcfc 	bl	8002afe <I2C_WaitOnBTFFlagUntilTimeout>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00d      	beq.n	8002128 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	2b04      	cmp	r3, #4
 8002112:	d107      	bne.n	8002124 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002122:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e01a      	b.n	800215e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212c:	2b00      	cmp	r3, #0
 800212e:	d194      	bne.n	800205a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800213e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	e000      	b.n	800215e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800215c:	2302      	movs	r3, #2
  }
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	00100002 	.word	0x00100002
 800216c:	ffff0000 	.word	0xffff0000

08002170 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08c      	sub	sp, #48	; 0x30
 8002174:	af02      	add	r7, sp, #8
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	461a      	mov	r2, r3
 800217c:	460b      	mov	r3, r1
 800217e:	817b      	strh	r3, [r7, #10]
 8002180:	4613      	mov	r3, r2
 8002182:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002188:	f7ff fa1e 	bl	80015c8 <HAL_GetTick>
 800218c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b20      	cmp	r3, #32
 8002198:	f040 823f 	bne.w	800261a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	2319      	movs	r3, #25
 80021a2:	2201      	movs	r2, #1
 80021a4:	497f      	ldr	r1, [pc, #508]	; (80023a4 <HAL_I2C_Master_Receive+0x234>)
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fb92 	bl	80028d0 <I2C_WaitOnFlagUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80021b2:	2302      	movs	r3, #2
 80021b4:	e232      	b.n	800261c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_I2C_Master_Receive+0x54>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e22b      	b.n	800261c <HAL_I2C_Master_Receive+0x4ac>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d007      	beq.n	80021ea <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f042 0201 	orr.w	r2, r2, #1
 80021e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2222      	movs	r2, #34	; 0x22
 80021fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2210      	movs	r2, #16
 8002206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	893a      	ldrh	r2, [r7, #8]
 800221a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4a5f      	ldr	r2, [pc, #380]	; (80023a8 <HAL_I2C_Master_Receive+0x238>)
 800222a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800222c:	8979      	ldrh	r1, [r7, #10]
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 fa7e 	bl	8002734 <I2C_MasterRequestRead>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e1ec      	b.n	800261c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002246:	2b00      	cmp	r3, #0
 8002248:	d113      	bne.n	8002272 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	61fb      	str	r3, [r7, #28]
 800225e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	e1c0      	b.n	80025f4 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002276:	2b01      	cmp	r3, #1
 8002278:	d11e      	bne.n	80022b8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002288:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800228a:	b672      	cpsid	i
}
 800228c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800228e:	2300      	movs	r3, #0
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80022b4:	b662      	cpsie	i
}
 80022b6:	e035      	b.n	8002324 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d11e      	bne.n	80022fe <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022d0:	b672      	cpsid	i
}
 80022d2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80022fa:	b662      	cpsie	i
}
 80022fc:	e012      	b.n	8002324 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800230c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002324:	e166      	b.n	80025f4 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232a:	2b03      	cmp	r3, #3
 800232c:	f200 811f 	bhi.w	800256e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002334:	2b01      	cmp	r3, #1
 8002336:	d123      	bne.n	8002380 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800233a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 fc1f 	bl	8002b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e167      	b.n	800261c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002368:	3b01      	subs	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002374:	b29b      	uxth	r3, r3
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800237e:	e139      	b.n	80025f4 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002384:	2b02      	cmp	r3, #2
 8002386:	d152      	bne.n	800242e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238e:	2200      	movs	r2, #0
 8002390:	4906      	ldr	r1, [pc, #24]	; (80023ac <HAL_I2C_Master_Receive+0x23c>)
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 fa9c 	bl	80028d0 <I2C_WaitOnFlagUntilTimeout>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d008      	beq.n	80023b0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e13c      	b.n	800261c <HAL_I2C_Master_Receive+0x4ac>
 80023a2:	bf00      	nop
 80023a4:	00100002 	.word	0x00100002
 80023a8:	ffff0000 	.word	0xffff0000
 80023ac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80023b0:	b672      	cpsid	i
}
 80023b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80023f6:	b662      	cpsie	i
}
 80023f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002416:	3b01      	subs	r3, #1
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002422:	b29b      	uxth	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800242c:	e0e2      	b.n	80025f4 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002434:	2200      	movs	r2, #0
 8002436:	497b      	ldr	r1, [pc, #492]	; (8002624 <HAL_I2C_Master_Receive+0x4b4>)
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 fa49 	bl	80028d0 <I2C_WaitOnFlagUntilTimeout>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0e9      	b.n	800261c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002456:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002458:	b672      	cpsid	i
}
 800245a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002484:	b29b      	uxth	r3, r3
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800248e:	4b66      	ldr	r3, [pc, #408]	; (8002628 <HAL_I2C_Master_Receive+0x4b8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	08db      	lsrs	r3, r3, #3
 8002494:	4a65      	ldr	r2, [pc, #404]	; (800262c <HAL_I2C_Master_Receive+0x4bc>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	0a1a      	lsrs	r2, r3, #8
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	00da      	lsls	r2, r3, #3
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d118      	bne.n	80024e6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f043 0220 	orr.w	r2, r3, #32
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80024d6:	b662      	cpsie	i
}
 80024d8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e09a      	b.n	800261c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d1d9      	bne.n	80024a8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002502:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691a      	ldr	r2, [r3, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252c:	b29b      	uxth	r3, r3
 800252e:	3b01      	subs	r3, #1
 8002530:	b29a      	uxth	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002536:	b662      	cpsie	i
}
 8002538:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002562:	b29b      	uxth	r3, r3
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800256c:	e042      	b.n	80025f4 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800256e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002570:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 fb04 	bl	8002b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e04c      	b.n	800261c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d118      	bne.n	80025f4 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f47f ae94 	bne.w	8002326 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e000      	b.n	800261c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800261a:	2302      	movs	r3, #2
  }
}
 800261c:	4618      	mov	r0, r3
 800261e:	3728      	adds	r7, #40	; 0x28
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	00010004 	.word	0x00010004
 8002628:	20000004 	.word	0x20000004
 800262c:	14f8b589 	.word	0x14f8b589

08002630 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af02      	add	r7, sp, #8
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	607a      	str	r2, [r7, #4]
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	460b      	mov	r3, r1
 800263e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2b08      	cmp	r3, #8
 800264a:	d006      	beq.n	800265a <I2C_MasterRequestWrite+0x2a>
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d003      	beq.n	800265a <I2C_MasterRequestWrite+0x2a>
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002658:	d108      	bne.n	800266c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e00b      	b.n	8002684 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	2b12      	cmp	r3, #18
 8002672:	d107      	bne.n	8002684 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002682:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f91d 	bl	80028d0 <I2C_WaitOnFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00d      	beq.n	80026b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026aa:	d103      	bne.n	80026b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e035      	b.n	8002724 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026c0:	d108      	bne.n	80026d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026c2:	897b      	ldrh	r3, [r7, #10]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026d0:	611a      	str	r2, [r3, #16]
 80026d2:	e01b      	b.n	800270c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026d4:	897b      	ldrh	r3, [r7, #10]
 80026d6:	11db      	asrs	r3, r3, #7
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	f003 0306 	and.w	r3, r3, #6
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f063 030f 	orn	r3, r3, #15
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	490e      	ldr	r1, [pc, #56]	; (800272c <I2C_MasterRequestWrite+0xfc>)
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 f943 	bl	800297e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e010      	b.n	8002724 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002702:	897b      	ldrh	r3, [r7, #10]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	4907      	ldr	r1, [pc, #28]	; (8002730 <I2C_MasterRequestWrite+0x100>)
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f933 	bl	800297e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	00010008 	.word	0x00010008
 8002730:	00010002 	.word	0x00010002

08002734 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af02      	add	r7, sp, #8
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	460b      	mov	r3, r1
 8002742:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002748:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002758:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b08      	cmp	r3, #8
 800275e:	d006      	beq.n	800276e <I2C_MasterRequestRead+0x3a>
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d003      	beq.n	800276e <I2C_MasterRequestRead+0x3a>
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800276c:	d108      	bne.n	8002780 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	e00b      	b.n	8002798 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	2b11      	cmp	r3, #17
 8002786:	d107      	bne.n	8002798 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002796:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 f893 	bl	80028d0 <I2C_WaitOnFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00d      	beq.n	80027cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027be:	d103      	bne.n	80027c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e079      	b.n	80028c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027d4:	d108      	bne.n	80027e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027d6:	897b      	ldrh	r3, [r7, #10]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	611a      	str	r2, [r3, #16]
 80027e6:	e05f      	b.n	80028a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027e8:	897b      	ldrh	r3, [r7, #10]
 80027ea:	11db      	asrs	r3, r3, #7
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f003 0306 	and.w	r3, r3, #6
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f063 030f 	orn	r3, r3, #15
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	4930      	ldr	r1, [pc, #192]	; (80028c8 <I2C_MasterRequestRead+0x194>)
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f8b9 	bl	800297e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e054      	b.n	80028c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002816:	897b      	ldrh	r3, [r7, #10]
 8002818:	b2da      	uxtb	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	4929      	ldr	r1, [pc, #164]	; (80028cc <I2C_MasterRequestRead+0x198>)
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f8a9 	bl	800297e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e044      	b.n	80028c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800285a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f831 	bl	80028d0 <I2C_WaitOnFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00d      	beq.n	8002890 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002882:	d103      	bne.n	800288c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800288a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e017      	b.n	80028c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002890:	897b      	ldrh	r3, [r7, #10]
 8002892:	11db      	asrs	r3, r3, #7
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f003 0306 	and.w	r3, r3, #6
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f063 030e 	orn	r3, r3, #14
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	4907      	ldr	r1, [pc, #28]	; (80028cc <I2C_MasterRequestRead+0x198>)
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f865 	bl	800297e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	00010008 	.word	0x00010008
 80028cc:	00010002 	.word	0x00010002

080028d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	4613      	mov	r3, r2
 80028de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028e0:	e025      	b.n	800292e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028e8:	d021      	beq.n	800292e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ea:	f7fe fe6d 	bl	80015c8 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d302      	bcc.n	8002900 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d116      	bne.n	800292e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2220      	movs	r2, #32
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f043 0220 	orr.w	r2, r3, #32
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e023      	b.n	8002976 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	0c1b      	lsrs	r3, r3, #16
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d10d      	bne.n	8002954 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	43da      	mvns	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4013      	ands	r3, r2
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	bf0c      	ite	eq
 800294a:	2301      	moveq	r3, #1
 800294c:	2300      	movne	r3, #0
 800294e:	b2db      	uxtb	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	e00c      	b.n	800296e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	43da      	mvns	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4013      	ands	r3, r2
 8002960:	b29b      	uxth	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	bf0c      	ite	eq
 8002966:	2301      	moveq	r3, #1
 8002968:	2300      	movne	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	429a      	cmp	r2, r3
 8002972:	d0b6      	beq.n	80028e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800298c:	e051      	b.n	8002a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299c:	d123      	bne.n	80029e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f043 0204 	orr.w	r2, r3, #4
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e046      	b.n	8002a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ec:	d021      	beq.n	8002a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ee:	f7fe fdeb 	bl	80015c8 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d302      	bcc.n	8002a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d116      	bne.n	8002a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f043 0220 	orr.w	r2, r3, #32
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e020      	b.n	8002a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	0c1b      	lsrs	r3, r3, #16
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d10c      	bne.n	8002a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	43da      	mvns	r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	4013      	ands	r3, r2
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	bf14      	ite	ne
 8002a4e:	2301      	movne	r3, #1
 8002a50:	2300      	moveq	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	e00b      	b.n	8002a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	43da      	mvns	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	4013      	ands	r3, r2
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bf14      	ite	ne
 8002a68:	2301      	movne	r3, #1
 8002a6a:	2300      	moveq	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d18d      	bne.n	800298e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a88:	e02d      	b.n	8002ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f8ce 	bl	8002c2c <I2C_IsAcknowledgeFailed>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e02d      	b.n	8002af6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002aa0:	d021      	beq.n	8002ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa2:	f7fe fd91 	bl	80015c8 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d302      	bcc.n	8002ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d116      	bne.n	8002ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f043 0220 	orr.w	r2, r3, #32
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e007      	b.n	8002af6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af0:	2b80      	cmp	r3, #128	; 0x80
 8002af2:	d1ca      	bne.n	8002a8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b084      	sub	sp, #16
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b0a:	e02d      	b.n	8002b68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f88d 	bl	8002c2c <I2C_IsAcknowledgeFailed>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e02d      	b.n	8002b78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b22:	d021      	beq.n	8002b68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b24:	f7fe fd50 	bl	80015c8 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d302      	bcc.n	8002b3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d116      	bne.n	8002b68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	f043 0220 	orr.w	r2, r3, #32
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e007      	b.n	8002b78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d1ca      	bne.n	8002b0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b8c:	e042      	b.n	8002c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2b10      	cmp	r3, #16
 8002b9a:	d119      	bne.n	8002bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0210 	mvn.w	r2, #16
 8002ba4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e029      	b.n	8002c24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd0:	f7fe fcfa 	bl	80015c8 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d302      	bcc.n	8002be6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d116      	bne.n	8002c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	f043 0220 	orr.w	r2, r3, #32
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e007      	b.n	8002c24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	2b40      	cmp	r3, #64	; 0x40
 8002c20:	d1b5      	bne.n	8002b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c42:	d11b      	bne.n	8002c7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f043 0204 	orr.w	r2, r3, #4
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e26c      	b.n	8003174 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8087 	beq.w	8002db6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ca8:	4b92      	ldr	r3, [pc, #584]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d00c      	beq.n	8002cce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cb4:	4b8f      	ldr	r3, [pc, #572]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 030c 	and.w	r3, r3, #12
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d112      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x5e>
 8002cc0:	4b8c      	ldr	r3, [pc, #560]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ccc:	d10b      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cce:	4b89      	ldr	r3, [pc, #548]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d06c      	beq.n	8002db4 <HAL_RCC_OscConfig+0x12c>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d168      	bne.n	8002db4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e246      	b.n	8003174 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cee:	d106      	bne.n	8002cfe <HAL_RCC_OscConfig+0x76>
 8002cf0:	4b80      	ldr	r3, [pc, #512]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a7f      	ldr	r2, [pc, #508]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	e02e      	b.n	8002d5c <HAL_RCC_OscConfig+0xd4>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x98>
 8002d06:	4b7b      	ldr	r3, [pc, #492]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a7a      	ldr	r2, [pc, #488]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	4b78      	ldr	r3, [pc, #480]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a77      	ldr	r2, [pc, #476]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	e01d      	b.n	8002d5c <HAL_RCC_OscConfig+0xd4>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCC_OscConfig+0xbc>
 8002d2a:	4b72      	ldr	r3, [pc, #456]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a71      	ldr	r2, [pc, #452]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	4b6f      	ldr	r3, [pc, #444]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a6e      	ldr	r2, [pc, #440]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	e00b      	b.n	8002d5c <HAL_RCC_OscConfig+0xd4>
 8002d44:	4b6b      	ldr	r3, [pc, #428]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a6a      	ldr	r2, [pc, #424]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	4b68      	ldr	r3, [pc, #416]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a67      	ldr	r2, [pc, #412]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d013      	beq.n	8002d8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe fc30 	bl	80015c8 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d6c:	f7fe fc2c 	bl	80015c8 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	; 0x64
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e1fa      	b.n	8003174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0xe4>
 8002d8a:	e014      	b.n	8002db6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fc1c 	bl	80015c8 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d94:	f7fe fc18 	bl	80015c8 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b64      	cmp	r3, #100	; 0x64
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e1e6      	b.n	8003174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da6:	4b53      	ldr	r3, [pc, #332]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0x10c>
 8002db2:	e000      	b.n	8002db6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d063      	beq.n	8002e8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dc2:	4b4c      	ldr	r3, [pc, #304]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002dce:	4b49      	ldr	r3, [pc, #292]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d11c      	bne.n	8002e14 <HAL_RCC_OscConfig+0x18c>
 8002dda:	4b46      	ldr	r3, [pc, #280]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d116      	bne.n	8002e14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de6:	4b43      	ldr	r3, [pc, #268]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_RCC_OscConfig+0x176>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d001      	beq.n	8002dfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e1ba      	b.n	8003174 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfe:	4b3d      	ldr	r3, [pc, #244]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4939      	ldr	r1, [pc, #228]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e12:	e03a      	b.n	8002e8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d020      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e1c:	4b36      	ldr	r3, [pc, #216]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e22:	f7fe fbd1 	bl	80015c8 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e2a:	f7fe fbcd 	bl	80015c8 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e19b      	b.n	8003174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e48:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4927      	ldr	r1, [pc, #156]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	600b      	str	r3, [r1, #0]
 8002e5c:	e015      	b.n	8002e8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5e:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7fe fbb0 	bl	80015c8 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6c:	f7fe fbac 	bl	80015c8 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e17a      	b.n	8003174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d03a      	beq.n	8002f0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d019      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9e:	4b17      	ldr	r3, [pc, #92]	; (8002efc <HAL_RCC_OscConfig+0x274>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea4:	f7fe fb90 	bl	80015c8 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eac:	f7fe fb8c 	bl	80015c8 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e15a      	b.n	8003174 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ebe:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002eca:	2001      	movs	r0, #1
 8002ecc:	f000 faf8 	bl	80034c0 <RCC_Delay>
 8002ed0:	e01c      	b.n	8002f0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <HAL_RCC_OscConfig+0x274>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed8:	f7fe fb76 	bl	80015c8 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ede:	e00f      	b.n	8002f00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee0:	f7fe fb72 	bl	80015c8 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d908      	bls.n	8002f00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e140      	b.n	8003174 <HAL_RCC_OscConfig+0x4ec>
 8002ef2:	bf00      	nop
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	42420000 	.word	0x42420000
 8002efc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f00:	4b9e      	ldr	r3, [pc, #632]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1e9      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 80a6 	beq.w	8003066 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1e:	4b97      	ldr	r3, [pc, #604]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10d      	bne.n	8002f46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f2a:	4b94      	ldr	r3, [pc, #592]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	4a93      	ldr	r2, [pc, #588]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8002f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f34:	61d3      	str	r3, [r2, #28]
 8002f36:	4b91      	ldr	r3, [pc, #580]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f42:	2301      	movs	r3, #1
 8002f44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f46:	4b8e      	ldr	r3, [pc, #568]	; (8003180 <HAL_RCC_OscConfig+0x4f8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d118      	bne.n	8002f84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f52:	4b8b      	ldr	r3, [pc, #556]	; (8003180 <HAL_RCC_OscConfig+0x4f8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a8a      	ldr	r2, [pc, #552]	; (8003180 <HAL_RCC_OscConfig+0x4f8>)
 8002f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5e:	f7fe fb33 	bl	80015c8 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f66:	f7fe fb2f 	bl	80015c8 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b64      	cmp	r3, #100	; 0x64
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e0fd      	b.n	8003174 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f78:	4b81      	ldr	r3, [pc, #516]	; (8003180 <HAL_RCC_OscConfig+0x4f8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d106      	bne.n	8002f9a <HAL_RCC_OscConfig+0x312>
 8002f8c:	4b7b      	ldr	r3, [pc, #492]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	4a7a      	ldr	r2, [pc, #488]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6213      	str	r3, [r2, #32]
 8002f98:	e02d      	b.n	8002ff6 <HAL_RCC_OscConfig+0x36e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x334>
 8002fa2:	4b76      	ldr	r3, [pc, #472]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	4a75      	ldr	r2, [pc, #468]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	6213      	str	r3, [r2, #32]
 8002fae:	4b73      	ldr	r3, [pc, #460]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	4a72      	ldr	r2, [pc, #456]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8002fb4:	f023 0304 	bic.w	r3, r3, #4
 8002fb8:	6213      	str	r3, [r2, #32]
 8002fba:	e01c      	b.n	8002ff6 <HAL_RCC_OscConfig+0x36e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b05      	cmp	r3, #5
 8002fc2:	d10c      	bne.n	8002fde <HAL_RCC_OscConfig+0x356>
 8002fc4:	4b6d      	ldr	r3, [pc, #436]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	4a6c      	ldr	r2, [pc, #432]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8002fca:	f043 0304 	orr.w	r3, r3, #4
 8002fce:	6213      	str	r3, [r2, #32]
 8002fd0:	4b6a      	ldr	r3, [pc, #424]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	4a69      	ldr	r2, [pc, #420]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	6213      	str	r3, [r2, #32]
 8002fdc:	e00b      	b.n	8002ff6 <HAL_RCC_OscConfig+0x36e>
 8002fde:	4b67      	ldr	r3, [pc, #412]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	4a66      	ldr	r2, [pc, #408]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8002fe4:	f023 0301 	bic.w	r3, r3, #1
 8002fe8:	6213      	str	r3, [r2, #32]
 8002fea:	4b64      	ldr	r3, [pc, #400]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	4a63      	ldr	r2, [pc, #396]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8002ff0:	f023 0304 	bic.w	r3, r3, #4
 8002ff4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d015      	beq.n	800302a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffe:	f7fe fae3 	bl	80015c8 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003004:	e00a      	b.n	800301c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003006:	f7fe fadf 	bl	80015c8 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	f241 3288 	movw	r2, #5000	; 0x1388
 8003014:	4293      	cmp	r3, r2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e0ab      	b.n	8003174 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301c:	4b57      	ldr	r3, [pc, #348]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0ee      	beq.n	8003006 <HAL_RCC_OscConfig+0x37e>
 8003028:	e014      	b.n	8003054 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800302a:	f7fe facd 	bl	80015c8 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003030:	e00a      	b.n	8003048 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003032:	f7fe fac9 	bl	80015c8 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003040:	4293      	cmp	r3, r2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e095      	b.n	8003174 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003048:	4b4c      	ldr	r3, [pc, #304]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1ee      	bne.n	8003032 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003054:	7dfb      	ldrb	r3, [r7, #23]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d105      	bne.n	8003066 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800305a:	4b48      	ldr	r3, [pc, #288]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	4a47      	ldr	r2, [pc, #284]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8003060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003064:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8081 	beq.w	8003172 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003070:	4b42      	ldr	r3, [pc, #264]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 030c 	and.w	r3, r3, #12
 8003078:	2b08      	cmp	r3, #8
 800307a:	d061      	beq.n	8003140 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d146      	bne.n	8003112 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003084:	4b3f      	ldr	r3, [pc, #252]	; (8003184 <HAL_RCC_OscConfig+0x4fc>)
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308a:	f7fe fa9d 	bl	80015c8 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003092:	f7fe fa99 	bl	80015c8 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e067      	b.n	8003174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a4:	4b35      	ldr	r3, [pc, #212]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1f0      	bne.n	8003092 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b8:	d108      	bne.n	80030cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030ba:	4b30      	ldr	r3, [pc, #192]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	492d      	ldr	r1, [pc, #180]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030cc:	4b2b      	ldr	r3, [pc, #172]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a19      	ldr	r1, [r3, #32]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	430b      	orrs	r3, r1
 80030de:	4927      	ldr	r1, [pc, #156]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e4:	4b27      	ldr	r3, [pc, #156]	; (8003184 <HAL_RCC_OscConfig+0x4fc>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ea:	f7fe fa6d 	bl	80015c8 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f2:	f7fe fa69 	bl	80015c8 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e037      	b.n	8003174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003104:	4b1d      	ldr	r3, [pc, #116]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0f0      	beq.n	80030f2 <HAL_RCC_OscConfig+0x46a>
 8003110:	e02f      	b.n	8003172 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003112:	4b1c      	ldr	r3, [pc, #112]	; (8003184 <HAL_RCC_OscConfig+0x4fc>)
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7fe fa56 	bl	80015c8 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003120:	f7fe fa52 	bl	80015c8 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e020      	b.n	8003174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003132:	4b12      	ldr	r3, [pc, #72]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x498>
 800313e:	e018      	b.n	8003172 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e013      	b.n	8003174 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <HAL_RCC_OscConfig+0x4f4>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	429a      	cmp	r2, r3
 800315e:	d106      	bne.n	800316e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316a:	429a      	cmp	r2, r3
 800316c:	d001      	beq.n	8003172 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40021000 	.word	0x40021000
 8003180:	40007000 	.word	0x40007000
 8003184:	42420060 	.word	0x42420060

08003188 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0d0      	b.n	800333e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800319c:	4b6a      	ldr	r3, [pc, #424]	; (8003348 <HAL_RCC_ClockConfig+0x1c0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d910      	bls.n	80031cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b67      	ldr	r3, [pc, #412]	; (8003348 <HAL_RCC_ClockConfig+0x1c0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 0207 	bic.w	r2, r3, #7
 80031b2:	4965      	ldr	r1, [pc, #404]	; (8003348 <HAL_RCC_ClockConfig+0x1c0>)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ba:	4b63      	ldr	r3, [pc, #396]	; (8003348 <HAL_RCC_ClockConfig+0x1c0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0b8      	b.n	800333e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d020      	beq.n	800321a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e4:	4b59      	ldr	r3, [pc, #356]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	4a58      	ldr	r2, [pc, #352]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031fc:	4b53      	ldr	r3, [pc, #332]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	4a52      	ldr	r2, [pc, #328]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003206:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003208:	4b50      	ldr	r3, [pc, #320]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	494d      	ldr	r1, [pc, #308]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	4313      	orrs	r3, r2
 8003218:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d040      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d107      	bne.n	800323e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322e:	4b47      	ldr	r3, [pc, #284]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d115      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e07f      	b.n	800333e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d107      	bne.n	8003256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003246:	4b41      	ldr	r3, [pc, #260]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e073      	b.n	800333e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003256:	4b3d      	ldr	r3, [pc, #244]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e06b      	b.n	800333e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003266:	4b39      	ldr	r3, [pc, #228]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f023 0203 	bic.w	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	4936      	ldr	r1, [pc, #216]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003278:	f7fe f9a6 	bl	80015c8 <HAL_GetTick>
 800327c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	e00a      	b.n	8003296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003280:	f7fe f9a2 	bl	80015c8 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f241 3288 	movw	r2, #5000	; 0x1388
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e053      	b.n	800333e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003296:	4b2d      	ldr	r3, [pc, #180]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f003 020c 	and.w	r2, r3, #12
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d1eb      	bne.n	8003280 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032a8:	4b27      	ldr	r3, [pc, #156]	; (8003348 <HAL_RCC_ClockConfig+0x1c0>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d210      	bcs.n	80032d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b24      	ldr	r3, [pc, #144]	; (8003348 <HAL_RCC_ClockConfig+0x1c0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 0207 	bic.w	r2, r3, #7
 80032be:	4922      	ldr	r1, [pc, #136]	; (8003348 <HAL_RCC_ClockConfig+0x1c0>)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c6:	4b20      	ldr	r3, [pc, #128]	; (8003348 <HAL_RCC_ClockConfig+0x1c0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e032      	b.n	800333e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e4:	4b19      	ldr	r3, [pc, #100]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	4916      	ldr	r1, [pc, #88]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003302:	4b12      	ldr	r3, [pc, #72]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	490e      	ldr	r1, [pc, #56]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 8003312:	4313      	orrs	r3, r2
 8003314:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003316:	f000 f82d 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 800331a:	4602      	mov	r2, r0
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	490a      	ldr	r1, [pc, #40]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 8003328:	5ccb      	ldrb	r3, [r1, r3]
 800332a:	fa22 f303 	lsr.w	r3, r2, r3
 800332e:	4a09      	ldr	r2, [pc, #36]	; (8003354 <HAL_RCC_ClockConfig+0x1cc>)
 8003330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_RCC_ClockConfig+0x1d0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe f904 	bl	8001544 <HAL_InitTick>

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40022000 	.word	0x40022000
 800334c:	40021000 	.word	0x40021000
 8003350:	08003740 	.word	0x08003740
 8003354:	20000004 	.word	0x20000004
 8003358:	20000008 	.word	0x20000008

0800335c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003360:	4b03      	ldr	r3, [pc, #12]	; (8003370 <HAL_RCC_EnableCSS+0x14>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]
}
 8003366:	bf00      	nop
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	4242004c 	.word	0x4242004c

08003374 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003374:	b490      	push	{r4, r7}
 8003376:	b08a      	sub	sp, #40	; 0x28
 8003378:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800337a:	4b2a      	ldr	r3, [pc, #168]	; (8003424 <HAL_RCC_GetSysClockFreq+0xb0>)
 800337c:	1d3c      	adds	r4, r7, #4
 800337e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003380:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003384:	f240 2301 	movw	r3, #513	; 0x201
 8003388:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	2300      	movs	r3, #0
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	2300      	movs	r3, #0
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800339e:	4b22      	ldr	r3, [pc, #136]	; (8003428 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d002      	beq.n	80033b4 <HAL_RCC_GetSysClockFreq+0x40>
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d003      	beq.n	80033ba <HAL_RCC_GetSysClockFreq+0x46>
 80033b2:	e02d      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033b4:	4b1d      	ldr	r3, [pc, #116]	; (800342c <HAL_RCC_GetSysClockFreq+0xb8>)
 80033b6:	623b      	str	r3, [r7, #32]
      break;
 80033b8:	e02d      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	0c9b      	lsrs	r3, r3, #18
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033c6:	4413      	add	r3, r2
 80033c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d013      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033d8:	4b13      	ldr	r3, [pc, #76]	; (8003428 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	0c5b      	lsrs	r3, r3, #17
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033e6:	4413      	add	r3, r2
 80033e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	4a0e      	ldr	r2, [pc, #56]	; (800342c <HAL_RCC_GetSysClockFreq+0xb8>)
 80033f2:	fb02 f203 	mul.w	r2, r2, r3
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
 80033fe:	e004      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	4a0b      	ldr	r2, [pc, #44]	; (8003430 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003404:	fb02 f303 	mul.w	r3, r2, r3
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	623b      	str	r3, [r7, #32]
      break;
 800340e:	e002      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003412:	623b      	str	r3, [r7, #32]
      break;
 8003414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003416:	6a3b      	ldr	r3, [r7, #32]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3728      	adds	r7, #40	; 0x28
 800341c:	46bd      	mov	sp, r7
 800341e:	bc90      	pop	{r4, r7}
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	08003730 	.word	0x08003730
 8003428:	40021000 	.word	0x40021000
 800342c:	007a1200 	.word	0x007a1200
 8003430:	003d0900 	.word	0x003d0900

08003434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003438:	4b02      	ldr	r3, [pc, #8]	; (8003444 <HAL_RCC_GetHCLKFreq+0x10>)
 800343a:	681b      	ldr	r3, [r3, #0]
}
 800343c:	4618      	mov	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr
 8003444:	20000004 	.word	0x20000004

08003448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800344c:	f7ff fff2 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8003450:	4602      	mov	r2, r0
 8003452:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	4903      	ldr	r1, [pc, #12]	; (800346c <HAL_RCC_GetPCLK1Freq+0x24>)
 800345e:	5ccb      	ldrb	r3, [r1, r3]
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003464:	4618      	mov	r0, r3
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40021000 	.word	0x40021000
 800346c:	08003750 	.word	0x08003750

08003470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003474:	f7ff ffde 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8003478:	4602      	mov	r2, r0
 800347a:	4b05      	ldr	r3, [pc, #20]	; (8003490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	0adb      	lsrs	r3, r3, #11
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	4903      	ldr	r1, [pc, #12]	; (8003494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003486:	5ccb      	ldrb	r3, [r1, r3]
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800348c:	4618      	mov	r0, r3
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40021000 	.word	0x40021000
 8003494:	08003750 	.word	0x08003750

08003498 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800349c:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_RCC_NMI_IRQHandler+0x20>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a4:	2b80      	cmp	r3, #128	; 0x80
 80034a6:	d104      	bne.n	80034b2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80034a8:	f000 f828 	bl	80034fc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <HAL_RCC_NMI_IRQHandler+0x24>)
 80034ae:	2280      	movs	r2, #128	; 0x80
 80034b0:	701a      	strb	r2, [r3, #0]
  }
}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40021000 	.word	0x40021000
 80034bc:	4002100a 	.word	0x4002100a

080034c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034c8:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <RCC_Delay+0x34>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a0a      	ldr	r2, [pc, #40]	; (80034f8 <RCC_Delay+0x38>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	0a5b      	lsrs	r3, r3, #9
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034dc:	bf00      	nop
  }
  while (Delay --);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1e5a      	subs	r2, r3, #1
 80034e2:	60fa      	str	r2, [r7, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f9      	bne.n	80034dc <RCC_Delay+0x1c>
}
 80034e8:	bf00      	nop
 80034ea:	bf00      	nop
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	20000004 	.word	0x20000004
 80034f8:	10624dd3 	.word	0x10624dd3

080034fc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr

08003508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e03f      	b.n	800359a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7fd ff50 	bl	80013d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2224      	movs	r2, #36	; 0x24
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800354a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f829 	bl	80035a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695a      	ldr	r2, [r3, #20]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035de:	f023 030c 	bic.w	r3, r3, #12
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	430b      	orrs	r3, r1
 80035ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a2c      	ldr	r2, [pc, #176]	; (80036b8 <UART_SetConfig+0x114>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d103      	bne.n	8003614 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800360c:	f7ff ff30 	bl	8003470 <HAL_RCC_GetPCLK2Freq>
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	e002      	b.n	800361a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003614:	f7ff ff18 	bl	8003448 <HAL_RCC_GetPCLK1Freq>
 8003618:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	009a      	lsls	r2, r3, #2
 8003624:	441a      	add	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003630:	4a22      	ldr	r2, [pc, #136]	; (80036bc <UART_SetConfig+0x118>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	0119      	lsls	r1, r3, #4
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4613      	mov	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	009a      	lsls	r2, r3, #2
 8003644:	441a      	add	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003650:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <UART_SetConfig+0x118>)
 8003652:	fba3 0302 	umull	r0, r3, r3, r2
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	2064      	movs	r0, #100	; 0x64
 800365a:	fb00 f303 	mul.w	r3, r0, r3
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	3332      	adds	r3, #50	; 0x32
 8003664:	4a15      	ldr	r2, [pc, #84]	; (80036bc <UART_SetConfig+0x118>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003670:	4419      	add	r1, r3
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	009a      	lsls	r2, r3, #2
 800367c:	441a      	add	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	fbb2 f2f3 	udiv	r2, r2, r3
 8003688:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <UART_SetConfig+0x118>)
 800368a:	fba3 0302 	umull	r0, r3, r3, r2
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	2064      	movs	r0, #100	; 0x64
 8003692:	fb00 f303 	mul.w	r3, r0, r3
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	3332      	adds	r3, #50	; 0x32
 800369c:	4a07      	ldr	r2, [pc, #28]	; (80036bc <UART_SetConfig+0x118>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	f003 020f 	and.w	r2, r3, #15
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	440a      	add	r2, r1
 80036ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036b0:	bf00      	nop
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40013800 	.word	0x40013800
 80036bc:	51eb851f 	.word	0x51eb851f

080036c0 <__libc_init_array>:
 80036c0:	b570      	push	{r4, r5, r6, lr}
 80036c2:	2600      	movs	r6, #0
 80036c4:	4d0c      	ldr	r5, [pc, #48]	; (80036f8 <__libc_init_array+0x38>)
 80036c6:	4c0d      	ldr	r4, [pc, #52]	; (80036fc <__libc_init_array+0x3c>)
 80036c8:	1b64      	subs	r4, r4, r5
 80036ca:	10a4      	asrs	r4, r4, #2
 80036cc:	42a6      	cmp	r6, r4
 80036ce:	d109      	bne.n	80036e4 <__libc_init_array+0x24>
 80036d0:	f000 f822 	bl	8003718 <_init>
 80036d4:	2600      	movs	r6, #0
 80036d6:	4d0a      	ldr	r5, [pc, #40]	; (8003700 <__libc_init_array+0x40>)
 80036d8:	4c0a      	ldr	r4, [pc, #40]	; (8003704 <__libc_init_array+0x44>)
 80036da:	1b64      	subs	r4, r4, r5
 80036dc:	10a4      	asrs	r4, r4, #2
 80036de:	42a6      	cmp	r6, r4
 80036e0:	d105      	bne.n	80036ee <__libc_init_array+0x2e>
 80036e2:	bd70      	pop	{r4, r5, r6, pc}
 80036e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e8:	4798      	blx	r3
 80036ea:	3601      	adds	r6, #1
 80036ec:	e7ee      	b.n	80036cc <__libc_init_array+0xc>
 80036ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80036f2:	4798      	blx	r3
 80036f4:	3601      	adds	r6, #1
 80036f6:	e7f2      	b.n	80036de <__libc_init_array+0x1e>
 80036f8:	08003758 	.word	0x08003758
 80036fc:	08003758 	.word	0x08003758
 8003700:	08003758 	.word	0x08003758
 8003704:	0800375c 	.word	0x0800375c

08003708 <memset>:
 8003708:	4603      	mov	r3, r0
 800370a:	4402      	add	r2, r0
 800370c:	4293      	cmp	r3, r2
 800370e:	d100      	bne.n	8003712 <memset+0xa>
 8003710:	4770      	bx	lr
 8003712:	f803 1b01 	strb.w	r1, [r3], #1
 8003716:	e7f9      	b.n	800370c <memset+0x4>

08003718 <_init>:
 8003718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371a:	bf00      	nop
 800371c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371e:	bc08      	pop	{r3}
 8003720:	469e      	mov	lr, r3
 8003722:	4770      	bx	lr

08003724 <_fini>:
 8003724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003726:	bf00      	nop
 8003728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372a:	bc08      	pop	{r3}
 800372c:	469e      	mov	lr, r3
 800372e:	4770      	bx	lr
