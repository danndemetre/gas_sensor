
gas_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000442c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800453c  0800453c  0001453c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045a4  080045a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080045a4  080045a4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045a4  080045a4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045a4  080045a4  000145a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045a8  080045a8  000145a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080045ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  0800461c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  0800461c  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e611  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fbd  00000000  00000000  0002e6aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  00030668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a48  00000000  00000000  00031150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000022ae  00000000  00000000  00031b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca7e  00000000  00000000  00033e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087fe8  00000000  00000000  000408c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c88ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003228  00000000  00000000  000c8900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004524 	.word	0x08004524

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004524 	.word	0x08004524

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__aeabi_d2uiz>:
 8000a64:	004a      	lsls	r2, r1, #1
 8000a66:	d211      	bcs.n	8000a8c <__aeabi_d2uiz+0x28>
 8000a68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a6c:	d211      	bcs.n	8000a92 <__aeabi_d2uiz+0x2e>
 8000a6e:	d50d      	bpl.n	8000a8c <__aeabi_d2uiz+0x28>
 8000a70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a78:	d40e      	bmi.n	8000a98 <__aeabi_d2uiz+0x34>
 8000a7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a86:	fa23 f002 	lsr.w	r0, r3, r2
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d102      	bne.n	8000a9e <__aeabi_d2uiz+0x3a>
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a9c:	4770      	bx	lr
 8000a9e:	f04f 0000 	mov.w	r0, #0
 8000aa2:	4770      	bx	lr

08000aa4 <__aeabi_d2f>:
 8000aa4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aac:	bf24      	itt	cs
 8000aae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab6:	d90d      	bls.n	8000ad4 <__aeabi_d2f+0x30>
 8000ab8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000acc:	bf08      	it	eq
 8000ace:	f020 0001 	biceq.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad8:	d121      	bne.n	8000b1e <__aeabi_d2f+0x7a>
 8000ada:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ade:	bfbc      	itt	lt
 8000ae0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae4:	4770      	bxlt	lr
 8000ae6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aee:	f1c2 0218 	rsb	r2, r2, #24
 8000af2:	f1c2 0c20 	rsb	ip, r2, #32
 8000af6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afa:	fa20 f002 	lsr.w	r0, r0, r2
 8000afe:	bf18      	it	ne
 8000b00:	f040 0001 	orrne.w	r0, r0, #1
 8000b04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b10:	ea40 000c 	orr.w	r0, r0, ip
 8000b14:	fa23 f302 	lsr.w	r3, r3, r2
 8000b18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b1c:	e7cc      	b.n	8000ab8 <__aeabi_d2f+0x14>
 8000b1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b22:	d107      	bne.n	8000b34 <__aeabi_d2f+0x90>
 8000b24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b28:	bf1e      	ittt	ne
 8000b2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b32:	4770      	bxne	lr
 8000b34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop

08000b44 <__aeabi_f2iz>:
 8000b44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b4c:	d30f      	bcc.n	8000b6e <__aeabi_f2iz+0x2a>
 8000b4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b56:	d90d      	bls.n	8000b74 <__aeabi_f2iz+0x30>
 8000b58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b64:	fa23 f002 	lsr.w	r0, r3, r2
 8000b68:	bf18      	it	ne
 8000b6a:	4240      	negne	r0, r0
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0000 	mov.w	r0, #0
 8000b72:	4770      	bx	lr
 8000b74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b78:	d101      	bne.n	8000b7e <__aeabi_f2iz+0x3a>
 8000b7a:	0242      	lsls	r2, r0, #9
 8000b7c:	d105      	bne.n	8000b8a <__aeabi_f2iz+0x46>
 8000b7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b82:	bf08      	it	eq
 8000b84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr

08000b90 <ads1115_encode_cfg>:
#include "hw_config.h"
#include "components/ads1115.h"
#include <stdlib.h>
#include <stdint.h>

ads1115_raw_conf_t ads1115_encode_cfg(const ads1115_config_t * conf){
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	ads1115_raw_conf_t raw_conf = 0x0000;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->os & ADS1115_OS_BIT_MASK) << ADS1115_OS_BIT_OFFSET;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	03db      	lsls	r3, r3, #15
 8000ba2:	b21a      	sxth	r2, r3
 8000ba4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	b21b      	sxth	r3, r3
 8000bac:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->pin & ADS1115_PIN_BIT_MASK) << ADS1115_PIN_BIT_OFFSET;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	785b      	ldrb	r3, [r3, #1]
 8000bb2:	031b      	lsls	r3, r3, #12
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000bba:	b21a      	sxth	r2, r3
 8000bbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	b21b      	sxth	r3, r3
 8000bc4:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->gain & ADS1115_PGA_BIT_MASK) << ADS1115_PGA_BIT_OFFSET;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	789b      	ldrb	r3, [r3, #2]
 8000bca:	025b      	lsls	r3, r3, #9
 8000bcc:	b21b      	sxth	r3, r3
 8000bce:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8000bd2:	b21a      	sxth	r2, r3
 8000bd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->mode & ADS1115_MODE_BIT_MASK) << ADS1115_MODE_BIT_OFFSET;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	78db      	ldrb	r3, [r3, #3]
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bea:	b21a      	sxth	r2, r3
 8000bec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->data_rate & ADS1115_DR_BIT_MASK) << ADS1115_DR_BIT_OFFSET;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	791b      	ldrb	r3, [r3, #4]
 8000bfa:	015b      	lsls	r3, r3, #5
 8000bfc:	b21b      	sxth	r3, r3
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	b21a      	sxth	r2, r3
 8000c02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->comp & ADS1115_COMP_BIT_MASK) << ADS1115_COMP_BIT_OFFSET;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	795b      	ldrb	r3, [r3, #5]
 8000c10:	011b      	lsls	r3, r3, #4
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	f003 0310 	and.w	r3, r3, #16
 8000c18:	b21a      	sxth	r2, r3
 8000c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->polarity & ADS1115_POL_BIT_MASK) << ADS1115_POL_BIT_OFFSET;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	799b      	ldrb	r3, [r3, #6]
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	b21b      	sxth	r3, r3
 8000c2c:	f003 0308 	and.w	r3, r3, #8
 8000c30:	b21a      	sxth	r2, r3
 8000c32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->latch & ADS1115_LATCH_BIT_MASK) << ADS1115_LATCH_BIT_OFFSET;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	79db      	ldrb	r3, [r3, #7]
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	f003 0304 	and.w	r3, r3, #4
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	81fb      	strh	r3, [r7, #14]
	raw_conf |= ((uint16_t)conf->que & ADS1115_QUEUE_BIT_MASK) << ADS1115_QUEUE_BIT_OFFSET;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	7a1b      	ldrb	r3, [r3, #8]
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	f003 0303 	and.w	r3, r3, #3
 8000c5e:	b21a      	sxth	r2, r3
 8000c60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	b21b      	sxth	r3, r3
 8000c68:	81fb      	strh	r3, [r7, #14]
	return raw_conf;
 8000c6a:	89fb      	ldrh	r3, [r7, #14]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr

08000c76 <ads1115_decode_cfg>:

ads1115_config_t   ads1115_decode_cfg(const ads1115_raw_conf_t  raw_conf){
 8000c76:	b480      	push	{r7}
 8000c78:	b087      	sub	sp, #28
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	807b      	strh	r3, [r7, #2]
	ads1115_config_t conf;
	conf.os = (raw_conf >> ADS1115_OS_BIT_OFFSET) & ADS1115_OS_BIT_MASK;
 8000c82:	887b      	ldrh	r3, [r7, #2]
 8000c84:	0bdb      	lsrs	r3, r3, #15
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	733b      	strb	r3, [r7, #12]
	conf.pin = (raw_conf >> ADS1115_PIN_BIT_OFFSET) & ADS1115_PIN_BIT_MASK;
 8000c92:	887b      	ldrh	r3, [r7, #2]
 8000c94:	0b1b      	lsrs	r3, r3, #12
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	737b      	strb	r3, [r7, #13]
	conf.gain = (raw_conf >> ADS1115_PGA_BIT_OFFSET) & ADS1115_PGA_BIT_MASK;
 8000ca2:	887b      	ldrh	r3, [r7, #2]
 8000ca4:	0a5b      	lsrs	r3, r3, #9
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	73bb      	strb	r3, [r7, #14]
	conf.mode = (raw_conf >> ADS1115_MODE_BIT_OFFSET) & ADS1115_MODE_BIT_MASK;
 8000cb2:	887b      	ldrh	r3, [r7, #2]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	73fb      	strb	r3, [r7, #15]
	conf.data_rate = (raw_conf >> ADS1115_DR_BIT_OFFSET) & ADS1115_DR_BIT_MASK;
 8000cc2:	887b      	ldrh	r3, [r7, #2]
 8000cc4:	095b      	lsrs	r3, r3, #5
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	743b      	strb	r3, [r7, #16]
	conf.polarity = (raw_conf >> ADS1115_POL_BIT_OFFSET) & ADS1115_POL_BIT_MASK;
 8000cd2:	887b      	ldrh	r3, [r7, #2]
 8000cd4:	08db      	lsrs	r3, r3, #3
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	74bb      	strb	r3, [r7, #18]
	conf.latch = (raw_conf >> ADS1115_LATCH_BIT_OFFSET) & ADS1115_LATCH_BIT_MASK;
 8000ce2:	887b      	ldrh	r3, [r7, #2]
 8000ce4:	089b      	lsrs	r3, r3, #2
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	74fb      	strb	r3, [r7, #19]
	conf.que = (raw_conf >> ADS1115_QUEUE_BIT_OFFSET) & ADS1115_QUEUE_BIT_MASK;
 8000cf2:	887b      	ldrh	r3, [r7, #2]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	753b      	strb	r3, [r7, #20]
	return conf;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	461a      	mov	r2, r3
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	cb03      	ldmia	r3!, {r0, r1}
 8000d08:	6010      	str	r0, [r2, #0]
 8000d0a:	6051      	str	r1, [r2, #4]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	7213      	strb	r3, [r2, #8]
}
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	371c      	adds	r7, #28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
	...

08000d1c <ads1115_read_cfg>:

HAL_StatusTypeDef ads1115_read_cfg(const ads1115_i2c_conf_t* i2c_conf, ads1115_config_t * conf)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b08d      	sub	sp, #52	; 0x34
 8000d20:	af02      	add	r7, sp, #8
 8000d22:	6178      	str	r0, [r7, #20]
 8000d24:	6139      	str	r1, [r7, #16]
    ads1115_raw_conf_t raw_conf ;
    HAL_StatusTypeDef err;
    uint8_t ads_reg_set[1] = {ADS1115_CONFIGURATION_REG};
 8000d26:	2301      	movs	r3, #1
 8000d28:	f887 3020 	strb.w	r3, [r7, #32]
    uint8_t raw_conf_eight_bit[2];

    err = HAL_I2C_Master_Transmit(&hi2c1, (i2c_conf->i2c_slave_addr << 1) | I2C_WRITE,  ads_reg_set, 1, i2c_conf->timeout);
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	791b      	ldrb	r3, [r3, #4]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	b21b      	sxth	r3, r3
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	b299      	uxth	r1, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	f107 0220 	add.w	r2, r7, #32
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2301      	movs	r3, #1
 8000d48:	481c      	ldr	r0, [pc, #112]	; (8000dbc <ads1115_read_cfg+0xa0>)
 8000d4a:	f001 fafd 	bl	8002348 <HAL_I2C_Master_Transmit>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (err == HAL_OK){
 8000d54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d111      	bne.n	8000d80 <ads1115_read_cfg+0x64>
    	err = HAL_I2C_Master_Receive(i2c_conf->hi2c, (i2c_conf->i2c_slave_addr << 1) | I2C_READ, raw_conf_eight_bit, 2, i2c_conf->timeout);
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	6818      	ldr	r0, [r3, #0]
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	791b      	ldrb	r3, [r3, #4]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	b299      	uxth	r1, r3
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	f107 021c 	add.w	r2, r7, #28
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2302      	movs	r3, #2
 8000d76:	f001 fbe5 	bl	8002544 <HAL_I2C_Master_Receive>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    raw_conf = ((ads1115_raw_conf_t)raw_conf_eight_bit[0] << 8 )| raw_conf_eight_bit[1];
 8000d80:	7f3b      	ldrb	r3, [r7, #28]
 8000d82:	021b      	lsls	r3, r3, #8
 8000d84:	b21a      	sxth	r2, r3
 8000d86:	7f7b      	ldrb	r3, [r7, #29]
 8000d88:	b21b      	sxth	r3, r3
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b21b      	sxth	r3, r3
 8000d8e:	84bb      	strh	r3, [r7, #36]	; 0x24
    *conf = ads1115_decode_cfg(raw_conf);
 8000d90:	693c      	ldr	r4, [r7, #16]
 8000d92:	463b      	mov	r3, r7
 8000d94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff6c 	bl	8000c76 <ads1115_decode_cfg>
 8000d9e:	4622      	mov	r2, r4
 8000da0:	463b      	mov	r3, r7
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	6859      	ldr	r1, [r3, #4]
 8000da6:	6010      	str	r0, [r2, #0]
 8000da8:	6051      	str	r1, [r2, #4]
 8000daa:	7a1b      	ldrb	r3, [r3, #8]
 8000dac:	7213      	strb	r3, [r2, #8]
    return err;
 8000dae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	372c      	adds	r7, #44	; 0x2c
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd90      	pop	{r4, r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000098 	.word	0x20000098

08000dc0 <ads1115_write_cfg>:

HAL_StatusTypeDef ads1115_write_cfg(const ads1115_i2c_conf_t* i2c_conf, const ads1115_config_t * conf)

{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af02      	add	r7, sp, #8
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
	 HAL_StatusTypeDef err;
    ads1115_raw_conf_t raw_conf = ads1115_encode_cfg(conf);
 8000dca:	6838      	ldr	r0, [r7, #0]
 8000dcc:	f7ff fee0 	bl	8000b90 <ads1115_encode_cfg>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	81fb      	strh	r3, [r7, #14]
    uint8_t i2c_buf[3] = { ADS1115_CONFIGURATION_REG, raw_conf >> 8, raw_conf & 0xFF};
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	723b      	strb	r3, [r7, #8]
 8000dd8:	89fb      	ldrh	r3, [r7, #14]
 8000dda:	0a1b      	lsrs	r3, r3, #8
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	727b      	strb	r3, [r7, #9]
 8000de2:	89fb      	ldrh	r3, [r7, #14]
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	72bb      	strb	r3, [r7, #10]
    err = HAL_I2C_Master_Transmit(i2c_conf->hi2c, ( i2c_conf->i2c_slave_addr << 1) | I2C_WRITE,
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6818      	ldr	r0, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	791b      	ldrb	r3, [r3, #4]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	b21b      	sxth	r3, r3
 8000dfa:	b299      	uxth	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	f107 0208 	add.w	r2, r7, #8
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	2303      	movs	r3, #3
 8000e08:	f001 fa9e 	bl	8002348 <HAL_I2C_Master_Transmit>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	737b      	strb	r3, [r7, #13]
    		i2c_buf, 3, i2c_conf->timeout);

   return err;
 8000e10:	7b7b      	ldrb	r3, [r7, #13]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	0000      	movs	r0, r0
 8000e1c:	0000      	movs	r0, r0
	...

08000e20 <__ads1115_convert_raw_voltage>:

HAL_StatusTypeDef __ads1115_convert_raw_voltage(const ads1115_config_t * conf,
		const int16_t raw_value, int32_t* converted_value)

{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	817b      	strh	r3, [r7, #10]
    double buf = ((double)raw_value / 32.768);
 8000e2e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fb9a 	bl	800056c <__aeabi_i2d>
 8000e38:	a33b      	add	r3, pc, #236	; (adr r3, 8000f28 <__ads1115_convert_raw_voltage+0x108>)
 8000e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3e:	f7ff fd29 	bl	8000894 <__aeabi_ddiv>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	e9c7 2306 	strd	r2, r3, [r7, #24]
    HAL_StatusTypeDef err = HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	75fb      	strb	r3, [r7, #23]
    switch (conf->gain) {
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	789b      	ldrb	r3, [r3, #2]
 8000e52:	2b05      	cmp	r3, #5
 8000e54:	d857      	bhi.n	8000f06 <__ads1115_convert_raw_voltage+0xe6>
 8000e56:	a201      	add	r2, pc, #4	; (adr r2, 8000e5c <__ads1115_convert_raw_voltage+0x3c>)
 8000e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5c:	08000e75 	.word	0x08000e75
 8000e60:	08000e8d 	.word	0x08000e8d
 8000e64:	08000ea5 	.word	0x08000ea5
 8000e68:	08000ebd 	.word	0x08000ebd
 8000e6c:	08000ed5 	.word	0x08000ed5
 8000e70:	08000eef 	.word	0x08000eef
		case ADS1115_6_144V: buf = buf * 6144; break;
 8000e74:	f04f 0200 	mov.w	r2, #0
 8000e78:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <__ads1115_convert_raw_voltage+0x110>)
 8000e7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000e7e:	f7ff fbdf 	bl	8000640 <__aeabi_dmul>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000e8a:	e03e      	b.n	8000f0a <__ads1115_convert_raw_voltage+0xea>
		case ADS1115_4_096V: buf = buf * 4096; break;
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <__ads1115_convert_raw_voltage+0x114>)
 8000e92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000e96:	f7ff fbd3 	bl	8000640 <__aeabi_dmul>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000ea2:	e032      	b.n	8000f0a <__ads1115_convert_raw_voltage+0xea>
		case ADS1115_2_048V: buf = buf * 2048; break;
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <__ads1115_convert_raw_voltage+0x118>)
 8000eaa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000eae:	f7ff fbc7 	bl	8000640 <__aeabi_dmul>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000eba:	e026      	b.n	8000f0a <__ads1115_convert_raw_voltage+0xea>
		case ADS1115_1_024V: buf = buf * 1024; break;
 8000ebc:	f04f 0200 	mov.w	r2, #0
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <__ads1115_convert_raw_voltage+0x11c>)
 8000ec2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ec6:	f7ff fbbb 	bl	8000640 <__aeabi_dmul>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000ed2:	e01a      	b.n	8000f0a <__ads1115_convert_raw_voltage+0xea>
		case ADS1115_0_512V: buf = buf * 512; break;
 8000ed4:	f04f 0200 	mov.w	r2, #0
 8000ed8:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8000edc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ee0:	f7ff fbae 	bl	8000640 <__aeabi_dmul>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000eec:	e00d      	b.n	8000f0a <__ads1115_convert_raw_voltage+0xea>
		case ADS1115_0_256V: buf = buf * 256; break;
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <__ads1115_convert_raw_voltage+0x120>)
 8000ef4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ef8:	f7ff fba2 	bl	8000640 <__aeabi_dmul>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000f04:	e001      	b.n	8000f0a <__ads1115_convert_raw_voltage+0xea>
		default: return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e008      	b.n	8000f1c <__ads1115_convert_raw_voltage+0xfc>
    }

    *converted_value = (uint32_t)buf;
 8000f0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f0e:	f7ff fda9 	bl	8000a64 <__aeabi_d2uiz>
 8000f12:	4603      	mov	r3, r0
 8000f14:	461a      	mov	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	601a      	str	r2, [r3, #0]

    return err;
 8000f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3720      	adds	r7, #32
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	f3af 8000 	nop.w
 8000f28:	d2f1a9fc 	.word	0xd2f1a9fc
 8000f2c:	4040624d 	.word	0x4040624d
 8000f30:	40b80000 	.word	0x40b80000
 8000f34:	40b00000 	.word	0x40b00000
 8000f38:	40a00000 	.word	0x40a00000
 8000f3c:	40900000 	.word	0x40900000
 8000f40:	40700000 	.word	0x40700000

08000f44 <ads1115_start_reading>:

HAL_StatusTypeDef ads1115_start_reading(const ads1115_i2c_conf_t* i2c_conf,
		const ads1115_config_t * conf){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef err = HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	77fb      	strb	r3, [r7, #31]
	ads1115_config_t cnf_cpy = *conf;
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	6810      	ldr	r0, [r2, #0]
 8000f5a:	6851      	ldr	r1, [r2, #4]
 8000f5c:	c303      	stmia	r3!, {r0, r1}
 8000f5e:	7a12      	ldrb	r2, [r2, #8]
 8000f60:	701a      	strb	r2, [r3, #0]
	cnf_cpy.os = ADS1115_IDLE_OR_START;
 8000f62:	2301      	movs	r3, #1
 8000f64:	733b      	strb	r3, [r7, #12]
	ads1115_write_cfg(i2c_conf, &cnf_cpy);
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff27 	bl	8000dc0 <ads1115_write_cfg>
	cnf_cpy.os = ADS1115_OS;
 8000f72:	2300      	movs	r3, #0
 8000f74:	733b      	strb	r3, [r7, #12]

	if(i2c_conf->single_shot_block){
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7b1b      	ldrb	r3, [r3, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d033      	beq.n	8000fe6 <ads1115_start_reading+0xa2>
		uint32_t st_time = HAL_GetTick();
 8000f7e:	f000 fcf5 	bl	800196c <HAL_GetTick>
 8000f82:	61b8      	str	r0, [r7, #24]
		bool timeout = false;
 8000f84:	2300      	movs	r3, #0
 8000f86:	77bb      	strb	r3, [r7, #30]
		err = ads1115_read_cfg(i2c_conf,  &cnf_cpy);
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff fec4 	bl	8000d1c <ads1115_read_cfg>
 8000f94:	4603      	mov	r3, r0
 8000f96:	77fb      	strb	r3, [r7, #31]
		while( (err == HAL_OK) && !timeout && (cnf_cpy.os == ADS1115_OS) ){
 8000f98:	e014      	b.n	8000fc4 <ads1115_start_reading+0x80>
			 err = ads1115_read_cfg(i2c_conf,  &cnf_cpy);
 8000f9a:	f107 030c 	add.w	r3, r7, #12
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff febb 	bl	8000d1c <ads1115_read_cfg>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	77fb      	strb	r3, [r7, #31]
			 HAL_Delay(5);
 8000faa:	2005      	movs	r0, #5
 8000fac:	f000 fce8 	bl	8001980 <HAL_Delay>
			 timeout = ((HAL_GetTick() - st_time) > 125) ? true : false;
 8000fb0:	f000 fcdc 	bl	800196c <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b7d      	cmp	r3, #125	; 0x7d
 8000fbc:	bf8c      	ite	hi
 8000fbe:	2301      	movhi	r3, #1
 8000fc0:	2300      	movls	r3, #0
 8000fc2:	77bb      	strb	r3, [r7, #30]
		while( (err == HAL_OK) && !timeout && (cnf_cpy.os == ADS1115_OS) ){
 8000fc4:	7ffb      	ldrb	r3, [r7, #31]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d108      	bne.n	8000fdc <ads1115_start_reading+0x98>
 8000fca:	7fbb      	ldrb	r3, [r7, #30]
 8000fcc:	f083 0301 	eor.w	r3, r3, #1
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d002      	beq.n	8000fdc <ads1115_start_reading+0x98>
 8000fd6:	7b3b      	ldrb	r3, [r7, #12]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0de      	beq.n	8000f9a <ads1115_start_reading+0x56>
		}
		if (timeout){
 8000fdc:	7fbb      	ldrb	r3, [r7, #30]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <ads1115_start_reading+0xa2>
			err = HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	77fb      	strb	r3, [r7, #31]
		}
	}
	return err;
 8000fe6:	7ffb      	ldrb	r3, [r7, #31]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <__ads1115_read_to_microvolts>:
HAL_StatusTypeDef __ads1115_read_to_microvolts(const ads1115_i2c_conf_t* i2c_conf,
		const ads1115_config_t *  conf, int32_t* uv_value, const uint8_t dev_register)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	70fb      	strb	r3, [r7, #3]
	uint8_t ads_reg_set[1] = {dev_register};
 8000ffe:	78fb      	ldrb	r3, [r7, #3]
 8001000:	763b      	strb	r3, [r7, #24]
	int16_t raw_value = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	83bb      	strh	r3, [r7, #28]
	HAL_StatusTypeDef err = HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	77fb      	strb	r3, [r7, #31]

	if(conf->mode == ADS1115_SINGLE_SHOT){
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	78db      	ldrb	r3, [r3, #3]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d103      	bne.n	800101a <__ads1115_read_to_microvolts+0x2a>
		ads1115_start_reading(i2c_conf, conf);
 8001012:	68b9      	ldr	r1, [r7, #8]
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f7ff ff95 	bl	8000f44 <ads1115_start_reading>
	}

	if (err == HAL_OK){
 800101a:	7ffb      	ldrb	r3, [r7, #31]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d13a      	bne.n	8001096 <__ads1115_read_to_microvolts+0xa6>
		uint8_t conv_res_eight_bit[2];
		err = HAL_I2C_Master_Transmit(i2c_conf->hi2c,  (i2c_conf->i2c_slave_addr << 1) | I2C_WRITE,
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	791b      	ldrb	r3, [r3, #4]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	b21b      	sxth	r3, r3
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	b21b      	sxth	r3, r3
 8001032:	b299      	uxth	r1, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f107 0218 	add.w	r2, r7, #24
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2301      	movs	r3, #1
 8001040:	f001 f982 	bl	8002348 <HAL_I2C_Master_Transmit>
 8001044:	4603      	mov	r3, r0
 8001046:	77fb      	strb	r3, [r7, #31]
				ads_reg_set, 1, i2c_conf->timeout);
		if (err == HAL_OK){
 8001048:	7ffb      	ldrb	r3, [r7, #31]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d110      	bne.n	8001070 <__ads1115_read_to_microvolts+0x80>
			err = HAL_I2C_Master_Receive(i2c_conf->hi2c, (i2c_conf->i2c_slave_addr << 1),
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	791b      	ldrb	r3, [r3, #4]
 8001056:	b29b      	uxth	r3, r3
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	b299      	uxth	r1, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f107 0214 	add.w	r2, r7, #20
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2302      	movs	r3, #2
 8001068:	f001 fa6c 	bl	8002544 <HAL_I2C_Master_Receive>
 800106c:	4603      	mov	r3, r0
 800106e:	77fb      	strb	r3, [r7, #31]
					conv_res_eight_bit, 2, i2c_conf->timeout);
		}
		raw_value = ((int16_t)conv_res_eight_bit[0] << 8 )| conv_res_eight_bit[1];
 8001070:	7d3b      	ldrb	r3, [r7, #20]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21a      	sxth	r2, r3
 8001076:	7d7b      	ldrb	r3, [r7, #21]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	83bb      	strh	r3, [r7, #28]
		if (err == HAL_OK) {
 800107e:	7ffb      	ldrb	r3, [r7, #31]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d108      	bne.n	8001096 <__ads1115_read_to_microvolts+0xa6>
			err = __ads1115_convert_raw_voltage(conf, raw_value, uv_value);
 8001084:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4619      	mov	r1, r3
 800108c:	68b8      	ldr	r0, [r7, #8]
 800108e:	f7ff fec7 	bl	8000e20 <__ads1115_convert_raw_voltage>
 8001092:	4603      	mov	r3, r0
 8001094:	77fb      	strb	r3, [r7, #31]
		}
	}
	return err;
 8001096:	7ffb      	ldrb	r3, [r7, #31]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3720      	adds	r7, #32
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <ads1115_read_adc_microvolts>:

HAL_StatusTypeDef ads1115_read_adc_microvolts(const ads1115_i2c_conf_t* i2c_conf,
		const ads1115_config_t *  conf, int32_t* uv)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
	return __ads1115_read_to_microvolts(i2c_conf, conf, uv, ADS1115_CONVERSION_REG);
 80010ac:	2300      	movs	r3, #0
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f7ff ff9c 	bl	8000ff0 <__ads1115_read_to_microvolts>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	0000      	movs	r0, r0
 80010c4:	0000      	movs	r0, r0
	...

080010c8 <lm60_get_temp>:
HAL_StatusTypeDef lm60_init_temp_conv(const lm60_cfg_t* lm60_conf){
	return ads1115_start_reading(&lm60_conf->ads_i2c_conf,
			&lm60_conf->ads_reg_conf);
}

HAL_StatusTypeDef lm60_get_temp(const lm60_cfg_t* lm60_conf, float * temp_c){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
	int32_t uv;
	HAL_StatusTypeDef err;
     err = ads1115_read_adc_microvolts(&lm60_conf->ads_i2c_conf, &lm60_conf->ads_reg_conf, &uv);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3310      	adds	r3, #16
 80010d8:	f107 0208 	add.w	r2, r7, #8
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff ffdf 	bl	80010a0 <ads1115_read_adc_microvolts>
 80010e2:	4603      	mov	r3, r0
 80010e4:	73fb      	strb	r3, [r7, #15]
	 if( err == HAL_OK){
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d114      	bne.n	8001116 <lm60_get_temp+0x4e>
		* temp_c = (uv - 424000) / 6250.0;
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f5a3 23cf 	sub.w	r3, r3, #423936	; 0x67800
 80010f2:	3b40      	subs	r3, #64	; 0x40
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fa39 	bl	800056c <__aeabi_i2d>
 80010fa:	a309      	add	r3, pc, #36	; (adr r3, 8001120 <lm60_get_temp+0x58>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	f7ff fbc8 	bl	8000894 <__aeabi_ddiv>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f7ff fcca 	bl	8000aa4 <__aeabi_d2f>
 8001110:	4602      	mov	r2, r0
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	601a      	str	r2, [r3, #0]
	}
	return err;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	00000000 	.word	0x00000000
 8001124:	40b86a00 	.word	0x40b86a00

08001128 <hw_conf_lm60>:
 */
#include "hw_config.h"
#include "stm32f1xx_hal.h"
#include "stdbool.h"

const lm60_cfg_t hw_conf_lm60(){
 8001128:	b4b0      	push	{r4, r5, r7}
 800112a:	b091      	sub	sp, #68	; 0x44
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	return (const lm60_cfg_t){
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <hw_conf_lm60+0x5c>)
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	2348      	movs	r3, #72	; 0x48
 8001136:	733b      	strb	r3, [r7, #12]
 8001138:	2364      	movs	r3, #100	; 0x64
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	2301      	movs	r3, #1
 800113e:	753b      	strb	r3, [r7, #20]
 8001140:	2300      	movs	r3, #0
 8001142:	763b      	strb	r3, [r7, #24]
 8001144:	2305      	movs	r3, #5
 8001146:	767b      	strb	r3, [r7, #25]
 8001148:	2303      	movs	r3, #3
 800114a:	76bb      	strb	r3, [r7, #26]
 800114c:	2301      	movs	r3, #1
 800114e:	76fb      	strb	r3, [r7, #27]
 8001150:	2304      	movs	r3, #4
 8001152:	773b      	strb	r3, [r7, #28]
 8001154:	2300      	movs	r3, #0
 8001156:	777b      	strb	r3, [r7, #29]
 8001158:	2300      	movs	r3, #0
 800115a:	77bb      	strb	r3, [r7, #30]
 800115c:	2300      	movs	r3, #0
 800115e:	77fb      	strb	r3, [r7, #31]
 8001160:	2303      	movs	r3, #3
 8001162:	f887 3020 	strb.w	r3, [r7, #32]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	461d      	mov	r5, r3
 800116a:	f107 0408 	add.w	r4, r7, #8
 800116e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001170:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001172:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001176:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			.polarity = ADS1115_DEF_POL,
			.latch = ADS1115_DEF_LATCH,
			.que = ADS1115_COMP_DISABLE,
		},
	};
}
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	3744      	adds	r7, #68	; 0x44
 800117e:	46bd      	mov	sp, r7
 8001180:	bcb0      	pop	{r4, r5, r7}
 8001182:	4770      	bx	lr
 8001184:	20000098 	.word	0x20000098

08001188 <MX_USART1_UART_Init>:
		.pages = 256,
	};
}

void MX_USART1_UART_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_USART1_UART_Init+0x4c>)
 800118e:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <MX_USART1_UART_Init+0x50>)
 8001190:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <MX_USART1_UART_Init+0x4c>)
 8001194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001198:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_USART1_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MX_USART1_UART_Init+0x4c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <MX_USART1_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_USART1_UART_Init+0x4c>)
 80011ae:	220c      	movs	r2, #12
 80011b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <MX_USART1_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <MX_USART1_UART_Init+0x4c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_USART1_UART_Init+0x4c>)
 80011c0:	f002 fb8c 	bl	80038dc <HAL_UART_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011ca:	f000 f897 	bl	80012fc <Error_Handler>
  }
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000168 	.word	0x20000168
 80011d8:	40013800 	.word	0x40013800

080011dc <MX_CAN_Init>:

void MX_CAN_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  hcan.Instance = CAN1;
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_CAN_Init+0x60>)
 80011e2:	4a17      	ldr	r2, [pc, #92]	; (8001240 <MX_CAN_Init+0x64>)
 80011e4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_CAN_Init+0x60>)
 80011e8:	2210      	movs	r2, #16
 80011ea:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <MX_CAN_Init+0x60>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <MX_CAN_Init+0x60>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80011f8:	4b10      	ldr	r3, [pc, #64]	; (800123c <MX_CAN_Init+0x60>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_CAN_Init+0x60>)
 8001200:	2200      	movs	r2, #0
 8001202:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001204:	4b0d      	ldr	r3, [pc, #52]	; (800123c <MX_CAN_Init+0x60>)
 8001206:	2200      	movs	r2, #0
 8001208:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_CAN_Init+0x60>)
 800120c:	2200      	movs	r2, #0
 800120e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <MX_CAN_Init+0x60>)
 8001212:	2200      	movs	r2, #0
 8001214:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_CAN_Init+0x60>)
 8001218:	2200      	movs	r2, #0
 800121a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <MX_CAN_Init+0x60>)
 800121e:	2200      	movs	r2, #0
 8001220:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_CAN_Init+0x60>)
 8001224:	2200      	movs	r2, #0
 8001226:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_CAN_Init+0x60>)
 800122a:	f000 fbcd 	bl	80019c8 <HAL_CAN_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8001234:	f000 f862 	bl	80012fc <Error_Handler>
  }
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000140 	.word	0x20000140
 8001240:	40006400 	.word	0x40006400

08001244 <MX_I2C1_Init>:

void MX_I2C1_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_I2C1_Init+0x50>)
 800124a:	4a13      	ldr	r2, [pc, #76]	; (8001298 <MX_I2C1_Init+0x54>)
 800124c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_I2C1_Init+0x50>)
 8001250:	4a12      	ldr	r2, [pc, #72]	; (800129c <MX_I2C1_Init+0x58>)
 8001252:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_I2C1_Init+0x50>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_I2C1_Init+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_I2C1_Init+0x50>)
 8001262:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001266:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <MX_I2C1_Init+0x50>)
 800126a:	2200      	movs	r2, #0
 800126c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_I2C1_Init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <MX_I2C1_Init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_I2C1_Init+0x50>)
 800127c:	2200      	movs	r2, #0
 800127e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <MX_I2C1_Init+0x50>)
 8001282:	f000 ff1d 	bl	80020c0 <HAL_I2C_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800128c:	f000 f836 	bl	80012fc <Error_Handler>
  }
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000098 	.word	0x20000098
 8001298:	40005400 	.word	0x40005400
 800129c:	000186a0 	.word	0x000186a0

080012a0 <MX_I2C2_Init>:

void MX_I2C2_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  hi2c2.Instance = I2C2;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_I2C2_Init+0x50>)
 80012a6:	4a13      	ldr	r2, [pc, #76]	; (80012f4 <MX_I2C2_Init+0x54>)
 80012a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_I2C2_Init+0x50>)
 80012ac:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <MX_I2C2_Init+0x58>)
 80012ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_I2C2_Init+0x50>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_I2C2_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_I2C2_Init+0x50>)
 80012be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <MX_I2C2_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_I2C2_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <MX_I2C2_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_I2C2_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <MX_I2C2_Init+0x50>)
 80012de:	f000 feef 	bl	80020c0 <HAL_I2C_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012e8:	f000 f808 	bl	80012fc <Error_Handler>
  }
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200000ec 	.word	0x200000ec
 80012f4:	40005800 	.word	0x40005800
 80012f8:	000186a0 	.word	0x000186a0

080012fc <Error_Handler>:

void Error_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001300:	b672      	cpsid	i
}
 8001302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001304:	e7fe      	b.n	8001304 <Error_Handler+0x8>
	...

08001308 <MX_GPIO_Init>:
  }
  /* USER CODE END Error_Handler_Debug */
}

void MX_GPIO_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <MX_GPIO_Init+0xa8>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a23      	ldr	r2, [pc, #140]	; (80013b0 <MX_GPIO_Init+0xa8>)
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <MX_GPIO_Init+0xa8>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f003 0310 	and.w	r3, r3, #16
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <MX_GPIO_Init+0xa8>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a1d      	ldr	r2, [pc, #116]	; (80013b0 <MX_GPIO_Init+0xa8>)
 800133a:	f043 0320 	orr.w	r3, r3, #32
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <MX_GPIO_Init+0xa8>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0320 	and.w	r3, r3, #32
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <MX_GPIO_Init+0xa8>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <MX_GPIO_Init+0xa8>)
 8001352:	f043 0308 	orr.w	r3, r3, #8
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <MX_GPIO_Init+0xa8>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <MX_GPIO_Init+0xa8>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a11      	ldr	r2, [pc, #68]	; (80013b0 <MX_GPIO_Init+0xa8>)
 800136a:	f043 0304 	orr.w	r3, r3, #4
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MX_GPIO_Init+0xa8>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001382:	480c      	ldr	r0, [pc, #48]	; (80013b4 <MX_GPIO_Init+0xac>)
 8001384:	f000 fe84 	bl	8002090 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001392:	2301      	movs	r3, #1
 8001394:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2302      	movs	r3, #2
 8001398:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	4619      	mov	r1, r3
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <MX_GPIO_Init+0xac>)
 80013a2:	f000 fcf1 	bl	8001d88 <HAL_GPIO_Init>
}
 80013a6:	bf00      	nop
 80013a8:	3720      	adds	r7, #32
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40011000 	.word	0x40011000

080013b8 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b090      	sub	sp, #64	; 0x40
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0318 	add.w	r3, r7, #24
 80013c2:	2228      	movs	r2, #40	; 0x28
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f002 fc6a 	bl	8003ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013da:	2301      	movs	r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ec:	2302      	movs	r3, #2
 80013ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fc:	f107 0318 	add.w	r3, r7, #24
 8001400:	4618      	mov	r0, r3
 8001402:	f001 fe2b 	bl	800305c <HAL_RCC_OscConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800140c:	f7ff ff76 	bl	80012fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001410:	230f      	movs	r3, #15
 8001412:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001414:	2302      	movs	r3, #2
 8001416:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800141c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001420:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2102      	movs	r1, #2
 800142a:	4618      	mov	r0, r3
 800142c:	f002 f896 	bl	800355c <HAL_RCC_ClockConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001436:	f7ff ff61 	bl	80012fc <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800143a:	f002 f979 	bl	8003730 <HAL_RCC_EnableCSS>
}
 800143e:	bf00      	nop
 8001440:	3740      	adds	r7, #64	; 0x40
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b08f      	sub	sp, #60	; 0x3c
 800144c:	af00      	add	r7, sp, #0
  uint8_t buf[20];
  HAL_Init();
 800144e:	f000 fa35 	bl	80018bc <HAL_Init>

  SystemClock_Config();
 8001452:	f7ff ffb1 	bl	80013b8 <SystemClock_Config>

  MX_GPIO_Init();
 8001456:	f7ff ff57 	bl	8001308 <MX_GPIO_Init>
  MX_I2C2_Init();
 800145a:	f7ff ff21 	bl	80012a0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800145e:	f7ff fe93 	bl	8001188 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8001462:	f7ff febb 	bl	80011dc <MX_CAN_Init>
  MX_I2C1_Init();
 8001466:	f7ff feed 	bl	8001244 <MX_I2C1_Init>

  HAL_Delay(50); //allow the ADS to come up
 800146a:	2032      	movs	r0, #50	; 0x32
 800146c:	f000 fa88 	bl	8001980 <HAL_Delay>
  float temp_c = 0;
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
  lm60_cfg_t lm60 = hw_conf_lm60();
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fe55 	bl	8001128 <hw_conf_lm60>

  while (1){
	  lm60_get_temp(&lm60, &temp_c);
 800147e:	f107 0220 	add.w	r2, r7, #32
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fe1e 	bl	80010c8 <lm60_get_temp>
      temp_c *= 100;
 800148c:	6a3b      	ldr	r3, [r7, #32]
 800148e:	491e      	ldr	r1, [pc, #120]	; (8001508 <main+0xc0>)
 8001490:	4618      	mov	r0, r3
 8001492:	f7fe fe65 	bl	8000160 <__aeabi_fmul>
 8001496:	4603      	mov	r3, r0
 8001498:	623b      	str	r3, [r7, #32]
      sprintf((char*)buf, "%d.%u C\r\n",  ((int)temp_c / 100),
 800149a:	6a3b      	ldr	r3, [r7, #32]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fb51 	bl	8000b44 <__aeabi_f2iz>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4a19      	ldr	r2, [pc, #100]	; (800150c <main+0xc4>)
 80014a6:	fb82 1203 	smull	r1, r2, r2, r3
 80014aa:	1152      	asrs	r2, r2, #5
 80014ac:	17db      	asrs	r3, r3, #31
 80014ae:	1ad4      	subs	r4, r2, r3
            (abs(( int)temp_c) % 100));
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fb46 	bl	8000b44 <__aeabi_f2iz>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	bfb8      	it	lt
 80014be:	425b      	neglt	r3, r3
      sprintf((char*)buf, "%d.%u C\r\n",  ((int)temp_c / 100),
 80014c0:	4a12      	ldr	r2, [pc, #72]	; (800150c <main+0xc4>)
 80014c2:	fb82 1203 	smull	r1, r2, r2, r3
 80014c6:	1151      	asrs	r1, r2, #5
 80014c8:	17da      	asrs	r2, r3, #31
 80014ca:	1a8a      	subs	r2, r1, r2
 80014cc:	2164      	movs	r1, #100	; 0x64
 80014ce:	fb01 f202 	mul.w	r2, r1, r2
 80014d2:	1a9a      	subs	r2, r3, r2
 80014d4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80014d8:	4613      	mov	r3, r2
 80014da:	4622      	mov	r2, r4
 80014dc:	490c      	ldr	r1, [pc, #48]	; (8001510 <main+0xc8>)
 80014de:	f002 fbe7 	bl	8003cb0 <siprintf>
      HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80014e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7fe fe32 	bl	8000150 <strlen>
 80014ec:	4603      	mov	r3, r0
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014f8:	4806      	ldr	r0, [pc, #24]	; (8001514 <main+0xcc>)
 80014fa:	f002 fa3c 	bl	8003976 <HAL_UART_Transmit>
	 HAL_Delay(1000);
 80014fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001502:	f000 fa3d 	bl	8001980 <HAL_Delay>
	  lm60_get_temp(&lm60, &temp_c);
 8001506:	e7ba      	b.n	800147e <main+0x36>
 8001508:	42c80000 	.word	0x42c80000
 800150c:	51eb851f 	.word	0x51eb851f
 8001510:	0800453c 	.word	0x0800453c
 8001514:	20000168 	.word	0x20000168

08001518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_MspInit+0x5c>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	4a14      	ldr	r2, [pc, #80]	; (8001574 <HAL_MspInit+0x5c>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6193      	str	r3, [r2, #24]
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_MspInit+0x5c>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <HAL_MspInit+0x5c>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <HAL_MspInit+0x5c>)
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001540:	61d3      	str	r3, [r2, #28]
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <HAL_MspInit+0x5c>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_MspInit+0x60>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <HAL_MspInit+0x60>)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	40021000 	.word	0x40021000
 8001578:	40010000 	.word	0x40010000

0800157c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <HAL_CAN_MspInit+0x8c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d131      	bne.n	8001600 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_CAN_MspInit+0x90>)
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	4a1a      	ldr	r2, [pc, #104]	; (800160c <HAL_CAN_MspInit+0x90>)
 80015a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015a6:	61d3      	str	r3, [r2, #28]
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_CAN_MspInit+0x90>)
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_CAN_MspInit+0x90>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a14      	ldr	r2, [pc, #80]	; (800160c <HAL_CAN_MspInit+0x90>)
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_CAN_MspInit+0x90>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	4619      	mov	r1, r3
 80015e0:	480b      	ldr	r0, [pc, #44]	; (8001610 <HAL_CAN_MspInit+0x94>)
 80015e2:	f000 fbd1 	bl	8001d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	4619      	mov	r1, r3
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <HAL_CAN_MspInit+0x94>)
 80015fc:	f000 fbc4 	bl	8001d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001600:	bf00      	nop
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40006400 	.word	0x40006400
 800160c:	40021000 	.word	0x40021000
 8001610:	40010800 	.word	0x40010800

08001614 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08c      	sub	sp, #48	; 0x30
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a32      	ldr	r2, [pc, #200]	; (80016f8 <HAL_I2C_MspInit+0xe4>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d133      	bne.n	800169c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001634:	4b31      	ldr	r3, [pc, #196]	; (80016fc <HAL_I2C_MspInit+0xe8>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	4a30      	ldr	r2, [pc, #192]	; (80016fc <HAL_I2C_MspInit+0xe8>)
 800163a:	f043 0308 	orr.w	r3, r3, #8
 800163e:	6193      	str	r3, [r2, #24]
 8001640:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <HAL_I2C_MspInit+0xe8>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800164c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001652:	2312      	movs	r3, #18
 8001654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4619      	mov	r1, r3
 8001660:	4827      	ldr	r0, [pc, #156]	; (8001700 <HAL_I2C_MspInit+0xec>)
 8001662:	f000 fb91 	bl	8001d88 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001666:	4b27      	ldr	r3, [pc, #156]	; (8001704 <HAL_I2C_MspInit+0xf0>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800166c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001676:	f043 0302 	orr.w	r3, r3, #2
 800167a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800167c:	4a21      	ldr	r2, [pc, #132]	; (8001704 <HAL_I2C_MspInit+0xf0>)
 800167e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001680:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <HAL_I2C_MspInit+0xe8>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	4a1d      	ldr	r2, [pc, #116]	; (80016fc <HAL_I2C_MspInit+0xe8>)
 8001688:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800168c:	61d3      	str	r3, [r2, #28]
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_I2C_MspInit+0xe8>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800169a:	e029      	b.n	80016f0 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a19      	ldr	r2, [pc, #100]	; (8001708 <HAL_I2C_MspInit+0xf4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d124      	bne.n	80016f0 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_I2C_MspInit+0xe8>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	4a14      	ldr	r2, [pc, #80]	; (80016fc <HAL_I2C_MspInit+0xe8>)
 80016ac:	f043 0308 	orr.w	r3, r3, #8
 80016b0:	6193      	str	r3, [r2, #24]
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_I2C_MspInit+0xe8>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c4:	2312      	movs	r3, #18
 80016c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	f107 031c 	add.w	r3, r7, #28
 80016d0:	4619      	mov	r1, r3
 80016d2:	480b      	ldr	r0, [pc, #44]	; (8001700 <HAL_I2C_MspInit+0xec>)
 80016d4:	f000 fb58 	bl	8001d88 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <HAL_I2C_MspInit+0xe8>)
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	4a07      	ldr	r2, [pc, #28]	; (80016fc <HAL_I2C_MspInit+0xe8>)
 80016de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016e2:	61d3      	str	r3, [r2, #28]
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_I2C_MspInit+0xe8>)
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
}
 80016f0:	bf00      	nop
 80016f2:	3730      	adds	r7, #48	; 0x30
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40005400 	.word	0x40005400
 80016fc:	40021000 	.word	0x40021000
 8001700:	40010c00 	.word	0x40010c00
 8001704:	40010000 	.word	0x40010000
 8001708:	40005800 	.word	0x40005800

0800170c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a1c      	ldr	r2, [pc, #112]	; (8001798 <HAL_UART_MspInit+0x8c>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d131      	bne.n	8001790 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_UART_MspInit+0x90>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a1a      	ldr	r2, [pc, #104]	; (800179c <HAL_UART_MspInit+0x90>)
 8001732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_UART_MspInit+0x90>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_UART_MspInit+0x90>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a14      	ldr	r2, [pc, #80]	; (800179c <HAL_UART_MspInit+0x90>)
 800174a:	f043 0304 	orr.w	r3, r3, #4
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_UART_MspInit+0x90>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800175c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001760:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f107 0310 	add.w	r3, r7, #16
 800176e:	4619      	mov	r1, r3
 8001770:	480b      	ldr	r0, [pc, #44]	; (80017a0 <HAL_UART_MspInit+0x94>)
 8001772:	f000 fb09 	bl	8001d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800177a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	4619      	mov	r1, r3
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <HAL_UART_MspInit+0x94>)
 800178c:	f000 fafc 	bl	8001d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001790:	bf00      	nop
 8001792:	3720      	adds	r7, #32
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40013800 	.word	0x40013800
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010800 	.word	0x40010800

080017a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80017a8:	f002 f860 	bl	800386c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <NMI_Handler+0x8>

080017ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <MemManage_Handler+0x4>

080017ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ee:	f000 f8ab 	bl	8001948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001800:	4a14      	ldr	r2, [pc, #80]	; (8001854 <_sbrk+0x5c>)
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <_sbrk+0x60>)
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d102      	bne.n	800181a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <_sbrk+0x64>)
 8001816:	4a12      	ldr	r2, [pc, #72]	; (8001860 <_sbrk+0x68>)
 8001818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	429a      	cmp	r2, r3
 8001826:	d207      	bcs.n	8001838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001828:	f002 fa10 	bl	8003c4c <__errno>
 800182c:	4603      	mov	r3, r0
 800182e:	220c      	movs	r2, #12
 8001830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001836:	e009      	b.n	800184c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <_sbrk+0x64>)
 8001848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184a:	68fb      	ldr	r3, [r7, #12]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20005000 	.word	0x20005000
 8001858:	00000400 	.word	0x00000400
 800185c:	2000008c 	.word	0x2000008c
 8001860:	200001c0 	.word	0x200001c0

08001864 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001872:	490d      	ldr	r1, [pc, #52]	; (80018a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001888:	4c0a      	ldr	r4, [pc, #40]	; (80018b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001896:	f7ff ffe5 	bl	8001864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800189a:	f002 f9dd 	bl	8003c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800189e:	f7ff fdd3 	bl	8001448 <main>
  bx lr
 80018a2:	4770      	bx	lr
  ldr r0, =_sdata
 80018a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018ac:	080045ac 	.word	0x080045ac
  ldr r2, =_sbss
 80018b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018b4:	200001c0 	.word	0x200001c0

080018b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018b8:	e7fe      	b.n	80018b8 <ADC1_2_IRQHandler>
	...

080018bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <HAL_Init+0x28>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <HAL_Init+0x28>)
 80018c6:	f043 0310 	orr.w	r3, r3, #16
 80018ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f000 fa27 	bl	8001d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d2:	200f      	movs	r0, #15
 80018d4:	f000 f808 	bl	80018e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d8:	f7ff fe1e 	bl	8001518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40022000 	.word	0x40022000

080018e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_InitTick+0x54>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_InitTick+0x58>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f000 fa31 	bl	8001d6e <HAL_SYSTICK_Config>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e00e      	b.n	8001934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b0f      	cmp	r3, #15
 800191a:	d80a      	bhi.n	8001932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191c:	2200      	movs	r2, #0
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001924:	f000 fa07 	bl	8001d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001928:	4a06      	ldr	r2, [pc, #24]	; (8001944 <HAL_InitTick+0x5c>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000000 	.word	0x20000000
 8001940:	20000008 	.word	0x20000008
 8001944:	20000004 	.word	0x20000004

08001948 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_IncTick+0x1c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_IncTick+0x20>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a03      	ldr	r2, [pc, #12]	; (8001968 <HAL_IncTick+0x20>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	20000008 	.word	0x20000008
 8001968:	200001ac 	.word	0x200001ac

0800196c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b02      	ldr	r3, [pc, #8]	; (800197c <HAL_GetTick+0x10>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	200001ac 	.word	0x200001ac

08001980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff fff0 	bl	800196c <HAL_GetTick>
 800198c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001998:	d005      	beq.n	80019a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_Delay+0x44>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019a6:	bf00      	nop
 80019a8:	f7ff ffe0 	bl	800196c <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d8f7      	bhi.n	80019a8 <HAL_Delay+0x28>
  {
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000008 	.word	0x20000008

080019c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e0ed      	b.n	8001bb6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d102      	bne.n	80019ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff fdc8 	bl	800157c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019fc:	f7ff ffb6 	bl	800196c <HAL_GetTick>
 8001a00:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a02:	e012      	b.n	8001a2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a04:	f7ff ffb2 	bl	800196c <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b0a      	cmp	r3, #10
 8001a10:	d90b      	bls.n	8001a2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2205      	movs	r2, #5
 8001a22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e0c5      	b.n	8001bb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0e5      	beq.n	8001a04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0202 	bic.w	r2, r2, #2
 8001a46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a48:	f7ff ff90 	bl	800196c <HAL_GetTick>
 8001a4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a4e:	e012      	b.n	8001a76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a50:	f7ff ff8c 	bl	800196c <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b0a      	cmp	r3, #10
 8001a5c:	d90b      	bls.n	8001a76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2205      	movs	r2, #5
 8001a6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e09f      	b.n	8001bb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1e5      	bne.n	8001a50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	7e1b      	ldrb	r3, [r3, #24]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d108      	bne.n	8001a9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e007      	b.n	8001aae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	7e5b      	ldrb	r3, [r3, #25]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d108      	bne.n	8001ac8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	e007      	b.n	8001ad8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ad6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7e9b      	ldrb	r3, [r3, #26]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d108      	bne.n	8001af2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0220 	orr.w	r2, r2, #32
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e007      	b.n	8001b02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0220 	bic.w	r2, r2, #32
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	7edb      	ldrb	r3, [r3, #27]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d108      	bne.n	8001b1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0210 	bic.w	r2, r2, #16
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e007      	b.n	8001b2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0210 	orr.w	r2, r2, #16
 8001b2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7f1b      	ldrb	r3, [r3, #28]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d108      	bne.n	8001b46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0208 	orr.w	r2, r2, #8
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e007      	b.n	8001b56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0208 	bic.w	r2, r2, #8
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7f5b      	ldrb	r3, [r3, #29]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d108      	bne.n	8001b70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0204 	orr.w	r2, r2, #4
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e007      	b.n	8001b80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0204 	bic.w	r2, r2, #4
 8001b7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	ea42 0103 	orr.w	r1, r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	1e5a      	subs	r2, r3, #1
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf2:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	60d3      	str	r3, [r2, #12]
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <__NVIC_GetPriorityGrouping+0x18>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	f003 0307 	and.w	r3, r3, #7
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0a      	blt.n	8001c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	490c      	ldr	r1, [pc, #48]	; (8001c70 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c4c:	e00a      	b.n	8001c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4908      	ldr	r1, [pc, #32]	; (8001c74 <__NVIC_SetPriority+0x50>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	761a      	strb	r2, [r3, #24]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f1c3 0307 	rsb	r3, r3, #7
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	bf28      	it	cs
 8001c96:	2304      	movcs	r3, #4
 8001c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d902      	bls.n	8001ca8 <NVIC_EncodePriority+0x30>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	e000      	b.n	8001caa <NVIC_EncodePriority+0x32>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	401a      	ands	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	4313      	orrs	r3, r2
         );
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cec:	d301      	bcc.n	8001cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00f      	b.n	8001d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <SysTick_Config+0x40>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfa:	210f      	movs	r1, #15
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d00:	f7ff ff90 	bl	8001c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <SysTick_Config+0x40>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0a:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <SysTick_Config+0x40>)
 8001d0c:	2207      	movs	r2, #7
 8001d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	e000e010 	.word	0xe000e010

08001d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff49 	bl	8001bc0 <__NVIC_SetPriorityGrouping>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d48:	f7ff ff5e 	bl	8001c08 <__NVIC_GetPriorityGrouping>
 8001d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	6978      	ldr	r0, [r7, #20]
 8001d54:	f7ff ff90 	bl	8001c78 <NVIC_EncodePriority>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff5f 	bl	8001c24 <__NVIC_SetPriority>
}
 8001d66:	bf00      	nop
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ffb0 	bl	8001cdc <SysTick_Config>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b08b      	sub	sp, #44	; 0x2c
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9a:	e169      	b.n	8002070 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	f040 8158 	bne.w	800206a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	4a9a      	ldr	r2, [pc, #616]	; (8002028 <HAL_GPIO_Init+0x2a0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d05e      	beq.n	8001e82 <HAL_GPIO_Init+0xfa>
 8001dc4:	4a98      	ldr	r2, [pc, #608]	; (8002028 <HAL_GPIO_Init+0x2a0>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d875      	bhi.n	8001eb6 <HAL_GPIO_Init+0x12e>
 8001dca:	4a98      	ldr	r2, [pc, #608]	; (800202c <HAL_GPIO_Init+0x2a4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d058      	beq.n	8001e82 <HAL_GPIO_Init+0xfa>
 8001dd0:	4a96      	ldr	r2, [pc, #600]	; (800202c <HAL_GPIO_Init+0x2a4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d86f      	bhi.n	8001eb6 <HAL_GPIO_Init+0x12e>
 8001dd6:	4a96      	ldr	r2, [pc, #600]	; (8002030 <HAL_GPIO_Init+0x2a8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d052      	beq.n	8001e82 <HAL_GPIO_Init+0xfa>
 8001ddc:	4a94      	ldr	r2, [pc, #592]	; (8002030 <HAL_GPIO_Init+0x2a8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d869      	bhi.n	8001eb6 <HAL_GPIO_Init+0x12e>
 8001de2:	4a94      	ldr	r2, [pc, #592]	; (8002034 <HAL_GPIO_Init+0x2ac>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d04c      	beq.n	8001e82 <HAL_GPIO_Init+0xfa>
 8001de8:	4a92      	ldr	r2, [pc, #584]	; (8002034 <HAL_GPIO_Init+0x2ac>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d863      	bhi.n	8001eb6 <HAL_GPIO_Init+0x12e>
 8001dee:	4a92      	ldr	r2, [pc, #584]	; (8002038 <HAL_GPIO_Init+0x2b0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d046      	beq.n	8001e82 <HAL_GPIO_Init+0xfa>
 8001df4:	4a90      	ldr	r2, [pc, #576]	; (8002038 <HAL_GPIO_Init+0x2b0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d85d      	bhi.n	8001eb6 <HAL_GPIO_Init+0x12e>
 8001dfa:	2b12      	cmp	r3, #18
 8001dfc:	d82a      	bhi.n	8001e54 <HAL_GPIO_Init+0xcc>
 8001dfe:	2b12      	cmp	r3, #18
 8001e00:	d859      	bhi.n	8001eb6 <HAL_GPIO_Init+0x12e>
 8001e02:	a201      	add	r2, pc, #4	; (adr r2, 8001e08 <HAL_GPIO_Init+0x80>)
 8001e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e08:	08001e83 	.word	0x08001e83
 8001e0c:	08001e5d 	.word	0x08001e5d
 8001e10:	08001e6f 	.word	0x08001e6f
 8001e14:	08001eb1 	.word	0x08001eb1
 8001e18:	08001eb7 	.word	0x08001eb7
 8001e1c:	08001eb7 	.word	0x08001eb7
 8001e20:	08001eb7 	.word	0x08001eb7
 8001e24:	08001eb7 	.word	0x08001eb7
 8001e28:	08001eb7 	.word	0x08001eb7
 8001e2c:	08001eb7 	.word	0x08001eb7
 8001e30:	08001eb7 	.word	0x08001eb7
 8001e34:	08001eb7 	.word	0x08001eb7
 8001e38:	08001eb7 	.word	0x08001eb7
 8001e3c:	08001eb7 	.word	0x08001eb7
 8001e40:	08001eb7 	.word	0x08001eb7
 8001e44:	08001eb7 	.word	0x08001eb7
 8001e48:	08001eb7 	.word	0x08001eb7
 8001e4c:	08001e65 	.word	0x08001e65
 8001e50:	08001e79 	.word	0x08001e79
 8001e54:	4a79      	ldr	r2, [pc, #484]	; (800203c <HAL_GPIO_Init+0x2b4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e5a:	e02c      	b.n	8001eb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	623b      	str	r3, [r7, #32]
          break;
 8001e62:	e029      	b.n	8001eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	623b      	str	r3, [r7, #32]
          break;
 8001e6c:	e024      	b.n	8001eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	3308      	adds	r3, #8
 8001e74:	623b      	str	r3, [r7, #32]
          break;
 8001e76:	e01f      	b.n	8001eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	330c      	adds	r3, #12
 8001e7e:	623b      	str	r3, [r7, #32]
          break;
 8001e80:	e01a      	b.n	8001eb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d102      	bne.n	8001e90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	623b      	str	r3, [r7, #32]
          break;
 8001e8e:	e013      	b.n	8001eb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d105      	bne.n	8001ea4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e98:	2308      	movs	r3, #8
 8001e9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	611a      	str	r2, [r3, #16]
          break;
 8001ea2:	e009      	b.n	8001eb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ea4:	2308      	movs	r3, #8
 8001ea6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	615a      	str	r2, [r3, #20]
          break;
 8001eae:	e003      	b.n	8001eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	623b      	str	r3, [r7, #32]
          break;
 8001eb4:	e000      	b.n	8001eb8 <HAL_GPIO_Init+0x130>
          break;
 8001eb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	2bff      	cmp	r3, #255	; 0xff
 8001ebc:	d801      	bhi.n	8001ec2 <HAL_GPIO_Init+0x13a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	e001      	b.n	8001ec6 <HAL_GPIO_Init+0x13e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2bff      	cmp	r3, #255	; 0xff
 8001ecc:	d802      	bhi.n	8001ed4 <HAL_GPIO_Init+0x14c>
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	e002      	b.n	8001eda <HAL_GPIO_Init+0x152>
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	3b08      	subs	r3, #8
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	210f      	movs	r1, #15
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	401a      	ands	r2, r3
 8001eec:	6a39      	ldr	r1, [r7, #32]
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 80b1 	beq.w	800206a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f08:	4b4d      	ldr	r3, [pc, #308]	; (8002040 <HAL_GPIO_Init+0x2b8>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a4c      	ldr	r2, [pc, #304]	; (8002040 <HAL_GPIO_Init+0x2b8>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b4a      	ldr	r3, [pc, #296]	; (8002040 <HAL_GPIO_Init+0x2b8>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f20:	4a48      	ldr	r2, [pc, #288]	; (8002044 <HAL_GPIO_Init+0x2bc>)
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	3302      	adds	r3, #2
 8001f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	220f      	movs	r2, #15
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	4013      	ands	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a40      	ldr	r2, [pc, #256]	; (8002048 <HAL_GPIO_Init+0x2c0>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d013      	beq.n	8001f74 <HAL_GPIO_Init+0x1ec>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a3f      	ldr	r2, [pc, #252]	; (800204c <HAL_GPIO_Init+0x2c4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d00d      	beq.n	8001f70 <HAL_GPIO_Init+0x1e8>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a3e      	ldr	r2, [pc, #248]	; (8002050 <HAL_GPIO_Init+0x2c8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d007      	beq.n	8001f6c <HAL_GPIO_Init+0x1e4>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a3d      	ldr	r2, [pc, #244]	; (8002054 <HAL_GPIO_Init+0x2cc>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d101      	bne.n	8001f68 <HAL_GPIO_Init+0x1e0>
 8001f64:	2303      	movs	r3, #3
 8001f66:	e006      	b.n	8001f76 <HAL_GPIO_Init+0x1ee>
 8001f68:	2304      	movs	r3, #4
 8001f6a:	e004      	b.n	8001f76 <HAL_GPIO_Init+0x1ee>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e002      	b.n	8001f76 <HAL_GPIO_Init+0x1ee>
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <HAL_GPIO_Init+0x1ee>
 8001f74:	2300      	movs	r3, #0
 8001f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f78:	f002 0203 	and.w	r2, r2, #3
 8001f7c:	0092      	lsls	r2, r2, #2
 8001f7e:	4093      	lsls	r3, r2
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f86:	492f      	ldr	r1, [pc, #188]	; (8002044 <HAL_GPIO_Init+0x2bc>)
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	089b      	lsrs	r3, r3, #2
 8001f8c:	3302      	adds	r3, #2
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d006      	beq.n	8001fae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fa0:	4b2d      	ldr	r3, [pc, #180]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	492c      	ldr	r1, [pc, #176]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	600b      	str	r3, [r1, #0]
 8001fac:	e006      	b.n	8001fbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fae:	4b2a      	ldr	r3, [pc, #168]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	4928      	ldr	r1, [pc, #160]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d006      	beq.n	8001fd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fc8:	4b23      	ldr	r3, [pc, #140]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	4922      	ldr	r1, [pc, #136]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]
 8001fd4:	e006      	b.n	8001fe4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fd6:	4b20      	ldr	r3, [pc, #128]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	491e      	ldr	r1, [pc, #120]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d006      	beq.n	8001ffe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	4918      	ldr	r1, [pc, #96]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	608b      	str	r3, [r1, #8]
 8001ffc:	e006      	b.n	800200c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	43db      	mvns	r3, r3
 8002006:	4914      	ldr	r1, [pc, #80]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 8002008:	4013      	ands	r3, r2
 800200a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d021      	beq.n	800205c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	490e      	ldr	r1, [pc, #56]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	60cb      	str	r3, [r1, #12]
 8002024:	e021      	b.n	800206a <HAL_GPIO_Init+0x2e2>
 8002026:	bf00      	nop
 8002028:	10320000 	.word	0x10320000
 800202c:	10310000 	.word	0x10310000
 8002030:	10220000 	.word	0x10220000
 8002034:	10210000 	.word	0x10210000
 8002038:	10120000 	.word	0x10120000
 800203c:	10110000 	.word	0x10110000
 8002040:	40021000 	.word	0x40021000
 8002044:	40010000 	.word	0x40010000
 8002048:	40010800 	.word	0x40010800
 800204c:	40010c00 	.word	0x40010c00
 8002050:	40011000 	.word	0x40011000
 8002054:	40011400 	.word	0x40011400
 8002058:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_GPIO_Init+0x304>)
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	43db      	mvns	r3, r3
 8002064:	4909      	ldr	r1, [pc, #36]	; (800208c <HAL_GPIO_Init+0x304>)
 8002066:	4013      	ands	r3, r2
 8002068:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	3301      	adds	r3, #1
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	fa22 f303 	lsr.w	r3, r2, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	f47f ae8e 	bne.w	8001d9c <HAL_GPIO_Init+0x14>
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	372c      	adds	r7, #44	; 0x2c
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	40010400 	.word	0x40010400

08002090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]
 800209c:	4613      	mov	r3, r2
 800209e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020a0:	787b      	ldrb	r3, [r7, #1]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a6:	887a      	ldrh	r2, [r7, #2]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020ac:	e003      	b.n	80020b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020ae:	887b      	ldrh	r3, [r7, #2]
 80020b0:	041a      	lsls	r2, r3, #16
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	611a      	str	r2, [r3, #16]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e12b      	b.n	800232a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d106      	bne.n	80020ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff fa94 	bl	8001614 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2224      	movs	r2, #36	; 0x24
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0201 	bic.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002112:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002122:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002124:	f001 fb7a 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 8002128:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4a81      	ldr	r2, [pc, #516]	; (8002334 <HAL_I2C_Init+0x274>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d807      	bhi.n	8002144 <HAL_I2C_Init+0x84>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4a80      	ldr	r2, [pc, #512]	; (8002338 <HAL_I2C_Init+0x278>)
 8002138:	4293      	cmp	r3, r2
 800213a:	bf94      	ite	ls
 800213c:	2301      	movls	r3, #1
 800213e:	2300      	movhi	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	e006      	b.n	8002152 <HAL_I2C_Init+0x92>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4a7d      	ldr	r2, [pc, #500]	; (800233c <HAL_I2C_Init+0x27c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	bf94      	ite	ls
 800214c:	2301      	movls	r3, #1
 800214e:	2300      	movhi	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e0e7      	b.n	800232a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4a78      	ldr	r2, [pc, #480]	; (8002340 <HAL_I2C_Init+0x280>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	0c9b      	lsrs	r3, r3, #18
 8002164:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	430a      	orrs	r2, r1
 8002178:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	4a6a      	ldr	r2, [pc, #424]	; (8002334 <HAL_I2C_Init+0x274>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d802      	bhi.n	8002194 <HAL_I2C_Init+0xd4>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	3301      	adds	r3, #1
 8002192:	e009      	b.n	80021a8 <HAL_I2C_Init+0xe8>
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800219a:	fb02 f303 	mul.w	r3, r2, r3
 800219e:	4a69      	ldr	r2, [pc, #420]	; (8002344 <HAL_I2C_Init+0x284>)
 80021a0:	fba2 2303 	umull	r2, r3, r2, r3
 80021a4:	099b      	lsrs	r3, r3, #6
 80021a6:	3301      	adds	r3, #1
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	430b      	orrs	r3, r1
 80021ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	495c      	ldr	r1, [pc, #368]	; (8002334 <HAL_I2C_Init+0x274>)
 80021c4:	428b      	cmp	r3, r1
 80021c6:	d819      	bhi.n	80021fc <HAL_I2C_Init+0x13c>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	1e59      	subs	r1, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80021d6:	1c59      	adds	r1, r3, #1
 80021d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021dc:	400b      	ands	r3, r1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_I2C_Init+0x138>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1e59      	subs	r1, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80021f0:	3301      	adds	r3, #1
 80021f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f6:	e051      	b.n	800229c <HAL_I2C_Init+0x1dc>
 80021f8:	2304      	movs	r3, #4
 80021fa:	e04f      	b.n	800229c <HAL_I2C_Init+0x1dc>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d111      	bne.n	8002228 <HAL_I2C_Init+0x168>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1e58      	subs	r0, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6859      	ldr	r1, [r3, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	440b      	add	r3, r1
 8002212:	fbb0 f3f3 	udiv	r3, r0, r3
 8002216:	3301      	adds	r3, #1
 8002218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	e012      	b.n	800224e <HAL_I2C_Init+0x18e>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1e58      	subs	r0, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6859      	ldr	r1, [r3, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	0099      	lsls	r1, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	fbb0 f3f3 	udiv	r3, r0, r3
 800223e:	3301      	adds	r3, #1
 8002240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002244:	2b00      	cmp	r3, #0
 8002246:	bf0c      	ite	eq
 8002248:	2301      	moveq	r3, #1
 800224a:	2300      	movne	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_I2C_Init+0x196>
 8002252:	2301      	movs	r3, #1
 8002254:	e022      	b.n	800229c <HAL_I2C_Init+0x1dc>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10e      	bne.n	800227c <HAL_I2C_Init+0x1bc>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1e58      	subs	r0, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6859      	ldr	r1, [r3, #4]
 8002266:	460b      	mov	r3, r1
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	440b      	add	r3, r1
 800226c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002270:	3301      	adds	r3, #1
 8002272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800227a:	e00f      	b.n	800229c <HAL_I2C_Init+0x1dc>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1e58      	subs	r0, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6859      	ldr	r1, [r3, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	0099      	lsls	r1, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002292:	3301      	adds	r3, #1
 8002294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002298:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	6809      	ldr	r1, [r1, #0]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69da      	ldr	r2, [r3, #28]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6911      	ldr	r1, [r2, #16]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68d2      	ldr	r2, [r2, #12]
 80022d6:	4311      	orrs	r1, r2
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	430b      	orrs	r3, r1
 80022de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695a      	ldr	r2, [r3, #20]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2220      	movs	r2, #32
 8002316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	000186a0 	.word	0x000186a0
 8002338:	001e847f 	.word	0x001e847f
 800233c:	003d08ff 	.word	0x003d08ff
 8002340:	431bde83 	.word	0x431bde83
 8002344:	10624dd3 	.word	0x10624dd3

08002348 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af02      	add	r7, sp, #8
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	461a      	mov	r2, r3
 8002354:	460b      	mov	r3, r1
 8002356:	817b      	strh	r3, [r7, #10]
 8002358:	4613      	mov	r3, r2
 800235a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800235c:	f7ff fb06 	bl	800196c <HAL_GetTick>
 8002360:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b20      	cmp	r3, #32
 800236c:	f040 80e0 	bne.w	8002530 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2319      	movs	r3, #25
 8002376:	2201      	movs	r2, #1
 8002378:	4970      	ldr	r1, [pc, #448]	; (800253c <HAL_I2C_Master_Transmit+0x1f4>)
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 fc92 	bl	8002ca4 <I2C_WaitOnFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002386:	2302      	movs	r3, #2
 8002388:	e0d3      	b.n	8002532 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002390:	2b01      	cmp	r3, #1
 8002392:	d101      	bne.n	8002398 <HAL_I2C_Master_Transmit+0x50>
 8002394:	2302      	movs	r3, #2
 8002396:	e0cc      	b.n	8002532 <HAL_I2C_Master_Transmit+0x1ea>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d007      	beq.n	80023be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2221      	movs	r2, #33	; 0x21
 80023d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2210      	movs	r2, #16
 80023da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	893a      	ldrh	r2, [r7, #8]
 80023ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4a50      	ldr	r2, [pc, #320]	; (8002540 <HAL_I2C_Master_Transmit+0x1f8>)
 80023fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002400:	8979      	ldrh	r1, [r7, #10]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	6a3a      	ldr	r2, [r7, #32]
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 fafc 	bl	8002a04 <I2C_MasterRequestWrite>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e08d      	b.n	8002532 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800242c:	e066      	b.n	80024fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	6a39      	ldr	r1, [r7, #32]
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 fd0c 	bl	8002e50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00d      	beq.n	800245a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	2b04      	cmp	r3, #4
 8002444:	d107      	bne.n	8002456 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002454:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e06b      	b.n	8002532 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	781a      	ldrb	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002474:	b29b      	uxth	r3, r3
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b04      	cmp	r3, #4
 8002496:	d11b      	bne.n	80024d0 <HAL_I2C_Master_Transmit+0x188>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249c:	2b00      	cmp	r3, #0
 800249e:	d017      	beq.n	80024d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	781a      	ldrb	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	6a39      	ldr	r1, [r7, #32]
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 fcfc 	bl	8002ed2 <I2C_WaitOnBTFFlagUntilTimeout>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00d      	beq.n	80024fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d107      	bne.n	80024f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e01a      	b.n	8002532 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002500:	2b00      	cmp	r3, #0
 8002502:	d194      	bne.n	800242e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002512:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2220      	movs	r2, #32
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	e000      	b.n	8002532 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002530:	2302      	movs	r3, #2
  }
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	00100002 	.word	0x00100002
 8002540:	ffff0000 	.word	0xffff0000

08002544 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08c      	sub	sp, #48	; 0x30
 8002548:	af02      	add	r7, sp, #8
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	461a      	mov	r2, r3
 8002550:	460b      	mov	r3, r1
 8002552:	817b      	strh	r3, [r7, #10]
 8002554:	4613      	mov	r3, r2
 8002556:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800255c:	f7ff fa06 	bl	800196c <HAL_GetTick>
 8002560:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b20      	cmp	r3, #32
 800256c:	f040 823f 	bne.w	80029ee <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	2319      	movs	r3, #25
 8002576:	2201      	movs	r2, #1
 8002578:	497f      	ldr	r1, [pc, #508]	; (8002778 <HAL_I2C_Master_Receive+0x234>)
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 fb92 	bl	8002ca4 <I2C_WaitOnFlagUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002586:	2302      	movs	r3, #2
 8002588:	e232      	b.n	80029f0 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_I2C_Master_Receive+0x54>
 8002594:	2302      	movs	r3, #2
 8002596:	e22b      	b.n	80029f0 <HAL_I2C_Master_Receive+0x4ac>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d007      	beq.n	80025be <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0201 	orr.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2222      	movs	r2, #34	; 0x22
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2210      	movs	r2, #16
 80025da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	893a      	ldrh	r2, [r7, #8]
 80025ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4a5f      	ldr	r2, [pc, #380]	; (800277c <HAL_I2C_Master_Receive+0x238>)
 80025fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002600:	8979      	ldrh	r1, [r7, #10]
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 fa7e 	bl	8002b08 <I2C_MasterRequestRead>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e1ec      	b.n	80029f0 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261a:	2b00      	cmp	r3, #0
 800261c:	d113      	bne.n	8002646 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	e1c0      	b.n	80029c8 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264a:	2b01      	cmp	r3, #1
 800264c:	d11e      	bne.n	800268c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800265c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800265e:	b672      	cpsid	i
}
 8002660:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002662:	2300      	movs	r3, #0
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	61bb      	str	r3, [r7, #24]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002686:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002688:	b662      	cpsie	i
}
 800268a:	e035      	b.n	80026f8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002690:	2b02      	cmp	r3, #2
 8002692:	d11e      	bne.n	80026d2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026a4:	b672      	cpsid	i
}
 80026a6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80026ce:	b662      	cpsie	i
}
 80026d0:	e012      	b.n	80026f8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80026f8:	e166      	b.n	80029c8 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fe:	2b03      	cmp	r3, #3
 8002700:	f200 811f 	bhi.w	8002942 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002708:	2b01      	cmp	r3, #1
 800270a:	d123      	bne.n	8002754 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800270c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 fc1f 	bl	8002f54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e167      	b.n	80029f0 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002748:	b29b      	uxth	r3, r3
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002752:	e139      	b.n	80029c8 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002758:	2b02      	cmp	r3, #2
 800275a:	d152      	bne.n	8002802 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002762:	2200      	movs	r2, #0
 8002764:	4906      	ldr	r1, [pc, #24]	; (8002780 <HAL_I2C_Master_Receive+0x23c>)
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 fa9c 	bl	8002ca4 <I2C_WaitOnFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d008      	beq.n	8002784 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e13c      	b.n	80029f0 <HAL_I2C_Master_Receive+0x4ac>
 8002776:	bf00      	nop
 8002778:	00100002 	.word	0x00100002
 800277c:	ffff0000 	.word	0xffff0000
 8002780:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002784:	b672      	cpsid	i
}
 8002786:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002796:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691a      	ldr	r2, [r3, #16]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80027ca:	b662      	cpsie	i
}
 80027cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002800:	e0e2      	b.n	80029c8 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002808:	2200      	movs	r2, #0
 800280a:	497b      	ldr	r1, [pc, #492]	; (80029f8 <HAL_I2C_Master_Receive+0x4b4>)
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 fa49 	bl	8002ca4 <I2C_WaitOnFlagUntilTimeout>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0e9      	b.n	80029f0 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800282a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800282c:	b672      	cpsid	i
}
 800282e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691a      	ldr	r2, [r3, #16]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002862:	4b66      	ldr	r3, [pc, #408]	; (80029fc <HAL_I2C_Master_Receive+0x4b8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	08db      	lsrs	r3, r3, #3
 8002868:	4a65      	ldr	r2, [pc, #404]	; (8002a00 <HAL_I2C_Master_Receive+0x4bc>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	0a1a      	lsrs	r2, r3, #8
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	00da      	lsls	r2, r3, #3
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	3b01      	subs	r3, #1
 8002880:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d118      	bne.n	80028ba <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f043 0220 	orr.w	r2, r3, #32
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80028aa:	b662      	cpsie	i
}
 80028ac:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e09a      	b.n	80029f0 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d1d9      	bne.n	800287c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800290a:	b662      	cpsie	i
}
 800290c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002936:	b29b      	uxth	r3, r3
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002940:	e042      	b.n	80029c8 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002944:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 fb04 	bl	8002f54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e04c      	b.n	80029f0 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297e:	b29b      	uxth	r3, r3
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b04      	cmp	r3, #4
 8002994:	d118      	bne.n	80029c8 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f47f ae94 	bne.w	80026fa <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2220      	movs	r2, #32
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	e000      	b.n	80029f0 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80029ee:	2302      	movs	r3, #2
  }
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3728      	adds	r7, #40	; 0x28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	00010004 	.word	0x00010004
 80029fc:	20000000 	.word	0x20000000
 8002a00:	14f8b589 	.word	0x14f8b589

08002a04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af02      	add	r7, sp, #8
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	460b      	mov	r3, r1
 8002a12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d006      	beq.n	8002a2e <I2C_MasterRequestWrite+0x2a>
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d003      	beq.n	8002a2e <I2C_MasterRequestWrite+0x2a>
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a2c:	d108      	bne.n	8002a40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	e00b      	b.n	8002a58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	2b12      	cmp	r3, #18
 8002a46:	d107      	bne.n	8002a58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 f91d 	bl	8002ca4 <I2C_WaitOnFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00d      	beq.n	8002a8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a7e:	d103      	bne.n	8002a88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e035      	b.n	8002af8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a94:	d108      	bne.n	8002aa8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a96:	897b      	ldrh	r3, [r7, #10]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002aa4:	611a      	str	r2, [r3, #16]
 8002aa6:	e01b      	b.n	8002ae0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002aa8:	897b      	ldrh	r3, [r7, #10]
 8002aaa:	11db      	asrs	r3, r3, #7
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	f003 0306 	and.w	r3, r3, #6
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	f063 030f 	orn	r3, r3, #15
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	490e      	ldr	r1, [pc, #56]	; (8002b00 <I2C_MasterRequestWrite+0xfc>)
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f943 	bl	8002d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e010      	b.n	8002af8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ad6:	897b      	ldrh	r3, [r7, #10]
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	4907      	ldr	r1, [pc, #28]	; (8002b04 <I2C_MasterRequestWrite+0x100>)
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f933 	bl	8002d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	00010008 	.word	0x00010008
 8002b04:	00010002 	.word	0x00010002

08002b08 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	460b      	mov	r3, r1
 8002b16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b2c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d006      	beq.n	8002b42 <I2C_MasterRequestRead+0x3a>
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d003      	beq.n	8002b42 <I2C_MasterRequestRead+0x3a>
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b40:	d108      	bne.n	8002b54 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e00b      	b.n	8002b6c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	2b11      	cmp	r3, #17
 8002b5a:	d107      	bne.n	8002b6c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f893 	bl	8002ca4 <I2C_WaitOnFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00d      	beq.n	8002ba0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b92:	d103      	bne.n	8002b9c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e079      	b.n	8002c94 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ba8:	d108      	bne.n	8002bbc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002baa:	897b      	ldrh	r3, [r7, #10]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	611a      	str	r2, [r3, #16]
 8002bba:	e05f      	b.n	8002c7c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bbc:	897b      	ldrh	r3, [r7, #10]
 8002bbe:	11db      	asrs	r3, r3, #7
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	f003 0306 	and.w	r3, r3, #6
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f063 030f 	orn	r3, r3, #15
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	4930      	ldr	r1, [pc, #192]	; (8002c9c <I2C_MasterRequestRead+0x194>)
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f8b9 	bl	8002d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e054      	b.n	8002c94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bea:	897b      	ldrh	r3, [r7, #10]
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	4929      	ldr	r1, [pc, #164]	; (8002ca0 <I2C_MasterRequestRead+0x198>)
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f8a9 	bl	8002d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e044      	b.n	8002c94 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c2e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f831 	bl	8002ca4 <I2C_WaitOnFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00d      	beq.n	8002c64 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c56:	d103      	bne.n	8002c60 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e017      	b.n	8002c94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002c64:	897b      	ldrh	r3, [r7, #10]
 8002c66:	11db      	asrs	r3, r3, #7
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f003 0306 	and.w	r3, r3, #6
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f063 030e 	orn	r3, r3, #14
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4907      	ldr	r1, [pc, #28]	; (8002ca0 <I2C_MasterRequestRead+0x198>)
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f865 	bl	8002d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	00010008 	.word	0x00010008
 8002ca0:	00010002 	.word	0x00010002

08002ca4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cb4:	e025      	b.n	8002d02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cbc:	d021      	beq.n	8002d02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cbe:	f7fe fe55 	bl	800196c <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d302      	bcc.n	8002cd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d116      	bne.n	8002d02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f043 0220 	orr.w	r2, r3, #32
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e023      	b.n	8002d4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	0c1b      	lsrs	r3, r3, #16
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d10d      	bne.n	8002d28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	43da      	mvns	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4013      	ands	r3, r2
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	bf0c      	ite	eq
 8002d1e:	2301      	moveq	r3, #1
 8002d20:	2300      	movne	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	e00c      	b.n	8002d42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4013      	ands	r3, r2
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	bf0c      	ite	eq
 8002d3a:	2301      	moveq	r3, #1
 8002d3c:	2300      	movne	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d0b6      	beq.n	8002cb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d60:	e051      	b.n	8002e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d70:	d123      	bne.n	8002dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f043 0204 	orr.w	r2, r3, #4
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e046      	b.n	8002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dc0:	d021      	beq.n	8002e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc2:	f7fe fdd3 	bl	800196c <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d302      	bcc.n	8002dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d116      	bne.n	8002e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f043 0220 	orr.w	r2, r3, #32
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e020      	b.n	8002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	0c1b      	lsrs	r3, r3, #16
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d10c      	bne.n	8002e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	43da      	mvns	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	bf14      	ite	ne
 8002e22:	2301      	movne	r3, #1
 8002e24:	2300      	moveq	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	e00b      	b.n	8002e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	43da      	mvns	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	4013      	ands	r3, r2
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf14      	ite	ne
 8002e3c:	2301      	movne	r3, #1
 8002e3e:	2300      	moveq	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d18d      	bne.n	8002d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e5c:	e02d      	b.n	8002eba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f8ce 	bl	8003000 <I2C_IsAcknowledgeFailed>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e02d      	b.n	8002eca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e74:	d021      	beq.n	8002eba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e76:	f7fe fd79 	bl	800196c <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d302      	bcc.n	8002e8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d116      	bne.n	8002eba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f043 0220 	orr.w	r2, r3, #32
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e007      	b.n	8002eca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec4:	2b80      	cmp	r3, #128	; 0x80
 8002ec6:	d1ca      	bne.n	8002e5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ede:	e02d      	b.n	8002f3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f88d 	bl	8003000 <I2C_IsAcknowledgeFailed>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e02d      	b.n	8002f4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ef6:	d021      	beq.n	8002f3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef8:	f7fe fd38 	bl	800196c <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d302      	bcc.n	8002f0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d116      	bne.n	8002f3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	f043 0220 	orr.w	r2, r3, #32
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e007      	b.n	8002f4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d1ca      	bne.n	8002ee0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f60:	e042      	b.n	8002fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f003 0310 	and.w	r3, r3, #16
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d119      	bne.n	8002fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0210 	mvn.w	r2, #16
 8002f78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e029      	b.n	8002ff8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa4:	f7fe fce2 	bl	800196c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d302      	bcc.n	8002fba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d116      	bne.n	8002fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	f043 0220 	orr.w	r2, r3, #32
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e007      	b.n	8002ff8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	d1b5      	bne.n	8002f62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003016:	d11b      	bne.n	8003050 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003020:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f043 0204 	orr.w	r2, r3, #4
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e26c      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 8087 	beq.w	800318a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800307c:	4b92      	ldr	r3, [pc, #584]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 030c 	and.w	r3, r3, #12
 8003084:	2b04      	cmp	r3, #4
 8003086:	d00c      	beq.n	80030a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003088:	4b8f      	ldr	r3, [pc, #572]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 030c 	and.w	r3, r3, #12
 8003090:	2b08      	cmp	r3, #8
 8003092:	d112      	bne.n	80030ba <HAL_RCC_OscConfig+0x5e>
 8003094:	4b8c      	ldr	r3, [pc, #560]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800309c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a0:	d10b      	bne.n	80030ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a2:	4b89      	ldr	r3, [pc, #548]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d06c      	beq.n	8003188 <HAL_RCC_OscConfig+0x12c>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d168      	bne.n	8003188 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e246      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c2:	d106      	bne.n	80030d2 <HAL_RCC_OscConfig+0x76>
 80030c4:	4b80      	ldr	r3, [pc, #512]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a7f      	ldr	r2, [pc, #508]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80030ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ce:	6013      	str	r3, [r2, #0]
 80030d0:	e02e      	b.n	8003130 <HAL_RCC_OscConfig+0xd4>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x98>
 80030da:	4b7b      	ldr	r3, [pc, #492]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a7a      	ldr	r2, [pc, #488]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	4b78      	ldr	r3, [pc, #480]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a77      	ldr	r2, [pc, #476]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80030ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e01d      	b.n	8003130 <HAL_RCC_OscConfig+0xd4>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030fc:	d10c      	bne.n	8003118 <HAL_RCC_OscConfig+0xbc>
 80030fe:	4b72      	ldr	r3, [pc, #456]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a71      	ldr	r2, [pc, #452]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 8003104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b6f      	ldr	r3, [pc, #444]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a6e      	ldr	r2, [pc, #440]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e00b      	b.n	8003130 <HAL_RCC_OscConfig+0xd4>
 8003118:	4b6b      	ldr	r3, [pc, #428]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a6a      	ldr	r2, [pc, #424]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 800311e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	4b68      	ldr	r3, [pc, #416]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a67      	ldr	r2, [pc, #412]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 800312a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800312e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d013      	beq.n	8003160 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fe fc18 	bl	800196c <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003140:	f7fe fc14 	bl	800196c <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e1fa      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	4b5d      	ldr	r3, [pc, #372]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0xe4>
 800315e:	e014      	b.n	800318a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003160:	f7fe fc04 	bl	800196c <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003168:	f7fe fc00 	bl	800196c <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	; 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e1e6      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317a:	4b53      	ldr	r3, [pc, #332]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x10c>
 8003186:	e000      	b.n	800318a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d063      	beq.n	800325e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003196:	4b4c      	ldr	r3, [pc, #304]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00b      	beq.n	80031ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031a2:	4b49      	ldr	r3, [pc, #292]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 030c 	and.w	r3, r3, #12
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d11c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x18c>
 80031ae:	4b46      	ldr	r3, [pc, #280]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d116      	bne.n	80031e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ba:	4b43      	ldr	r3, [pc, #268]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_RCC_OscConfig+0x176>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d001      	beq.n	80031d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e1ba      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d2:	4b3d      	ldr	r3, [pc, #244]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4939      	ldr	r1, [pc, #228]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e6:	e03a      	b.n	800325e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d020      	beq.n	8003232 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f0:	4b36      	ldr	r3, [pc, #216]	; (80032cc <HAL_RCC_OscConfig+0x270>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f6:	f7fe fbb9 	bl	800196c <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031fe:	f7fe fbb5 	bl	800196c <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e19b      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003210:	4b2d      	ldr	r3, [pc, #180]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321c:	4b2a      	ldr	r3, [pc, #168]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4927      	ldr	r1, [pc, #156]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 800322c:	4313      	orrs	r3, r2
 800322e:	600b      	str	r3, [r1, #0]
 8003230:	e015      	b.n	800325e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003232:	4b26      	ldr	r3, [pc, #152]	; (80032cc <HAL_RCC_OscConfig+0x270>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003238:	f7fe fb98 	bl	800196c <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003240:	f7fe fb94 	bl	800196c <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e17a      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003252:	4b1d      	ldr	r3, [pc, #116]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d03a      	beq.n	80032e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d019      	beq.n	80032a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003272:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 8003274:	2201      	movs	r2, #1
 8003276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003278:	f7fe fb78 	bl	800196c <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003280:	f7fe fb74 	bl	800196c <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e15a      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003292:	4b0d      	ldr	r3, [pc, #52]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800329e:	2001      	movs	r0, #1
 80032a0:	f000 faf8 	bl	8003894 <RCC_Delay>
 80032a4:	e01c      	b.n	80032e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a6:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ac:	f7fe fb5e 	bl	800196c <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b2:	e00f      	b.n	80032d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b4:	f7fe fb5a 	bl	800196c <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d908      	bls.n	80032d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e140      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000
 80032cc:	42420000 	.word	0x42420000
 80032d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d4:	4b9e      	ldr	r3, [pc, #632]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e9      	bne.n	80032b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80a6 	beq.w	800343a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ee:	2300      	movs	r3, #0
 80032f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032f2:	4b97      	ldr	r3, [pc, #604]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10d      	bne.n	800331a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fe:	4b94      	ldr	r3, [pc, #592]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	4a93      	ldr	r2, [pc, #588]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003308:	61d3      	str	r3, [r2, #28]
 800330a:	4b91      	ldr	r3, [pc, #580]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003316:	2301      	movs	r3, #1
 8003318:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331a:	4b8e      	ldr	r3, [pc, #568]	; (8003554 <HAL_RCC_OscConfig+0x4f8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003322:	2b00      	cmp	r3, #0
 8003324:	d118      	bne.n	8003358 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003326:	4b8b      	ldr	r3, [pc, #556]	; (8003554 <HAL_RCC_OscConfig+0x4f8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a8a      	ldr	r2, [pc, #552]	; (8003554 <HAL_RCC_OscConfig+0x4f8>)
 800332c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003332:	f7fe fb1b 	bl	800196c <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333a:	f7fe fb17 	bl	800196c <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b64      	cmp	r3, #100	; 0x64
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e0fd      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334c:	4b81      	ldr	r3, [pc, #516]	; (8003554 <HAL_RCC_OscConfig+0x4f8>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d106      	bne.n	800336e <HAL_RCC_OscConfig+0x312>
 8003360:	4b7b      	ldr	r3, [pc, #492]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	4a7a      	ldr	r2, [pc, #488]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	6213      	str	r3, [r2, #32]
 800336c:	e02d      	b.n	80033ca <HAL_RCC_OscConfig+0x36e>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10c      	bne.n	8003390 <HAL_RCC_OscConfig+0x334>
 8003376:	4b76      	ldr	r3, [pc, #472]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	4a75      	ldr	r2, [pc, #468]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 800337c:	f023 0301 	bic.w	r3, r3, #1
 8003380:	6213      	str	r3, [r2, #32]
 8003382:	4b73      	ldr	r3, [pc, #460]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	4a72      	ldr	r2, [pc, #456]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003388:	f023 0304 	bic.w	r3, r3, #4
 800338c:	6213      	str	r3, [r2, #32]
 800338e:	e01c      	b.n	80033ca <HAL_RCC_OscConfig+0x36e>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	2b05      	cmp	r3, #5
 8003396:	d10c      	bne.n	80033b2 <HAL_RCC_OscConfig+0x356>
 8003398:	4b6d      	ldr	r3, [pc, #436]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	4a6c      	ldr	r2, [pc, #432]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 800339e:	f043 0304 	orr.w	r3, r3, #4
 80033a2:	6213      	str	r3, [r2, #32]
 80033a4:	4b6a      	ldr	r3, [pc, #424]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	4a69      	ldr	r2, [pc, #420]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	6213      	str	r3, [r2, #32]
 80033b0:	e00b      	b.n	80033ca <HAL_RCC_OscConfig+0x36e>
 80033b2:	4b67      	ldr	r3, [pc, #412]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	4a66      	ldr	r2, [pc, #408]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80033b8:	f023 0301 	bic.w	r3, r3, #1
 80033bc:	6213      	str	r3, [r2, #32]
 80033be:	4b64      	ldr	r3, [pc, #400]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	4a63      	ldr	r2, [pc, #396]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80033c4:	f023 0304 	bic.w	r3, r3, #4
 80033c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d015      	beq.n	80033fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d2:	f7fe facb 	bl	800196c <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d8:	e00a      	b.n	80033f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033da:	f7fe fac7 	bl	800196c <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e0ab      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f0:	4b57      	ldr	r3, [pc, #348]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ee      	beq.n	80033da <HAL_RCC_OscConfig+0x37e>
 80033fc:	e014      	b.n	8003428 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fe:	f7fe fab5 	bl	800196c <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003404:	e00a      	b.n	800341c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003406:	f7fe fab1 	bl	800196c <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	f241 3288 	movw	r2, #5000	; 0x1388
 8003414:	4293      	cmp	r3, r2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e095      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341c:	4b4c      	ldr	r3, [pc, #304]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1ee      	bne.n	8003406 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003428:	7dfb      	ldrb	r3, [r7, #23]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d105      	bne.n	800343a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342e:	4b48      	ldr	r3, [pc, #288]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	4a47      	ldr	r2, [pc, #284]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003438:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 8081 	beq.w	8003546 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003444:	4b42      	ldr	r3, [pc, #264]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b08      	cmp	r3, #8
 800344e:	d061      	beq.n	8003514 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d146      	bne.n	80034e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003458:	4b3f      	ldr	r3, [pc, #252]	; (8003558 <HAL_RCC_OscConfig+0x4fc>)
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345e:	f7fe fa85 	bl	800196c <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003466:	f7fe fa81 	bl	800196c <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e067      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003478:	4b35      	ldr	r3, [pc, #212]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f0      	bne.n	8003466 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348c:	d108      	bne.n	80034a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800348e:	4b30      	ldr	r3, [pc, #192]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	492d      	ldr	r1, [pc, #180]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 800349c:	4313      	orrs	r3, r2
 800349e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a0:	4b2b      	ldr	r3, [pc, #172]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a19      	ldr	r1, [r3, #32]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	430b      	orrs	r3, r1
 80034b2:	4927      	ldr	r1, [pc, #156]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b8:	4b27      	ldr	r3, [pc, #156]	; (8003558 <HAL_RCC_OscConfig+0x4fc>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034be:	f7fe fa55 	bl	800196c <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c6:	f7fe fa51 	bl	800196c <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e037      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034d8:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x46a>
 80034e4:	e02f      	b.n	8003546 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e6:	4b1c      	ldr	r3, [pc, #112]	; (8003558 <HAL_RCC_OscConfig+0x4fc>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7fe fa3e 	bl	800196c <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f4:	f7fe fa3a 	bl	800196c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e020      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003506:	4b12      	ldr	r3, [pc, #72]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x498>
 8003512:	e018      	b.n	8003546 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e013      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	429a      	cmp	r2, r3
 8003532:	d106      	bne.n	8003542 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d001      	beq.n	8003546 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e000      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40021000 	.word	0x40021000
 8003554:	40007000 	.word	0x40007000
 8003558:	42420060 	.word	0x42420060

0800355c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0d0      	b.n	8003712 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003570:	4b6a      	ldr	r3, [pc, #424]	; (800371c <HAL_RCC_ClockConfig+0x1c0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d910      	bls.n	80035a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357e:	4b67      	ldr	r3, [pc, #412]	; (800371c <HAL_RCC_ClockConfig+0x1c0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 0207 	bic.w	r2, r3, #7
 8003586:	4965      	ldr	r1, [pc, #404]	; (800371c <HAL_RCC_ClockConfig+0x1c0>)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	4313      	orrs	r3, r2
 800358c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800358e:	4b63      	ldr	r3, [pc, #396]	; (800371c <HAL_RCC_ClockConfig+0x1c0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d001      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0b8      	b.n	8003712 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d020      	beq.n	80035ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035b8:	4b59      	ldr	r3, [pc, #356]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	4a58      	ldr	r2, [pc, #352]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80035be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0308 	and.w	r3, r3, #8
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035d0:	4b53      	ldr	r3, [pc, #332]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4a52      	ldr	r2, [pc, #328]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80035d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035dc:	4b50      	ldr	r3, [pc, #320]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	494d      	ldr	r1, [pc, #308]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d040      	beq.n	800367c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d107      	bne.n	8003612 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003602:	4b47      	ldr	r3, [pc, #284]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d115      	bne.n	800363a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e07f      	b.n	8003712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d107      	bne.n	800362a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361a:	4b41      	ldr	r3, [pc, #260]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d109      	bne.n	800363a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e073      	b.n	8003712 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362a:	4b3d      	ldr	r3, [pc, #244]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e06b      	b.n	8003712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800363a:	4b39      	ldr	r3, [pc, #228]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f023 0203 	bic.w	r2, r3, #3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4936      	ldr	r1, [pc, #216]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 8003648:	4313      	orrs	r3, r2
 800364a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800364c:	f7fe f98e 	bl	800196c <HAL_GetTick>
 8003650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003652:	e00a      	b.n	800366a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003654:	f7fe f98a 	bl	800196c <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e053      	b.n	8003712 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366a:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 020c 	and.w	r2, r3, #12
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	429a      	cmp	r2, r3
 800367a:	d1eb      	bne.n	8003654 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800367c:	4b27      	ldr	r3, [pc, #156]	; (800371c <HAL_RCC_ClockConfig+0x1c0>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d210      	bcs.n	80036ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	4b24      	ldr	r3, [pc, #144]	; (800371c <HAL_RCC_ClockConfig+0x1c0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f023 0207 	bic.w	r2, r3, #7
 8003692:	4922      	ldr	r1, [pc, #136]	; (800371c <HAL_RCC_ClockConfig+0x1c0>)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800369a:	4b20      	ldr	r3, [pc, #128]	; (800371c <HAL_RCC_ClockConfig+0x1c0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e032      	b.n	8003712 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036b8:	4b19      	ldr	r3, [pc, #100]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4916      	ldr	r1, [pc, #88]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d009      	beq.n	80036ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036d6:	4b12      	ldr	r3, [pc, #72]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	490e      	ldr	r1, [pc, #56]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036ea:	f000 f82d 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 80036ee:	4602      	mov	r2, r0
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	091b      	lsrs	r3, r3, #4
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	490a      	ldr	r1, [pc, #40]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80036fc:	5ccb      	ldrb	r3, [r1, r3]
 80036fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003702:	4a09      	ldr	r2, [pc, #36]	; (8003728 <HAL_RCC_ClockConfig+0x1cc>)
 8003704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003706:	4b09      	ldr	r3, [pc, #36]	; (800372c <HAL_RCC_ClockConfig+0x1d0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f7fe f8ec 	bl	80018e8 <HAL_InitTick>

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40022000 	.word	0x40022000
 8003720:	40021000 	.word	0x40021000
 8003724:	08004558 	.word	0x08004558
 8003728:	20000000 	.word	0x20000000
 800372c:	20000004 	.word	0x20000004

08003730 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003734:	4b03      	ldr	r3, [pc, #12]	; (8003744 <HAL_RCC_EnableCSS+0x14>)
 8003736:	2201      	movs	r2, #1
 8003738:	601a      	str	r2, [r3, #0]
}
 800373a:	bf00      	nop
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	4242004c 	.word	0x4242004c

08003748 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003748:	b490      	push	{r4, r7}
 800374a:	b08a      	sub	sp, #40	; 0x28
 800374c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800374e:	4b2a      	ldr	r3, [pc, #168]	; (80037f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003750:	1d3c      	adds	r4, r7, #4
 8003752:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003754:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003758:	f240 2301 	movw	r3, #513	; 0x201
 800375c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	2300      	movs	r3, #0
 8003764:	61bb      	str	r3, [r7, #24]
 8003766:	2300      	movs	r3, #0
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003772:	4b22      	ldr	r3, [pc, #136]	; (80037fc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	2b04      	cmp	r3, #4
 8003780:	d002      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0x40>
 8003782:	2b08      	cmp	r3, #8
 8003784:	d003      	beq.n	800378e <HAL_RCC_GetSysClockFreq+0x46>
 8003786:	e02d      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003788:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <HAL_RCC_GetSysClockFreq+0xb8>)
 800378a:	623b      	str	r3, [r7, #32]
      break;
 800378c:	e02d      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	0c9b      	lsrs	r3, r3, #18
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800379a:	4413      	add	r3, r2
 800379c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037a0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d013      	beq.n	80037d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037ac:	4b13      	ldr	r3, [pc, #76]	; (80037fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	0c5b      	lsrs	r3, r3, #17
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037ba:	4413      	add	r3, r2
 80037bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	4a0e      	ldr	r2, [pc, #56]	; (8003800 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037c6:	fb02 f203 	mul.w	r2, r2, r3
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
 80037d2:	e004      	b.n	80037de <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	4a0b      	ldr	r2, [pc, #44]	; (8003804 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037d8:	fb02 f303 	mul.w	r3, r2, r3
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	623b      	str	r3, [r7, #32]
      break;
 80037e2:	e002      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037e6:	623b      	str	r3, [r7, #32]
      break;
 80037e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ea:	6a3b      	ldr	r3, [r7, #32]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3728      	adds	r7, #40	; 0x28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc90      	pop	{r4, r7}
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	08004548 	.word	0x08004548
 80037fc:	40021000 	.word	0x40021000
 8003800:	007a1200 	.word	0x007a1200
 8003804:	003d0900 	.word	0x003d0900

08003808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800380c:	4b02      	ldr	r3, [pc, #8]	; (8003818 <HAL_RCC_GetHCLKFreq+0x10>)
 800380e:	681b      	ldr	r3, [r3, #0]
}
 8003810:	4618      	mov	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr
 8003818:	20000000 	.word	0x20000000

0800381c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003820:	f7ff fff2 	bl	8003808 <HAL_RCC_GetHCLKFreq>
 8003824:	4602      	mov	r2, r0
 8003826:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	0a1b      	lsrs	r3, r3, #8
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	4903      	ldr	r1, [pc, #12]	; (8003840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003832:	5ccb      	ldrb	r3, [r1, r3]
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003838:	4618      	mov	r0, r3
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40021000 	.word	0x40021000
 8003840:	08004568 	.word	0x08004568

08003844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003848:	f7ff ffde 	bl	8003808 <HAL_RCC_GetHCLKFreq>
 800384c:	4602      	mov	r2, r0
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	0adb      	lsrs	r3, r3, #11
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	4903      	ldr	r1, [pc, #12]	; (8003868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800385a:	5ccb      	ldrb	r3, [r1, r3]
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40021000 	.word	0x40021000
 8003868:	08004568 	.word	0x08004568

0800386c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <HAL_RCC_NMI_IRQHandler+0x20>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003878:	2b80      	cmp	r3, #128	; 0x80
 800387a:	d104      	bne.n	8003886 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800387c:	f000 f828 	bl	80038d0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003880:	4b03      	ldr	r3, [pc, #12]	; (8003890 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003882:	2280      	movs	r2, #128	; 0x80
 8003884:	701a      	strb	r2, [r3, #0]
  }
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40021000 	.word	0x40021000
 8003890:	4002100a 	.word	0x4002100a

08003894 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <RCC_Delay+0x34>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a0a      	ldr	r2, [pc, #40]	; (80038cc <RCC_Delay+0x38>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	0a5b      	lsrs	r3, r3, #9
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	fb02 f303 	mul.w	r3, r2, r3
 80038ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038b0:	bf00      	nop
  }
  while (Delay --);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1e5a      	subs	r2, r3, #1
 80038b6:	60fa      	str	r2, [r7, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1f9      	bne.n	80038b0 <RCC_Delay+0x1c>
}
 80038bc:	bf00      	nop
 80038be:	bf00      	nop
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr
 80038c8:	20000000 	.word	0x20000000
 80038cc:	10624dd3 	.word	0x10624dd3

080038d0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80038d4:	bf00      	nop
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e03f      	b.n	800396e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fd ff02 	bl	800170c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2224      	movs	r2, #36	; 0x24
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800391e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f905 	bl	8003b30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003934:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003944:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003954:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b08a      	sub	sp, #40	; 0x28
 800397a:	af02      	add	r7, sp, #8
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	603b      	str	r3, [r7, #0]
 8003982:	4613      	mov	r3, r2
 8003984:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b20      	cmp	r3, #32
 8003994:	d17c      	bne.n	8003a90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_UART_Transmit+0x2c>
 800399c:	88fb      	ldrh	r3, [r7, #6]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e075      	b.n	8003a92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_UART_Transmit+0x3e>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e06e      	b.n	8003a92 <HAL_UART_Transmit+0x11c>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2221      	movs	r2, #33	; 0x21
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039ca:	f7fd ffcf 	bl	800196c <HAL_GetTick>
 80039ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	88fa      	ldrh	r2, [r7, #6]
 80039d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	88fa      	ldrh	r2, [r7, #6]
 80039da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e4:	d108      	bne.n	80039f8 <HAL_UART_Transmit+0x82>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d104      	bne.n	80039f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	e003      	b.n	8003a00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a08:	e02a      	b.n	8003a60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2200      	movs	r2, #0
 8003a12:	2180      	movs	r1, #128	; 0x80
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f840 	bl	8003a9a <UART_WaitOnFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e036      	b.n	8003a92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10b      	bne.n	8003a42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	61bb      	str	r3, [r7, #24]
 8003a40:	e007      	b.n	8003a52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	781a      	ldrb	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1cf      	bne.n	8003a0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2200      	movs	r2, #0
 8003a72:	2140      	movs	r1, #64	; 0x40
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f810 	bl	8003a9a <UART_WaitOnFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e006      	b.n	8003a92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e000      	b.n	8003a92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a90:	2302      	movs	r3, #2
  }
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3720      	adds	r7, #32
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	603b      	str	r3, [r7, #0]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aaa:	e02c      	b.n	8003b06 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ab2:	d028      	beq.n	8003b06 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d007      	beq.n	8003aca <UART_WaitOnFlagUntilTimeout+0x30>
 8003aba:	f7fd ff57 	bl	800196c <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d21d      	bcs.n	8003b06 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ad8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695a      	ldr	r2, [r3, #20]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0201 	bic.w	r2, r2, #1
 8003ae8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e00f      	b.n	8003b26 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	bf0c      	ite	eq
 8003b16:	2301      	moveq	r3, #1
 8003b18:	2300      	movne	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d0c3      	beq.n	8003aac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b6a:	f023 030c 	bic.w	r3, r3, #12
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	430b      	orrs	r3, r1
 8003b76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a2c      	ldr	r2, [pc, #176]	; (8003c44 <UART_SetConfig+0x114>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d103      	bne.n	8003ba0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b98:	f7ff fe54 	bl	8003844 <HAL_RCC_GetPCLK2Freq>
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	e002      	b.n	8003ba6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ba0:	f7ff fe3c 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 8003ba4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	009a      	lsls	r2, r3, #2
 8003bb0:	441a      	add	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbc:	4a22      	ldr	r2, [pc, #136]	; (8003c48 <UART_SetConfig+0x118>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	0119      	lsls	r1, r3, #4
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	009a      	lsls	r2, r3, #2
 8003bd0:	441a      	add	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bdc:	4b1a      	ldr	r3, [pc, #104]	; (8003c48 <UART_SetConfig+0x118>)
 8003bde:	fba3 0302 	umull	r0, r3, r3, r2
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	2064      	movs	r0, #100	; 0x64
 8003be6:	fb00 f303 	mul.w	r3, r0, r3
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	3332      	adds	r3, #50	; 0x32
 8003bf0:	4a15      	ldr	r2, [pc, #84]	; (8003c48 <UART_SetConfig+0x118>)
 8003bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bfc:	4419      	add	r1, r3
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	009a      	lsls	r2, r3, #2
 8003c08:	441a      	add	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <UART_SetConfig+0x118>)
 8003c16:	fba3 0302 	umull	r0, r3, r3, r2
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	2064      	movs	r0, #100	; 0x64
 8003c1e:	fb00 f303 	mul.w	r3, r0, r3
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	3332      	adds	r3, #50	; 0x32
 8003c28:	4a07      	ldr	r2, [pc, #28]	; (8003c48 <UART_SetConfig+0x118>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	f003 020f 	and.w	r2, r3, #15
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	440a      	add	r2, r1
 8003c3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40013800 	.word	0x40013800
 8003c48:	51eb851f 	.word	0x51eb851f

08003c4c <__errno>:
 8003c4c:	4b01      	ldr	r3, [pc, #4]	; (8003c54 <__errno+0x8>)
 8003c4e:	6818      	ldr	r0, [r3, #0]
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	2000000c 	.word	0x2000000c

08003c58 <__libc_init_array>:
 8003c58:	b570      	push	{r4, r5, r6, lr}
 8003c5a:	2600      	movs	r6, #0
 8003c5c:	4d0c      	ldr	r5, [pc, #48]	; (8003c90 <__libc_init_array+0x38>)
 8003c5e:	4c0d      	ldr	r4, [pc, #52]	; (8003c94 <__libc_init_array+0x3c>)
 8003c60:	1b64      	subs	r4, r4, r5
 8003c62:	10a4      	asrs	r4, r4, #2
 8003c64:	42a6      	cmp	r6, r4
 8003c66:	d109      	bne.n	8003c7c <__libc_init_array+0x24>
 8003c68:	f000 fc5c 	bl	8004524 <_init>
 8003c6c:	2600      	movs	r6, #0
 8003c6e:	4d0a      	ldr	r5, [pc, #40]	; (8003c98 <__libc_init_array+0x40>)
 8003c70:	4c0a      	ldr	r4, [pc, #40]	; (8003c9c <__libc_init_array+0x44>)
 8003c72:	1b64      	subs	r4, r4, r5
 8003c74:	10a4      	asrs	r4, r4, #2
 8003c76:	42a6      	cmp	r6, r4
 8003c78:	d105      	bne.n	8003c86 <__libc_init_array+0x2e>
 8003c7a:	bd70      	pop	{r4, r5, r6, pc}
 8003c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c80:	4798      	blx	r3
 8003c82:	3601      	adds	r6, #1
 8003c84:	e7ee      	b.n	8003c64 <__libc_init_array+0xc>
 8003c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c8a:	4798      	blx	r3
 8003c8c:	3601      	adds	r6, #1
 8003c8e:	e7f2      	b.n	8003c76 <__libc_init_array+0x1e>
 8003c90:	080045a4 	.word	0x080045a4
 8003c94:	080045a4 	.word	0x080045a4
 8003c98:	080045a4 	.word	0x080045a4
 8003c9c:	080045a8 	.word	0x080045a8

08003ca0 <memset>:
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	4402      	add	r2, r0
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d100      	bne.n	8003caa <memset+0xa>
 8003ca8:	4770      	bx	lr
 8003caa:	f803 1b01 	strb.w	r1, [r3], #1
 8003cae:	e7f9      	b.n	8003ca4 <memset+0x4>

08003cb0 <siprintf>:
 8003cb0:	b40e      	push	{r1, r2, r3}
 8003cb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cb6:	b500      	push	{lr}
 8003cb8:	b09c      	sub	sp, #112	; 0x70
 8003cba:	ab1d      	add	r3, sp, #116	; 0x74
 8003cbc:	9002      	str	r0, [sp, #8]
 8003cbe:	9006      	str	r0, [sp, #24]
 8003cc0:	9107      	str	r1, [sp, #28]
 8003cc2:	9104      	str	r1, [sp, #16]
 8003cc4:	4808      	ldr	r0, [pc, #32]	; (8003ce8 <siprintf+0x38>)
 8003cc6:	4909      	ldr	r1, [pc, #36]	; (8003cec <siprintf+0x3c>)
 8003cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ccc:	9105      	str	r1, [sp, #20]
 8003cce:	6800      	ldr	r0, [r0, #0]
 8003cd0:	a902      	add	r1, sp, #8
 8003cd2:	9301      	str	r3, [sp, #4]
 8003cd4:	f000 f868 	bl	8003da8 <_svfiprintf_r>
 8003cd8:	2200      	movs	r2, #0
 8003cda:	9b02      	ldr	r3, [sp, #8]
 8003cdc:	701a      	strb	r2, [r3, #0]
 8003cde:	b01c      	add	sp, #112	; 0x70
 8003ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ce4:	b003      	add	sp, #12
 8003ce6:	4770      	bx	lr
 8003ce8:	2000000c 	.word	0x2000000c
 8003cec:	ffff0208 	.word	0xffff0208

08003cf0 <__ssputs_r>:
 8003cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf4:	688e      	ldr	r6, [r1, #8]
 8003cf6:	4682      	mov	sl, r0
 8003cf8:	429e      	cmp	r6, r3
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	4690      	mov	r8, r2
 8003cfe:	461f      	mov	r7, r3
 8003d00:	d838      	bhi.n	8003d74 <__ssputs_r+0x84>
 8003d02:	898a      	ldrh	r2, [r1, #12]
 8003d04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d08:	d032      	beq.n	8003d70 <__ssputs_r+0x80>
 8003d0a:	6825      	ldr	r5, [r4, #0]
 8003d0c:	6909      	ldr	r1, [r1, #16]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	eba5 0901 	sub.w	r9, r5, r1
 8003d14:	6965      	ldr	r5, [r4, #20]
 8003d16:	444b      	add	r3, r9
 8003d18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d20:	106d      	asrs	r5, r5, #1
 8003d22:	429d      	cmp	r5, r3
 8003d24:	bf38      	it	cc
 8003d26:	461d      	movcc	r5, r3
 8003d28:	0553      	lsls	r3, r2, #21
 8003d2a:	d531      	bpl.n	8003d90 <__ssputs_r+0xa0>
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	f000 fb53 	bl	80043d8 <_malloc_r>
 8003d32:	4606      	mov	r6, r0
 8003d34:	b950      	cbnz	r0, 8003d4c <__ssputs_r+0x5c>
 8003d36:	230c      	movs	r3, #12
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d3c:	f8ca 3000 	str.w	r3, [sl]
 8003d40:	89a3      	ldrh	r3, [r4, #12]
 8003d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d46:	81a3      	strh	r3, [r4, #12]
 8003d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d4c:	464a      	mov	r2, r9
 8003d4e:	6921      	ldr	r1, [r4, #16]
 8003d50:	f000 face 	bl	80042f0 <memcpy>
 8003d54:	89a3      	ldrh	r3, [r4, #12]
 8003d56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d5e:	81a3      	strh	r3, [r4, #12]
 8003d60:	6126      	str	r6, [r4, #16]
 8003d62:	444e      	add	r6, r9
 8003d64:	6026      	str	r6, [r4, #0]
 8003d66:	463e      	mov	r6, r7
 8003d68:	6165      	str	r5, [r4, #20]
 8003d6a:	eba5 0509 	sub.w	r5, r5, r9
 8003d6e:	60a5      	str	r5, [r4, #8]
 8003d70:	42be      	cmp	r6, r7
 8003d72:	d900      	bls.n	8003d76 <__ssputs_r+0x86>
 8003d74:	463e      	mov	r6, r7
 8003d76:	4632      	mov	r2, r6
 8003d78:	4641      	mov	r1, r8
 8003d7a:	6820      	ldr	r0, [r4, #0]
 8003d7c:	f000 fac6 	bl	800430c <memmove>
 8003d80:	68a3      	ldr	r3, [r4, #8]
 8003d82:	6822      	ldr	r2, [r4, #0]
 8003d84:	1b9b      	subs	r3, r3, r6
 8003d86:	4432      	add	r2, r6
 8003d88:	2000      	movs	r0, #0
 8003d8a:	60a3      	str	r3, [r4, #8]
 8003d8c:	6022      	str	r2, [r4, #0]
 8003d8e:	e7db      	b.n	8003d48 <__ssputs_r+0x58>
 8003d90:	462a      	mov	r2, r5
 8003d92:	f000 fb7b 	bl	800448c <_realloc_r>
 8003d96:	4606      	mov	r6, r0
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	d1e1      	bne.n	8003d60 <__ssputs_r+0x70>
 8003d9c:	4650      	mov	r0, sl
 8003d9e:	6921      	ldr	r1, [r4, #16]
 8003da0:	f000 face 	bl	8004340 <_free_r>
 8003da4:	e7c7      	b.n	8003d36 <__ssputs_r+0x46>
	...

08003da8 <_svfiprintf_r>:
 8003da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dac:	4698      	mov	r8, r3
 8003dae:	898b      	ldrh	r3, [r1, #12]
 8003db0:	4607      	mov	r7, r0
 8003db2:	061b      	lsls	r3, r3, #24
 8003db4:	460d      	mov	r5, r1
 8003db6:	4614      	mov	r4, r2
 8003db8:	b09d      	sub	sp, #116	; 0x74
 8003dba:	d50e      	bpl.n	8003dda <_svfiprintf_r+0x32>
 8003dbc:	690b      	ldr	r3, [r1, #16]
 8003dbe:	b963      	cbnz	r3, 8003dda <_svfiprintf_r+0x32>
 8003dc0:	2140      	movs	r1, #64	; 0x40
 8003dc2:	f000 fb09 	bl	80043d8 <_malloc_r>
 8003dc6:	6028      	str	r0, [r5, #0]
 8003dc8:	6128      	str	r0, [r5, #16]
 8003dca:	b920      	cbnz	r0, 8003dd6 <_svfiprintf_r+0x2e>
 8003dcc:	230c      	movs	r3, #12
 8003dce:	603b      	str	r3, [r7, #0]
 8003dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dd4:	e0d1      	b.n	8003f7a <_svfiprintf_r+0x1d2>
 8003dd6:	2340      	movs	r3, #64	; 0x40
 8003dd8:	616b      	str	r3, [r5, #20]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8003dde:	2320      	movs	r3, #32
 8003de0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003de4:	2330      	movs	r3, #48	; 0x30
 8003de6:	f04f 0901 	mov.w	r9, #1
 8003dea:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003f94 <_svfiprintf_r+0x1ec>
 8003df2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003df6:	4623      	mov	r3, r4
 8003df8:	469a      	mov	sl, r3
 8003dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dfe:	b10a      	cbz	r2, 8003e04 <_svfiprintf_r+0x5c>
 8003e00:	2a25      	cmp	r2, #37	; 0x25
 8003e02:	d1f9      	bne.n	8003df8 <_svfiprintf_r+0x50>
 8003e04:	ebba 0b04 	subs.w	fp, sl, r4
 8003e08:	d00b      	beq.n	8003e22 <_svfiprintf_r+0x7a>
 8003e0a:	465b      	mov	r3, fp
 8003e0c:	4622      	mov	r2, r4
 8003e0e:	4629      	mov	r1, r5
 8003e10:	4638      	mov	r0, r7
 8003e12:	f7ff ff6d 	bl	8003cf0 <__ssputs_r>
 8003e16:	3001      	adds	r0, #1
 8003e18:	f000 80aa 	beq.w	8003f70 <_svfiprintf_r+0x1c8>
 8003e1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e1e:	445a      	add	r2, fp
 8003e20:	9209      	str	r2, [sp, #36]	; 0x24
 8003e22:	f89a 3000 	ldrb.w	r3, [sl]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80a2 	beq.w	8003f70 <_svfiprintf_r+0x1c8>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e36:	f10a 0a01 	add.w	sl, sl, #1
 8003e3a:	9304      	str	r3, [sp, #16]
 8003e3c:	9307      	str	r3, [sp, #28]
 8003e3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e42:	931a      	str	r3, [sp, #104]	; 0x68
 8003e44:	4654      	mov	r4, sl
 8003e46:	2205      	movs	r2, #5
 8003e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e4c:	4851      	ldr	r0, [pc, #324]	; (8003f94 <_svfiprintf_r+0x1ec>)
 8003e4e:	f000 fa41 	bl	80042d4 <memchr>
 8003e52:	9a04      	ldr	r2, [sp, #16]
 8003e54:	b9d8      	cbnz	r0, 8003e8e <_svfiprintf_r+0xe6>
 8003e56:	06d0      	lsls	r0, r2, #27
 8003e58:	bf44      	itt	mi
 8003e5a:	2320      	movmi	r3, #32
 8003e5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e60:	0711      	lsls	r1, r2, #28
 8003e62:	bf44      	itt	mi
 8003e64:	232b      	movmi	r3, #43	; 0x2b
 8003e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e70:	d015      	beq.n	8003e9e <_svfiprintf_r+0xf6>
 8003e72:	4654      	mov	r4, sl
 8003e74:	2000      	movs	r0, #0
 8003e76:	f04f 0c0a 	mov.w	ip, #10
 8003e7a:	9a07      	ldr	r2, [sp, #28]
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e82:	3b30      	subs	r3, #48	; 0x30
 8003e84:	2b09      	cmp	r3, #9
 8003e86:	d94e      	bls.n	8003f26 <_svfiprintf_r+0x17e>
 8003e88:	b1b0      	cbz	r0, 8003eb8 <_svfiprintf_r+0x110>
 8003e8a:	9207      	str	r2, [sp, #28]
 8003e8c:	e014      	b.n	8003eb8 <_svfiprintf_r+0x110>
 8003e8e:	eba0 0308 	sub.w	r3, r0, r8
 8003e92:	fa09 f303 	lsl.w	r3, r9, r3
 8003e96:	4313      	orrs	r3, r2
 8003e98:	46a2      	mov	sl, r4
 8003e9a:	9304      	str	r3, [sp, #16]
 8003e9c:	e7d2      	b.n	8003e44 <_svfiprintf_r+0x9c>
 8003e9e:	9b03      	ldr	r3, [sp, #12]
 8003ea0:	1d19      	adds	r1, r3, #4
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	9103      	str	r1, [sp, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	bfbb      	ittet	lt
 8003eaa:	425b      	neglt	r3, r3
 8003eac:	f042 0202 	orrlt.w	r2, r2, #2
 8003eb0:	9307      	strge	r3, [sp, #28]
 8003eb2:	9307      	strlt	r3, [sp, #28]
 8003eb4:	bfb8      	it	lt
 8003eb6:	9204      	strlt	r2, [sp, #16]
 8003eb8:	7823      	ldrb	r3, [r4, #0]
 8003eba:	2b2e      	cmp	r3, #46	; 0x2e
 8003ebc:	d10c      	bne.n	8003ed8 <_svfiprintf_r+0x130>
 8003ebe:	7863      	ldrb	r3, [r4, #1]
 8003ec0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ec2:	d135      	bne.n	8003f30 <_svfiprintf_r+0x188>
 8003ec4:	9b03      	ldr	r3, [sp, #12]
 8003ec6:	3402      	adds	r4, #2
 8003ec8:	1d1a      	adds	r2, r3, #4
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	9203      	str	r2, [sp, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	bfb8      	it	lt
 8003ed2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003ed6:	9305      	str	r3, [sp, #20]
 8003ed8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003fa4 <_svfiprintf_r+0x1fc>
 8003edc:	2203      	movs	r2, #3
 8003ede:	4650      	mov	r0, sl
 8003ee0:	7821      	ldrb	r1, [r4, #0]
 8003ee2:	f000 f9f7 	bl	80042d4 <memchr>
 8003ee6:	b140      	cbz	r0, 8003efa <_svfiprintf_r+0x152>
 8003ee8:	2340      	movs	r3, #64	; 0x40
 8003eea:	eba0 000a 	sub.w	r0, r0, sl
 8003eee:	fa03 f000 	lsl.w	r0, r3, r0
 8003ef2:	9b04      	ldr	r3, [sp, #16]
 8003ef4:	3401      	adds	r4, #1
 8003ef6:	4303      	orrs	r3, r0
 8003ef8:	9304      	str	r3, [sp, #16]
 8003efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003efe:	2206      	movs	r2, #6
 8003f00:	4825      	ldr	r0, [pc, #148]	; (8003f98 <_svfiprintf_r+0x1f0>)
 8003f02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f06:	f000 f9e5 	bl	80042d4 <memchr>
 8003f0a:	2800      	cmp	r0, #0
 8003f0c:	d038      	beq.n	8003f80 <_svfiprintf_r+0x1d8>
 8003f0e:	4b23      	ldr	r3, [pc, #140]	; (8003f9c <_svfiprintf_r+0x1f4>)
 8003f10:	bb1b      	cbnz	r3, 8003f5a <_svfiprintf_r+0x1b2>
 8003f12:	9b03      	ldr	r3, [sp, #12]
 8003f14:	3307      	adds	r3, #7
 8003f16:	f023 0307 	bic.w	r3, r3, #7
 8003f1a:	3308      	adds	r3, #8
 8003f1c:	9303      	str	r3, [sp, #12]
 8003f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f20:	4433      	add	r3, r6
 8003f22:	9309      	str	r3, [sp, #36]	; 0x24
 8003f24:	e767      	b.n	8003df6 <_svfiprintf_r+0x4e>
 8003f26:	460c      	mov	r4, r1
 8003f28:	2001      	movs	r0, #1
 8003f2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f2e:	e7a5      	b.n	8003e7c <_svfiprintf_r+0xd4>
 8003f30:	2300      	movs	r3, #0
 8003f32:	f04f 0c0a 	mov.w	ip, #10
 8003f36:	4619      	mov	r1, r3
 8003f38:	3401      	adds	r4, #1
 8003f3a:	9305      	str	r3, [sp, #20]
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f42:	3a30      	subs	r2, #48	; 0x30
 8003f44:	2a09      	cmp	r2, #9
 8003f46:	d903      	bls.n	8003f50 <_svfiprintf_r+0x1a8>
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0c5      	beq.n	8003ed8 <_svfiprintf_r+0x130>
 8003f4c:	9105      	str	r1, [sp, #20]
 8003f4e:	e7c3      	b.n	8003ed8 <_svfiprintf_r+0x130>
 8003f50:	4604      	mov	r4, r0
 8003f52:	2301      	movs	r3, #1
 8003f54:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f58:	e7f0      	b.n	8003f3c <_svfiprintf_r+0x194>
 8003f5a:	ab03      	add	r3, sp, #12
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	462a      	mov	r2, r5
 8003f60:	4638      	mov	r0, r7
 8003f62:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <_svfiprintf_r+0x1f8>)
 8003f64:	a904      	add	r1, sp, #16
 8003f66:	f3af 8000 	nop.w
 8003f6a:	1c42      	adds	r2, r0, #1
 8003f6c:	4606      	mov	r6, r0
 8003f6e:	d1d6      	bne.n	8003f1e <_svfiprintf_r+0x176>
 8003f70:	89ab      	ldrh	r3, [r5, #12]
 8003f72:	065b      	lsls	r3, r3, #25
 8003f74:	f53f af2c 	bmi.w	8003dd0 <_svfiprintf_r+0x28>
 8003f78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f7a:	b01d      	add	sp, #116	; 0x74
 8003f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f80:	ab03      	add	r3, sp, #12
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	462a      	mov	r2, r5
 8003f86:	4638      	mov	r0, r7
 8003f88:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <_svfiprintf_r+0x1f8>)
 8003f8a:	a904      	add	r1, sp, #16
 8003f8c:	f000 f87c 	bl	8004088 <_printf_i>
 8003f90:	e7eb      	b.n	8003f6a <_svfiprintf_r+0x1c2>
 8003f92:	bf00      	nop
 8003f94:	08004570 	.word	0x08004570
 8003f98:	0800457a 	.word	0x0800457a
 8003f9c:	00000000 	.word	0x00000000
 8003fa0:	08003cf1 	.word	0x08003cf1
 8003fa4:	08004576 	.word	0x08004576

08003fa8 <_printf_common>:
 8003fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fac:	4616      	mov	r6, r2
 8003fae:	4699      	mov	r9, r3
 8003fb0:	688a      	ldr	r2, [r1, #8]
 8003fb2:	690b      	ldr	r3, [r1, #16]
 8003fb4:	4607      	mov	r7, r0
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	bfb8      	it	lt
 8003fba:	4613      	movlt	r3, r2
 8003fbc:	6033      	str	r3, [r6, #0]
 8003fbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fc2:	460c      	mov	r4, r1
 8003fc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fc8:	b10a      	cbz	r2, 8003fce <_printf_common+0x26>
 8003fca:	3301      	adds	r3, #1
 8003fcc:	6033      	str	r3, [r6, #0]
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	0699      	lsls	r1, r3, #26
 8003fd2:	bf42      	ittt	mi
 8003fd4:	6833      	ldrmi	r3, [r6, #0]
 8003fd6:	3302      	addmi	r3, #2
 8003fd8:	6033      	strmi	r3, [r6, #0]
 8003fda:	6825      	ldr	r5, [r4, #0]
 8003fdc:	f015 0506 	ands.w	r5, r5, #6
 8003fe0:	d106      	bne.n	8003ff0 <_printf_common+0x48>
 8003fe2:	f104 0a19 	add.w	sl, r4, #25
 8003fe6:	68e3      	ldr	r3, [r4, #12]
 8003fe8:	6832      	ldr	r2, [r6, #0]
 8003fea:	1a9b      	subs	r3, r3, r2
 8003fec:	42ab      	cmp	r3, r5
 8003fee:	dc28      	bgt.n	8004042 <_printf_common+0x9a>
 8003ff0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ff4:	1e13      	subs	r3, r2, #0
 8003ff6:	6822      	ldr	r2, [r4, #0]
 8003ff8:	bf18      	it	ne
 8003ffa:	2301      	movne	r3, #1
 8003ffc:	0692      	lsls	r2, r2, #26
 8003ffe:	d42d      	bmi.n	800405c <_printf_common+0xb4>
 8004000:	4649      	mov	r1, r9
 8004002:	4638      	mov	r0, r7
 8004004:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004008:	47c0      	blx	r8
 800400a:	3001      	adds	r0, #1
 800400c:	d020      	beq.n	8004050 <_printf_common+0xa8>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	68e5      	ldr	r5, [r4, #12]
 8004012:	f003 0306 	and.w	r3, r3, #6
 8004016:	2b04      	cmp	r3, #4
 8004018:	bf18      	it	ne
 800401a:	2500      	movne	r5, #0
 800401c:	6832      	ldr	r2, [r6, #0]
 800401e:	f04f 0600 	mov.w	r6, #0
 8004022:	68a3      	ldr	r3, [r4, #8]
 8004024:	bf08      	it	eq
 8004026:	1aad      	subeq	r5, r5, r2
 8004028:	6922      	ldr	r2, [r4, #16]
 800402a:	bf08      	it	eq
 800402c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004030:	4293      	cmp	r3, r2
 8004032:	bfc4      	itt	gt
 8004034:	1a9b      	subgt	r3, r3, r2
 8004036:	18ed      	addgt	r5, r5, r3
 8004038:	341a      	adds	r4, #26
 800403a:	42b5      	cmp	r5, r6
 800403c:	d11a      	bne.n	8004074 <_printf_common+0xcc>
 800403e:	2000      	movs	r0, #0
 8004040:	e008      	b.n	8004054 <_printf_common+0xac>
 8004042:	2301      	movs	r3, #1
 8004044:	4652      	mov	r2, sl
 8004046:	4649      	mov	r1, r9
 8004048:	4638      	mov	r0, r7
 800404a:	47c0      	blx	r8
 800404c:	3001      	adds	r0, #1
 800404e:	d103      	bne.n	8004058 <_printf_common+0xb0>
 8004050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004058:	3501      	adds	r5, #1
 800405a:	e7c4      	b.n	8003fe6 <_printf_common+0x3e>
 800405c:	2030      	movs	r0, #48	; 0x30
 800405e:	18e1      	adds	r1, r4, r3
 8004060:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800406a:	4422      	add	r2, r4
 800406c:	3302      	adds	r3, #2
 800406e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004072:	e7c5      	b.n	8004000 <_printf_common+0x58>
 8004074:	2301      	movs	r3, #1
 8004076:	4622      	mov	r2, r4
 8004078:	4649      	mov	r1, r9
 800407a:	4638      	mov	r0, r7
 800407c:	47c0      	blx	r8
 800407e:	3001      	adds	r0, #1
 8004080:	d0e6      	beq.n	8004050 <_printf_common+0xa8>
 8004082:	3601      	adds	r6, #1
 8004084:	e7d9      	b.n	800403a <_printf_common+0x92>
	...

08004088 <_printf_i>:
 8004088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800408c:	460c      	mov	r4, r1
 800408e:	7e27      	ldrb	r7, [r4, #24]
 8004090:	4691      	mov	r9, r2
 8004092:	2f78      	cmp	r7, #120	; 0x78
 8004094:	4680      	mov	r8, r0
 8004096:	469a      	mov	sl, r3
 8004098:	990c      	ldr	r1, [sp, #48]	; 0x30
 800409a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800409e:	d807      	bhi.n	80040b0 <_printf_i+0x28>
 80040a0:	2f62      	cmp	r7, #98	; 0x62
 80040a2:	d80a      	bhi.n	80040ba <_printf_i+0x32>
 80040a4:	2f00      	cmp	r7, #0
 80040a6:	f000 80d9 	beq.w	800425c <_printf_i+0x1d4>
 80040aa:	2f58      	cmp	r7, #88	; 0x58
 80040ac:	f000 80a4 	beq.w	80041f8 <_printf_i+0x170>
 80040b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040b8:	e03a      	b.n	8004130 <_printf_i+0xa8>
 80040ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040be:	2b15      	cmp	r3, #21
 80040c0:	d8f6      	bhi.n	80040b0 <_printf_i+0x28>
 80040c2:	a001      	add	r0, pc, #4	; (adr r0, 80040c8 <_printf_i+0x40>)
 80040c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80040c8:	08004121 	.word	0x08004121
 80040cc:	08004135 	.word	0x08004135
 80040d0:	080040b1 	.word	0x080040b1
 80040d4:	080040b1 	.word	0x080040b1
 80040d8:	080040b1 	.word	0x080040b1
 80040dc:	080040b1 	.word	0x080040b1
 80040e0:	08004135 	.word	0x08004135
 80040e4:	080040b1 	.word	0x080040b1
 80040e8:	080040b1 	.word	0x080040b1
 80040ec:	080040b1 	.word	0x080040b1
 80040f0:	080040b1 	.word	0x080040b1
 80040f4:	08004243 	.word	0x08004243
 80040f8:	08004165 	.word	0x08004165
 80040fc:	08004225 	.word	0x08004225
 8004100:	080040b1 	.word	0x080040b1
 8004104:	080040b1 	.word	0x080040b1
 8004108:	08004265 	.word	0x08004265
 800410c:	080040b1 	.word	0x080040b1
 8004110:	08004165 	.word	0x08004165
 8004114:	080040b1 	.word	0x080040b1
 8004118:	080040b1 	.word	0x080040b1
 800411c:	0800422d 	.word	0x0800422d
 8004120:	680b      	ldr	r3, [r1, #0]
 8004122:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004126:	1d1a      	adds	r2, r3, #4
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	600a      	str	r2, [r1, #0]
 800412c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004130:	2301      	movs	r3, #1
 8004132:	e0a4      	b.n	800427e <_printf_i+0x1f6>
 8004134:	6825      	ldr	r5, [r4, #0]
 8004136:	6808      	ldr	r0, [r1, #0]
 8004138:	062e      	lsls	r6, r5, #24
 800413a:	f100 0304 	add.w	r3, r0, #4
 800413e:	d50a      	bpl.n	8004156 <_printf_i+0xce>
 8004140:	6805      	ldr	r5, [r0, #0]
 8004142:	600b      	str	r3, [r1, #0]
 8004144:	2d00      	cmp	r5, #0
 8004146:	da03      	bge.n	8004150 <_printf_i+0xc8>
 8004148:	232d      	movs	r3, #45	; 0x2d
 800414a:	426d      	negs	r5, r5
 800414c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004150:	230a      	movs	r3, #10
 8004152:	485e      	ldr	r0, [pc, #376]	; (80042cc <_printf_i+0x244>)
 8004154:	e019      	b.n	800418a <_printf_i+0x102>
 8004156:	f015 0f40 	tst.w	r5, #64	; 0x40
 800415a:	6805      	ldr	r5, [r0, #0]
 800415c:	600b      	str	r3, [r1, #0]
 800415e:	bf18      	it	ne
 8004160:	b22d      	sxthne	r5, r5
 8004162:	e7ef      	b.n	8004144 <_printf_i+0xbc>
 8004164:	680b      	ldr	r3, [r1, #0]
 8004166:	6825      	ldr	r5, [r4, #0]
 8004168:	1d18      	adds	r0, r3, #4
 800416a:	6008      	str	r0, [r1, #0]
 800416c:	0628      	lsls	r0, r5, #24
 800416e:	d501      	bpl.n	8004174 <_printf_i+0xec>
 8004170:	681d      	ldr	r5, [r3, #0]
 8004172:	e002      	b.n	800417a <_printf_i+0xf2>
 8004174:	0669      	lsls	r1, r5, #25
 8004176:	d5fb      	bpl.n	8004170 <_printf_i+0xe8>
 8004178:	881d      	ldrh	r5, [r3, #0]
 800417a:	2f6f      	cmp	r7, #111	; 0x6f
 800417c:	bf0c      	ite	eq
 800417e:	2308      	moveq	r3, #8
 8004180:	230a      	movne	r3, #10
 8004182:	4852      	ldr	r0, [pc, #328]	; (80042cc <_printf_i+0x244>)
 8004184:	2100      	movs	r1, #0
 8004186:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800418a:	6866      	ldr	r6, [r4, #4]
 800418c:	2e00      	cmp	r6, #0
 800418e:	bfa8      	it	ge
 8004190:	6821      	ldrge	r1, [r4, #0]
 8004192:	60a6      	str	r6, [r4, #8]
 8004194:	bfa4      	itt	ge
 8004196:	f021 0104 	bicge.w	r1, r1, #4
 800419a:	6021      	strge	r1, [r4, #0]
 800419c:	b90d      	cbnz	r5, 80041a2 <_printf_i+0x11a>
 800419e:	2e00      	cmp	r6, #0
 80041a0:	d04d      	beq.n	800423e <_printf_i+0x1b6>
 80041a2:	4616      	mov	r6, r2
 80041a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80041a8:	fb03 5711 	mls	r7, r3, r1, r5
 80041ac:	5dc7      	ldrb	r7, [r0, r7]
 80041ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041b2:	462f      	mov	r7, r5
 80041b4:	42bb      	cmp	r3, r7
 80041b6:	460d      	mov	r5, r1
 80041b8:	d9f4      	bls.n	80041a4 <_printf_i+0x11c>
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d10b      	bne.n	80041d6 <_printf_i+0x14e>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	07df      	lsls	r7, r3, #31
 80041c2:	d508      	bpl.n	80041d6 <_printf_i+0x14e>
 80041c4:	6923      	ldr	r3, [r4, #16]
 80041c6:	6861      	ldr	r1, [r4, #4]
 80041c8:	4299      	cmp	r1, r3
 80041ca:	bfde      	ittt	le
 80041cc:	2330      	movle	r3, #48	; 0x30
 80041ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041d2:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80041d6:	1b92      	subs	r2, r2, r6
 80041d8:	6122      	str	r2, [r4, #16]
 80041da:	464b      	mov	r3, r9
 80041dc:	4621      	mov	r1, r4
 80041de:	4640      	mov	r0, r8
 80041e0:	f8cd a000 	str.w	sl, [sp]
 80041e4:	aa03      	add	r2, sp, #12
 80041e6:	f7ff fedf 	bl	8003fa8 <_printf_common>
 80041ea:	3001      	adds	r0, #1
 80041ec:	d14c      	bne.n	8004288 <_printf_i+0x200>
 80041ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041f2:	b004      	add	sp, #16
 80041f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041f8:	4834      	ldr	r0, [pc, #208]	; (80042cc <_printf_i+0x244>)
 80041fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041fe:	680e      	ldr	r6, [r1, #0]
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	f856 5b04 	ldr.w	r5, [r6], #4
 8004206:	061f      	lsls	r7, r3, #24
 8004208:	600e      	str	r6, [r1, #0]
 800420a:	d514      	bpl.n	8004236 <_printf_i+0x1ae>
 800420c:	07d9      	lsls	r1, r3, #31
 800420e:	bf44      	itt	mi
 8004210:	f043 0320 	orrmi.w	r3, r3, #32
 8004214:	6023      	strmi	r3, [r4, #0]
 8004216:	b91d      	cbnz	r5, 8004220 <_printf_i+0x198>
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	f023 0320 	bic.w	r3, r3, #32
 800421e:	6023      	str	r3, [r4, #0]
 8004220:	2310      	movs	r3, #16
 8004222:	e7af      	b.n	8004184 <_printf_i+0xfc>
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	f043 0320 	orr.w	r3, r3, #32
 800422a:	6023      	str	r3, [r4, #0]
 800422c:	2378      	movs	r3, #120	; 0x78
 800422e:	4828      	ldr	r0, [pc, #160]	; (80042d0 <_printf_i+0x248>)
 8004230:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004234:	e7e3      	b.n	80041fe <_printf_i+0x176>
 8004236:	065e      	lsls	r6, r3, #25
 8004238:	bf48      	it	mi
 800423a:	b2ad      	uxthmi	r5, r5
 800423c:	e7e6      	b.n	800420c <_printf_i+0x184>
 800423e:	4616      	mov	r6, r2
 8004240:	e7bb      	b.n	80041ba <_printf_i+0x132>
 8004242:	680b      	ldr	r3, [r1, #0]
 8004244:	6826      	ldr	r6, [r4, #0]
 8004246:	1d1d      	adds	r5, r3, #4
 8004248:	6960      	ldr	r0, [r4, #20]
 800424a:	600d      	str	r5, [r1, #0]
 800424c:	0635      	lsls	r5, r6, #24
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	d501      	bpl.n	8004256 <_printf_i+0x1ce>
 8004252:	6018      	str	r0, [r3, #0]
 8004254:	e002      	b.n	800425c <_printf_i+0x1d4>
 8004256:	0671      	lsls	r1, r6, #25
 8004258:	d5fb      	bpl.n	8004252 <_printf_i+0x1ca>
 800425a:	8018      	strh	r0, [r3, #0]
 800425c:	2300      	movs	r3, #0
 800425e:	4616      	mov	r6, r2
 8004260:	6123      	str	r3, [r4, #16]
 8004262:	e7ba      	b.n	80041da <_printf_i+0x152>
 8004264:	680b      	ldr	r3, [r1, #0]
 8004266:	1d1a      	adds	r2, r3, #4
 8004268:	600a      	str	r2, [r1, #0]
 800426a:	681e      	ldr	r6, [r3, #0]
 800426c:	2100      	movs	r1, #0
 800426e:	4630      	mov	r0, r6
 8004270:	6862      	ldr	r2, [r4, #4]
 8004272:	f000 f82f 	bl	80042d4 <memchr>
 8004276:	b108      	cbz	r0, 800427c <_printf_i+0x1f4>
 8004278:	1b80      	subs	r0, r0, r6
 800427a:	6060      	str	r0, [r4, #4]
 800427c:	6863      	ldr	r3, [r4, #4]
 800427e:	6123      	str	r3, [r4, #16]
 8004280:	2300      	movs	r3, #0
 8004282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004286:	e7a8      	b.n	80041da <_printf_i+0x152>
 8004288:	4632      	mov	r2, r6
 800428a:	4649      	mov	r1, r9
 800428c:	4640      	mov	r0, r8
 800428e:	6923      	ldr	r3, [r4, #16]
 8004290:	47d0      	blx	sl
 8004292:	3001      	adds	r0, #1
 8004294:	d0ab      	beq.n	80041ee <_printf_i+0x166>
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	079b      	lsls	r3, r3, #30
 800429a:	d413      	bmi.n	80042c4 <_printf_i+0x23c>
 800429c:	68e0      	ldr	r0, [r4, #12]
 800429e:	9b03      	ldr	r3, [sp, #12]
 80042a0:	4298      	cmp	r0, r3
 80042a2:	bfb8      	it	lt
 80042a4:	4618      	movlt	r0, r3
 80042a6:	e7a4      	b.n	80041f2 <_printf_i+0x16a>
 80042a8:	2301      	movs	r3, #1
 80042aa:	4632      	mov	r2, r6
 80042ac:	4649      	mov	r1, r9
 80042ae:	4640      	mov	r0, r8
 80042b0:	47d0      	blx	sl
 80042b2:	3001      	adds	r0, #1
 80042b4:	d09b      	beq.n	80041ee <_printf_i+0x166>
 80042b6:	3501      	adds	r5, #1
 80042b8:	68e3      	ldr	r3, [r4, #12]
 80042ba:	9903      	ldr	r1, [sp, #12]
 80042bc:	1a5b      	subs	r3, r3, r1
 80042be:	42ab      	cmp	r3, r5
 80042c0:	dcf2      	bgt.n	80042a8 <_printf_i+0x220>
 80042c2:	e7eb      	b.n	800429c <_printf_i+0x214>
 80042c4:	2500      	movs	r5, #0
 80042c6:	f104 0619 	add.w	r6, r4, #25
 80042ca:	e7f5      	b.n	80042b8 <_printf_i+0x230>
 80042cc:	08004581 	.word	0x08004581
 80042d0:	08004592 	.word	0x08004592

080042d4 <memchr>:
 80042d4:	4603      	mov	r3, r0
 80042d6:	b510      	push	{r4, lr}
 80042d8:	b2c9      	uxtb	r1, r1
 80042da:	4402      	add	r2, r0
 80042dc:	4293      	cmp	r3, r2
 80042de:	4618      	mov	r0, r3
 80042e0:	d101      	bne.n	80042e6 <memchr+0x12>
 80042e2:	2000      	movs	r0, #0
 80042e4:	e003      	b.n	80042ee <memchr+0x1a>
 80042e6:	7804      	ldrb	r4, [r0, #0]
 80042e8:	3301      	adds	r3, #1
 80042ea:	428c      	cmp	r4, r1
 80042ec:	d1f6      	bne.n	80042dc <memchr+0x8>
 80042ee:	bd10      	pop	{r4, pc}

080042f0 <memcpy>:
 80042f0:	440a      	add	r2, r1
 80042f2:	4291      	cmp	r1, r2
 80042f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80042f8:	d100      	bne.n	80042fc <memcpy+0xc>
 80042fa:	4770      	bx	lr
 80042fc:	b510      	push	{r4, lr}
 80042fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004302:	4291      	cmp	r1, r2
 8004304:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004308:	d1f9      	bne.n	80042fe <memcpy+0xe>
 800430a:	bd10      	pop	{r4, pc}

0800430c <memmove>:
 800430c:	4288      	cmp	r0, r1
 800430e:	b510      	push	{r4, lr}
 8004310:	eb01 0402 	add.w	r4, r1, r2
 8004314:	d902      	bls.n	800431c <memmove+0x10>
 8004316:	4284      	cmp	r4, r0
 8004318:	4623      	mov	r3, r4
 800431a:	d807      	bhi.n	800432c <memmove+0x20>
 800431c:	1e43      	subs	r3, r0, #1
 800431e:	42a1      	cmp	r1, r4
 8004320:	d008      	beq.n	8004334 <memmove+0x28>
 8004322:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004326:	f803 2f01 	strb.w	r2, [r3, #1]!
 800432a:	e7f8      	b.n	800431e <memmove+0x12>
 800432c:	4601      	mov	r1, r0
 800432e:	4402      	add	r2, r0
 8004330:	428a      	cmp	r2, r1
 8004332:	d100      	bne.n	8004336 <memmove+0x2a>
 8004334:	bd10      	pop	{r4, pc}
 8004336:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800433a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800433e:	e7f7      	b.n	8004330 <memmove+0x24>

08004340 <_free_r>:
 8004340:	b538      	push	{r3, r4, r5, lr}
 8004342:	4605      	mov	r5, r0
 8004344:	2900      	cmp	r1, #0
 8004346:	d043      	beq.n	80043d0 <_free_r+0x90>
 8004348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800434c:	1f0c      	subs	r4, r1, #4
 800434e:	2b00      	cmp	r3, #0
 8004350:	bfb8      	it	lt
 8004352:	18e4      	addlt	r4, r4, r3
 8004354:	f000 f8d0 	bl	80044f8 <__malloc_lock>
 8004358:	4a1e      	ldr	r2, [pc, #120]	; (80043d4 <_free_r+0x94>)
 800435a:	6813      	ldr	r3, [r2, #0]
 800435c:	4610      	mov	r0, r2
 800435e:	b933      	cbnz	r3, 800436e <_free_r+0x2e>
 8004360:	6063      	str	r3, [r4, #4]
 8004362:	6014      	str	r4, [r2, #0]
 8004364:	4628      	mov	r0, r5
 8004366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800436a:	f000 b8cb 	b.w	8004504 <__malloc_unlock>
 800436e:	42a3      	cmp	r3, r4
 8004370:	d90a      	bls.n	8004388 <_free_r+0x48>
 8004372:	6821      	ldr	r1, [r4, #0]
 8004374:	1862      	adds	r2, r4, r1
 8004376:	4293      	cmp	r3, r2
 8004378:	bf01      	itttt	eq
 800437a:	681a      	ldreq	r2, [r3, #0]
 800437c:	685b      	ldreq	r3, [r3, #4]
 800437e:	1852      	addeq	r2, r2, r1
 8004380:	6022      	streq	r2, [r4, #0]
 8004382:	6063      	str	r3, [r4, #4]
 8004384:	6004      	str	r4, [r0, #0]
 8004386:	e7ed      	b.n	8004364 <_free_r+0x24>
 8004388:	461a      	mov	r2, r3
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	b10b      	cbz	r3, 8004392 <_free_r+0x52>
 800438e:	42a3      	cmp	r3, r4
 8004390:	d9fa      	bls.n	8004388 <_free_r+0x48>
 8004392:	6811      	ldr	r1, [r2, #0]
 8004394:	1850      	adds	r0, r2, r1
 8004396:	42a0      	cmp	r0, r4
 8004398:	d10b      	bne.n	80043b2 <_free_r+0x72>
 800439a:	6820      	ldr	r0, [r4, #0]
 800439c:	4401      	add	r1, r0
 800439e:	1850      	adds	r0, r2, r1
 80043a0:	4283      	cmp	r3, r0
 80043a2:	6011      	str	r1, [r2, #0]
 80043a4:	d1de      	bne.n	8004364 <_free_r+0x24>
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	4401      	add	r1, r0
 80043ac:	6011      	str	r1, [r2, #0]
 80043ae:	6053      	str	r3, [r2, #4]
 80043b0:	e7d8      	b.n	8004364 <_free_r+0x24>
 80043b2:	d902      	bls.n	80043ba <_free_r+0x7a>
 80043b4:	230c      	movs	r3, #12
 80043b6:	602b      	str	r3, [r5, #0]
 80043b8:	e7d4      	b.n	8004364 <_free_r+0x24>
 80043ba:	6820      	ldr	r0, [r4, #0]
 80043bc:	1821      	adds	r1, r4, r0
 80043be:	428b      	cmp	r3, r1
 80043c0:	bf01      	itttt	eq
 80043c2:	6819      	ldreq	r1, [r3, #0]
 80043c4:	685b      	ldreq	r3, [r3, #4]
 80043c6:	1809      	addeq	r1, r1, r0
 80043c8:	6021      	streq	r1, [r4, #0]
 80043ca:	6063      	str	r3, [r4, #4]
 80043cc:	6054      	str	r4, [r2, #4]
 80043ce:	e7c9      	b.n	8004364 <_free_r+0x24>
 80043d0:	bd38      	pop	{r3, r4, r5, pc}
 80043d2:	bf00      	nop
 80043d4:	20000090 	.word	0x20000090

080043d8 <_malloc_r>:
 80043d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043da:	1ccd      	adds	r5, r1, #3
 80043dc:	f025 0503 	bic.w	r5, r5, #3
 80043e0:	3508      	adds	r5, #8
 80043e2:	2d0c      	cmp	r5, #12
 80043e4:	bf38      	it	cc
 80043e6:	250c      	movcc	r5, #12
 80043e8:	2d00      	cmp	r5, #0
 80043ea:	4606      	mov	r6, r0
 80043ec:	db01      	blt.n	80043f2 <_malloc_r+0x1a>
 80043ee:	42a9      	cmp	r1, r5
 80043f0:	d903      	bls.n	80043fa <_malloc_r+0x22>
 80043f2:	230c      	movs	r3, #12
 80043f4:	6033      	str	r3, [r6, #0]
 80043f6:	2000      	movs	r0, #0
 80043f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043fa:	f000 f87d 	bl	80044f8 <__malloc_lock>
 80043fe:	4921      	ldr	r1, [pc, #132]	; (8004484 <_malloc_r+0xac>)
 8004400:	680a      	ldr	r2, [r1, #0]
 8004402:	4614      	mov	r4, r2
 8004404:	b99c      	cbnz	r4, 800442e <_malloc_r+0x56>
 8004406:	4f20      	ldr	r7, [pc, #128]	; (8004488 <_malloc_r+0xb0>)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	b923      	cbnz	r3, 8004416 <_malloc_r+0x3e>
 800440c:	4621      	mov	r1, r4
 800440e:	4630      	mov	r0, r6
 8004410:	f000 f862 	bl	80044d8 <_sbrk_r>
 8004414:	6038      	str	r0, [r7, #0]
 8004416:	4629      	mov	r1, r5
 8004418:	4630      	mov	r0, r6
 800441a:	f000 f85d 	bl	80044d8 <_sbrk_r>
 800441e:	1c43      	adds	r3, r0, #1
 8004420:	d123      	bne.n	800446a <_malloc_r+0x92>
 8004422:	230c      	movs	r3, #12
 8004424:	4630      	mov	r0, r6
 8004426:	6033      	str	r3, [r6, #0]
 8004428:	f000 f86c 	bl	8004504 <__malloc_unlock>
 800442c:	e7e3      	b.n	80043f6 <_malloc_r+0x1e>
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	1b5b      	subs	r3, r3, r5
 8004432:	d417      	bmi.n	8004464 <_malloc_r+0x8c>
 8004434:	2b0b      	cmp	r3, #11
 8004436:	d903      	bls.n	8004440 <_malloc_r+0x68>
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	441c      	add	r4, r3
 800443c:	6025      	str	r5, [r4, #0]
 800443e:	e004      	b.n	800444a <_malloc_r+0x72>
 8004440:	6863      	ldr	r3, [r4, #4]
 8004442:	42a2      	cmp	r2, r4
 8004444:	bf0c      	ite	eq
 8004446:	600b      	streq	r3, [r1, #0]
 8004448:	6053      	strne	r3, [r2, #4]
 800444a:	4630      	mov	r0, r6
 800444c:	f000 f85a 	bl	8004504 <__malloc_unlock>
 8004450:	f104 000b 	add.w	r0, r4, #11
 8004454:	1d23      	adds	r3, r4, #4
 8004456:	f020 0007 	bic.w	r0, r0, #7
 800445a:	1ac2      	subs	r2, r0, r3
 800445c:	d0cc      	beq.n	80043f8 <_malloc_r+0x20>
 800445e:	1a1b      	subs	r3, r3, r0
 8004460:	50a3      	str	r3, [r4, r2]
 8004462:	e7c9      	b.n	80043f8 <_malloc_r+0x20>
 8004464:	4622      	mov	r2, r4
 8004466:	6864      	ldr	r4, [r4, #4]
 8004468:	e7cc      	b.n	8004404 <_malloc_r+0x2c>
 800446a:	1cc4      	adds	r4, r0, #3
 800446c:	f024 0403 	bic.w	r4, r4, #3
 8004470:	42a0      	cmp	r0, r4
 8004472:	d0e3      	beq.n	800443c <_malloc_r+0x64>
 8004474:	1a21      	subs	r1, r4, r0
 8004476:	4630      	mov	r0, r6
 8004478:	f000 f82e 	bl	80044d8 <_sbrk_r>
 800447c:	3001      	adds	r0, #1
 800447e:	d1dd      	bne.n	800443c <_malloc_r+0x64>
 8004480:	e7cf      	b.n	8004422 <_malloc_r+0x4a>
 8004482:	bf00      	nop
 8004484:	20000090 	.word	0x20000090
 8004488:	20000094 	.word	0x20000094

0800448c <_realloc_r>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	4607      	mov	r7, r0
 8004490:	4614      	mov	r4, r2
 8004492:	460e      	mov	r6, r1
 8004494:	b921      	cbnz	r1, 80044a0 <_realloc_r+0x14>
 8004496:	4611      	mov	r1, r2
 8004498:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800449c:	f7ff bf9c 	b.w	80043d8 <_malloc_r>
 80044a0:	b922      	cbnz	r2, 80044ac <_realloc_r+0x20>
 80044a2:	f7ff ff4d 	bl	8004340 <_free_r>
 80044a6:	4625      	mov	r5, r4
 80044a8:	4628      	mov	r0, r5
 80044aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044ac:	f000 f830 	bl	8004510 <_malloc_usable_size_r>
 80044b0:	42a0      	cmp	r0, r4
 80044b2:	d20f      	bcs.n	80044d4 <_realloc_r+0x48>
 80044b4:	4621      	mov	r1, r4
 80044b6:	4638      	mov	r0, r7
 80044b8:	f7ff ff8e 	bl	80043d8 <_malloc_r>
 80044bc:	4605      	mov	r5, r0
 80044be:	2800      	cmp	r0, #0
 80044c0:	d0f2      	beq.n	80044a8 <_realloc_r+0x1c>
 80044c2:	4631      	mov	r1, r6
 80044c4:	4622      	mov	r2, r4
 80044c6:	f7ff ff13 	bl	80042f0 <memcpy>
 80044ca:	4631      	mov	r1, r6
 80044cc:	4638      	mov	r0, r7
 80044ce:	f7ff ff37 	bl	8004340 <_free_r>
 80044d2:	e7e9      	b.n	80044a8 <_realloc_r+0x1c>
 80044d4:	4635      	mov	r5, r6
 80044d6:	e7e7      	b.n	80044a8 <_realloc_r+0x1c>

080044d8 <_sbrk_r>:
 80044d8:	b538      	push	{r3, r4, r5, lr}
 80044da:	2300      	movs	r3, #0
 80044dc:	4d05      	ldr	r5, [pc, #20]	; (80044f4 <_sbrk_r+0x1c>)
 80044de:	4604      	mov	r4, r0
 80044e0:	4608      	mov	r0, r1
 80044e2:	602b      	str	r3, [r5, #0]
 80044e4:	f7fd f988 	bl	80017f8 <_sbrk>
 80044e8:	1c43      	adds	r3, r0, #1
 80044ea:	d102      	bne.n	80044f2 <_sbrk_r+0x1a>
 80044ec:	682b      	ldr	r3, [r5, #0]
 80044ee:	b103      	cbz	r3, 80044f2 <_sbrk_r+0x1a>
 80044f0:	6023      	str	r3, [r4, #0]
 80044f2:	bd38      	pop	{r3, r4, r5, pc}
 80044f4:	200001b0 	.word	0x200001b0

080044f8 <__malloc_lock>:
 80044f8:	4801      	ldr	r0, [pc, #4]	; (8004500 <__malloc_lock+0x8>)
 80044fa:	f000 b811 	b.w	8004520 <__retarget_lock_acquire_recursive>
 80044fe:	bf00      	nop
 8004500:	200001b8 	.word	0x200001b8

08004504 <__malloc_unlock>:
 8004504:	4801      	ldr	r0, [pc, #4]	; (800450c <__malloc_unlock+0x8>)
 8004506:	f000 b80c 	b.w	8004522 <__retarget_lock_release_recursive>
 800450a:	bf00      	nop
 800450c:	200001b8 	.word	0x200001b8

08004510 <_malloc_usable_size_r>:
 8004510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004514:	1f18      	subs	r0, r3, #4
 8004516:	2b00      	cmp	r3, #0
 8004518:	bfbc      	itt	lt
 800451a:	580b      	ldrlt	r3, [r1, r0]
 800451c:	18c0      	addlt	r0, r0, r3
 800451e:	4770      	bx	lr

08004520 <__retarget_lock_acquire_recursive>:
 8004520:	4770      	bx	lr

08004522 <__retarget_lock_release_recursive>:
 8004522:	4770      	bx	lr

08004524 <_init>:
 8004524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004526:	bf00      	nop
 8004528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452a:	bc08      	pop	{r3}
 800452c:	469e      	mov	lr, r3
 800452e:	4770      	bx	lr

08004530 <_fini>:
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	bf00      	nop
 8004534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004536:	bc08      	pop	{r3}
 8004538:	469e      	mov	lr, r3
 800453a:	4770      	bx	lr
